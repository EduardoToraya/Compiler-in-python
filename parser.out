Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars mult_funcion principal
Rule 2     programa -> PROGRAMA p_n_mainJump ID SEMICOLON mult_funcion principal
Rule 3     programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars principal
Rule 4     programa -> PROGRAMA p_n_mainJump ID SEMICOLON principal
Rule 5     p_n_mainJump -> <empty>
Rule 6     principal -> PRINCIPAL n_register_glob LPAREN RPAREN bloque
Rule 7     n_register_glob -> <empty>
Rule 8     vars -> VAR vars_aux
Rule 9     vars_aux -> tipo_simple vars_aux1 SEMICOLON
Rule 10    vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux
Rule 11    vars_aux1 -> vars_aux2
Rule 12    vars_aux1 -> vars_aux2 COMMA vars_aux1
Rule 13    vars_aux2 -> ID n_save_var
Rule 14    vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE
Rule 15    n_save_array -> <empty>
Rule 16    n_save_var -> <empty>
Rule 17    tipo_simple -> INT n_save_type
Rule 18    tipo_simple -> FLOAT n_save_type
Rule 19    tipo_simple -> CHAR n_save_type
Rule 20    n_save_type -> <empty>
Rule 21    empty -> <empty>
Rule 22    variable -> ID LSQUARE mult_exp RSQUARE
Rule 23    variable -> ID p_n_getVarVal
Rule 24    p_n_getVarVal -> <empty>
Rule 25    mult_funcion -> funcion
Rule 26    mult_funcion -> funcion mult_funcion
Rule 27    funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
Rule 28    funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
Rule 29    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
Rule 30    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
Rule 31    funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
Rule 32    funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
Rule 33    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
Rule 34    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func
Rule 35    n_register_func -> <empty>
Rule 36    param -> tipo_simple param_aux1
Rule 37    param_aux1 -> ID save_param
Rule 38    param_aux1 -> ID save_param COMMA param
Rule 39    save_param -> <empty>
Rule 40    n_endof_func -> <empty>
Rule 41    bloque -> LBRACKET mult_estatutos RBRACKET
Rule 42    bloque -> LBRACKET empty RBRACKET
Rule 43    mult_estatutos -> estatuto
Rule 44    mult_estatutos -> estatuto mult_estatutos
Rule 45    estatuto -> asigna SEMICOLON
Rule 46    estatuto -> llamada SEMICOLON
Rule 47    estatuto -> lee
Rule 48    estatuto -> escribe
Rule 49    estatuto -> condicion
Rule 50    estatuto -> ciclo_w
Rule 51    estatuto -> retorno
Rule 52    estatuto -> ciclo_f
Rule 53    asigna -> mult_asigna
Rule 54    mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad
Rule 55    mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad
Rule 56    n_asignQuad -> <empty>
Rule 57    param_exp -> exp n_parameter_action
Rule 58    param_exp -> exp n_parameter_action COMMA param_exp
Rule 59    n_parameter_action -> <empty>
Rule 60    llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
Rule 61    llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
Rule 62    n_last_param_action -> <empty>
Rule 63    n_start_pcounter -> <empty>
Rule 64    n_verify_func -> <empty>
Rule 65    lee -> LEE LPAREN variable RPAREN SEMICOLON
Rule 66    escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
Rule 67    escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON
Rule 68    n_escribeExp -> <empty>
Rule 69    mult_cte_s -> CTE_S
Rule 70    mult_cte_s -> CTE_S COMMA mult_cte_s
Rule 71    mult_exp -> exp
Rule 72    mult_exp -> exp COMMA mult_exp
Rule 73    exp -> t_exp n_orQuad
Rule 74    exp -> t_exp n_orQuad OR n_Operador exp
Rule 75    n_orQuad -> <empty>
Rule 76    t_exp -> g_exp n_andQuad
Rule 77    t_exp -> g_exp n_andQuad AND n_Operador t_exp
Rule 78    n_andQuad -> <empty>
Rule 79    g_exp -> m_exp n_compareQuad
Rule 80    g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp
Rule 81    g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp
Rule 82    g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp
Rule 83    g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
Rule 84    g_exp -> m_exp n_compareQuad SAME n_Operador g_exp
Rule 85    g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp
Rule 86    n_compareQuad -> <empty>
Rule 87    m_exp -> t n_sumQuad
Rule 88    m_exp -> t n_sumQuad PLUS n_Operador m_exp
Rule 89    m_exp -> t n_sumQuad MINUS n_Operador m_exp
Rule 90    n_sumQuad -> <empty>
Rule 91    t -> f n_multQuad
Rule 92    t -> f n_multQuad MULT n_Operador t
Rule 93    t -> f n_multQuad DIV n_Operador t
Rule 94    n_multQuad -> <empty>
Rule 95    n_Operador -> <empty>
Rule 96    f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF
Rule 97    f -> n_tempTypeI CTE_I n_directPrint
Rule 98    f -> n_tempTypeF CTE_F n_directPrint
Rule 99    f -> n_tempTypeC CTE_C n_directPrint
Rule 100   f -> variable
Rule 101   f -> llamada
Rule 102   n_tempTypeI -> <empty>
Rule 103   n_tempTypeF -> <empty>
Rule 104   n_tempTypeC -> <empty>
Rule 105   n_directPrint -> <empty>
Rule 106   n_start_FF -> <empty>
Rule 107   n_end_FF -> <empty>
Rule 108   condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
Rule 109   condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
Rule 110   n_ifQuad -> <empty>
Rule 111   n_endIfQuad -> <empty>
Rule 112   p_n_sinoQuad -> <empty>
Rule 113   ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
Rule 114   n_startCicle -> <empty>
Rule 115   n_evalExp -> <empty>
Rule 116   n_endWhile -> <empty>
Rule 117   ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
Rule 118   n_evalExp_for -> <empty>
Rule 119   n_endFor -> <empty>
Rule 120   retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON
Rule 121   n_regresaExp -> <empty>

Terminals, with rules where they appear

AND                  : 77
CHAR                 : 19
COMMA                : 12 38 58 70 72
COMMENT              : 
CTE_C                : 99
CTE_F                : 98
CTE_I                : 14 97
CTE_S                : 69 70
DESDE                : 117
DIV                  : 93
ENTONCES             : 108 109
EQUAL                : 54 55
ESCRIBE              : 66 67
FLOAT                : 18
FUNCION              : 27 28 29 30 31 32 33 34
GREATEREQUAL         : 83
GREATERTHAN          : 82
HACER                : 117
HASTA                : 117
HAZ                  : 113
ID                   : 1 2 3 4 13 14 22 23 27 28 29 30 31 32 33 34 37 38 60 61
INT                  : 17
LBRACKET             : 41 42
LEE                  : 65
LESSEQUAL            : 81
LESSTHAN             : 80
LPAREN               : 6 27 28 29 30 31 32 33 34 60 61 65 66 67 96 108 109 113 120
LSQUARE              : 14 22
MIENTRAS             : 113
MINUS                : 89
MULT                 : 92
NOEQUAL              : 85
OR                   : 74
PLUS                 : 88
PRINCIPAL            : 6
PROGRAMA             : 1 2 3 4
RBRACKET             : 41 42
REGRESA              : 120
RPAREN               : 6 27 28 29 30 31 32 33 34 60 61 65 66 67 96 108 109 113 120
RSQUARE              : 14 22
SAME                 : 84
SEMICOLON            : 1 2 3 4 9 10 45 46 65 66 67 120
SI                   : 108 109
SINO                 : 109
VAR                  : 8
VOID                 : 29 30 33 34
error                : 

Nonterminals, with rules where they appear

asigna               : 45 117
bloque               : 6 27 28 29 30 31 32 33 34 108 109 109 113 117
ciclo_f              : 52
ciclo_w              : 50
condicion            : 49
empty                : 42
escribe              : 48
estatuto             : 43 44
exp                  : 57 58 71 72 74
f                    : 91 92 93
funcion              : 25 26
g_exp                : 76 77 80 81 82 83 84 85
lee                  : 47
llamada              : 46 101
m_exp                : 79 80 81 82 83 84 85 88 89
mult_asigna          : 53 55
mult_cte_s           : 67 70
mult_estatutos       : 41 44
mult_exp             : 22 54 66 72 96 108 109 113 117 120
mult_funcion         : 1 2 26
n_Operador           : 54 55 74 77 80 81 82 83 84 85 88 89 92 93
n_andQuad            : 76 77
n_asignQuad          : 54 55
n_compareQuad        : 79 80 81 82 83 84 85
n_directPrint        : 97 98 99
n_endFor             : 117
n_endIfQuad          : 108 109
n_endWhile           : 113
n_end_FF             : 96
n_endof_func         : 27 28 29 30 31 32 33 34
n_escribeExp         : 66 67
n_evalExp            : 113
n_evalExp_for        : 117
n_ifQuad             : 108 109
n_last_param_action  : 60 61
n_multQuad           : 91 92 93
n_orQuad             : 73 74
n_parameter_action   : 57 58
n_register_func      : 27 28 29 30 31 32 33 34
n_register_glob      : 6
n_regresaExp         : 120
n_save_array         : 14
n_save_type          : 17 18 19 29 30 33 34
n_save_var           : 13
n_startCicle         : 113 117
n_start_FF           : 96
n_start_pcounter     : 60 61
n_sumQuad            : 87 88 89
n_tempTypeC          : 99
n_tempTypeF          : 98
n_tempTypeI          : 97
n_verify_func        : 60 61
p_n_getVarVal        : 23
p_n_mainJump         : 1 2 3 4
p_n_sinoQuad         : 109
param                : 27 28 29 30 38
param_aux1           : 36
param_exp            : 58 60
principal            : 1 2 3 4
programa             : 0
retorno              : 51
save_param           : 37 38
t                    : 87 88 89 92 93
t_exp                : 73 74 77
tipo_simple          : 9 10 27 28 31 32 36
variable             : 54 55 65 100
vars                 : 1 3 27 29 31 33
vars_aux             : 8 10
vars_aux1            : 9 10 12
vars_aux2            : 11 12

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA p_n_mainJump ID SEMICOLON vars mult_funcion principal
    (2) programa -> . PROGRAMA p_n_mainJump ID SEMICOLON mult_funcion principal
    (3) programa -> . PROGRAMA p_n_mainJump ID SEMICOLON vars principal
    (4) programa -> . PROGRAMA p_n_mainJump ID SEMICOLON principal

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . p_n_mainJump ID SEMICOLON vars mult_funcion principal
    (2) programa -> PROGRAMA . p_n_mainJump ID SEMICOLON mult_funcion principal
    (3) programa -> PROGRAMA . p_n_mainJump ID SEMICOLON vars principal
    (4) programa -> PROGRAMA . p_n_mainJump ID SEMICOLON principal
    (5) p_n_mainJump -> .

    ID              reduce using rule 5 (p_n_mainJump -> .)

    p_n_mainJump                   shift and go to state 3

state 3

    (1) programa -> PROGRAMA p_n_mainJump . ID SEMICOLON vars mult_funcion principal
    (2) programa -> PROGRAMA p_n_mainJump . ID SEMICOLON mult_funcion principal
    (3) programa -> PROGRAMA p_n_mainJump . ID SEMICOLON vars principal
    (4) programa -> PROGRAMA p_n_mainJump . ID SEMICOLON principal

    ID              shift and go to state 4


state 4

    (1) programa -> PROGRAMA p_n_mainJump ID . SEMICOLON vars mult_funcion principal
    (2) programa -> PROGRAMA p_n_mainJump ID . SEMICOLON mult_funcion principal
    (3) programa -> PROGRAMA p_n_mainJump ID . SEMICOLON vars principal
    (4) programa -> PROGRAMA p_n_mainJump ID . SEMICOLON principal

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> PROGRAMA p_n_mainJump ID SEMICOLON . vars mult_funcion principal
    (2) programa -> PROGRAMA p_n_mainJump ID SEMICOLON . mult_funcion principal
    (3) programa -> PROGRAMA p_n_mainJump ID SEMICOLON . vars principal
    (4) programa -> PROGRAMA p_n_mainJump ID SEMICOLON . principal
    (8) vars -> . VAR vars_aux
    (25) mult_funcion -> . funcion
    (26) mult_funcion -> . funcion mult_funcion
    (6) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque
    (27) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (29) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (33) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func

    VAR             shift and go to state 9
    PRINCIPAL       shift and go to state 11
    FUNCION         shift and go to state 12

    vars                           shift and go to state 6
    mult_funcion                   shift and go to state 7
    principal                      shift and go to state 8
    funcion                        shift and go to state 10

state 6

    (1) programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars . mult_funcion principal
    (3) programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars . principal
    (25) mult_funcion -> . funcion
    (26) mult_funcion -> . funcion mult_funcion
    (6) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque
    (27) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (29) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (33) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func

    PRINCIPAL       shift and go to state 11
    FUNCION         shift and go to state 12

    mult_funcion                   shift and go to state 13
    principal                      shift and go to state 14
    funcion                        shift and go to state 10

state 7

    (2) programa -> PROGRAMA p_n_mainJump ID SEMICOLON mult_funcion . principal
    (6) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque

    PRINCIPAL       shift and go to state 11

    principal                      shift and go to state 15

state 8

    (4) programa -> PROGRAMA p_n_mainJump ID SEMICOLON principal .

    $end            reduce using rule 4 (programa -> PROGRAMA p_n_mainJump ID SEMICOLON principal .)


state 9

    (8) vars -> VAR . vars_aux
    (9) vars_aux -> . tipo_simple vars_aux1 SEMICOLON
    (10) vars_aux -> . tipo_simple vars_aux1 SEMICOLON vars_aux
    (17) tipo_simple -> . INT n_save_type
    (18) tipo_simple -> . FLOAT n_save_type
    (19) tipo_simple -> . CHAR n_save_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    vars_aux                       shift and go to state 16
    tipo_simple                    shift and go to state 17

state 10

    (25) mult_funcion -> funcion .
    (26) mult_funcion -> funcion . mult_funcion
    (25) mult_funcion -> . funcion
    (26) mult_funcion -> . funcion mult_funcion
    (27) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (29) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (33) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func

    PRINCIPAL       reduce using rule 25 (mult_funcion -> funcion .)
    FUNCION         shift and go to state 12

    funcion                        shift and go to state 10
    mult_funcion                   shift and go to state 21

state 11

    (6) principal -> PRINCIPAL . n_register_glob LPAREN RPAREN bloque
    (7) n_register_glob -> .

    LPAREN          reduce using rule 7 (n_register_glob -> .)

    n_register_glob                shift and go to state 22

state 12

    (27) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (29) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (33) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func
    (17) tipo_simple -> . INT n_save_type
    (18) tipo_simple -> . FLOAT n_save_type
    (19) tipo_simple -> . CHAR n_save_type

    VOID            shift and go to state 24
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo_simple                    shift and go to state 23

state 13

    (1) programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars mult_funcion . principal
    (6) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque

    PRINCIPAL       shift and go to state 11

    principal                      shift and go to state 25

state 14

    (3) programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars principal .

    $end            reduce using rule 3 (programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars principal .)


state 15

    (2) programa -> PROGRAMA p_n_mainJump ID SEMICOLON mult_funcion principal .

    $end            reduce using rule 2 (programa -> PROGRAMA p_n_mainJump ID SEMICOLON mult_funcion principal .)


state 16

    (8) vars -> VAR vars_aux .

    PRINCIPAL       reduce using rule 8 (vars -> VAR vars_aux .)
    FUNCION         reduce using rule 8 (vars -> VAR vars_aux .)
    LBRACKET        reduce using rule 8 (vars -> VAR vars_aux .)


state 17

    (9) vars_aux -> tipo_simple . vars_aux1 SEMICOLON
    (10) vars_aux -> tipo_simple . vars_aux1 SEMICOLON vars_aux
    (11) vars_aux1 -> . vars_aux2
    (12) vars_aux1 -> . vars_aux2 COMMA vars_aux1
    (13) vars_aux2 -> . ID n_save_var
    (14) vars_aux2 -> . ID LSQUARE CTE_I n_save_array RSQUARE

    ID              shift and go to state 28

    vars_aux1                      shift and go to state 26
    vars_aux2                      shift and go to state 27

state 18

    (17) tipo_simple -> INT . n_save_type
    (20) n_save_type -> .

    ID              reduce using rule 20 (n_save_type -> .)

    n_save_type                    shift and go to state 29

state 19

    (18) tipo_simple -> FLOAT . n_save_type
    (20) n_save_type -> .

    ID              reduce using rule 20 (n_save_type -> .)

    n_save_type                    shift and go to state 30

state 20

    (19) tipo_simple -> CHAR . n_save_type
    (20) n_save_type -> .

    ID              reduce using rule 20 (n_save_type -> .)

    n_save_type                    shift and go to state 31

state 21

    (26) mult_funcion -> funcion mult_funcion .

    PRINCIPAL       reduce using rule 26 (mult_funcion -> funcion mult_funcion .)


state 22

    (6) principal -> PRINCIPAL n_register_glob . LPAREN RPAREN bloque

    LPAREN          shift and go to state 32


state 23

    (27) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN RPAREN bloque n_endof_func

    ID              shift and go to state 33


state 24

    (29) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (33) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func
    (20) n_save_type -> .

    ID              reduce using rule 20 (n_save_type -> .)

    n_save_type                    shift and go to state 34

state 25

    (1) programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars mult_funcion principal .

    $end            reduce using rule 1 (programa -> PROGRAMA p_n_mainJump ID SEMICOLON vars mult_funcion principal .)


state 26

    (9) vars_aux -> tipo_simple vars_aux1 . SEMICOLON
    (10) vars_aux -> tipo_simple vars_aux1 . SEMICOLON vars_aux

    SEMICOLON       shift and go to state 35


state 27

    (11) vars_aux1 -> vars_aux2 .
    (12) vars_aux1 -> vars_aux2 . COMMA vars_aux1

    SEMICOLON       reduce using rule 11 (vars_aux1 -> vars_aux2 .)
    COMMA           shift and go to state 36


state 28

    (13) vars_aux2 -> ID . n_save_var
    (14) vars_aux2 -> ID . LSQUARE CTE_I n_save_array RSQUARE
    (16) n_save_var -> .

    LSQUARE         shift and go to state 38
    COMMA           reduce using rule 16 (n_save_var -> .)
    SEMICOLON       reduce using rule 16 (n_save_var -> .)

    n_save_var                     shift and go to state 37

state 29

    (17) tipo_simple -> INT n_save_type .

    ID              reduce using rule 17 (tipo_simple -> INT n_save_type .)


state 30

    (18) tipo_simple -> FLOAT n_save_type .

    ID              reduce using rule 18 (tipo_simple -> FLOAT n_save_type .)


state 31

    (19) tipo_simple -> CHAR n_save_type .

    ID              reduce using rule 19 (tipo_simple -> CHAR n_save_type .)


state 32

    (6) principal -> PRINCIPAL n_register_glob LPAREN . RPAREN bloque

    RPAREN          shift and go to state 39


state 33

    (27) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN RPAREN bloque n_endof_func
    (35) n_register_func -> .

    LPAREN          reduce using rule 35 (n_register_func -> .)

    n_register_func                shift and go to state 40

state 34

    (29) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN RPAREN bloque n_endof_func

    ID              shift and go to state 41


state 35

    (9) vars_aux -> tipo_simple vars_aux1 SEMICOLON .
    (10) vars_aux -> tipo_simple vars_aux1 SEMICOLON . vars_aux
    (9) vars_aux -> . tipo_simple vars_aux1 SEMICOLON
    (10) vars_aux -> . tipo_simple vars_aux1 SEMICOLON vars_aux
    (17) tipo_simple -> . INT n_save_type
    (18) tipo_simple -> . FLOAT n_save_type
    (19) tipo_simple -> . CHAR n_save_type

    PRINCIPAL       reduce using rule 9 (vars_aux -> tipo_simple vars_aux1 SEMICOLON .)
    FUNCION         reduce using rule 9 (vars_aux -> tipo_simple vars_aux1 SEMICOLON .)
    LBRACKET        reduce using rule 9 (vars_aux -> tipo_simple vars_aux1 SEMICOLON .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo_simple                    shift and go to state 17
    vars_aux                       shift and go to state 42

state 36

    (12) vars_aux1 -> vars_aux2 COMMA . vars_aux1
    (11) vars_aux1 -> . vars_aux2
    (12) vars_aux1 -> . vars_aux2 COMMA vars_aux1
    (13) vars_aux2 -> . ID n_save_var
    (14) vars_aux2 -> . ID LSQUARE CTE_I n_save_array RSQUARE

    ID              shift and go to state 28

    vars_aux2                      shift and go to state 27
    vars_aux1                      shift and go to state 43

state 37

    (13) vars_aux2 -> ID n_save_var .

    COMMA           reduce using rule 13 (vars_aux2 -> ID n_save_var .)
    SEMICOLON       reduce using rule 13 (vars_aux2 -> ID n_save_var .)


state 38

    (14) vars_aux2 -> ID LSQUARE . CTE_I n_save_array RSQUARE

    CTE_I           shift and go to state 44


state 39

    (6) principal -> PRINCIPAL n_register_glob LPAREN RPAREN . bloque
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 45

state 40

    (27) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN param RPAREN vars bloque n_endof_func
    (28) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN param RPAREN bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN RPAREN vars bloque n_endof_func
    (32) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN RPAREN bloque n_endof_func

    LPAREN          shift and go to state 47


state 41

    (29) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN param RPAREN bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN RPAREN bloque n_endof_func
    (35) n_register_func -> .

    LPAREN          reduce using rule 35 (n_register_func -> .)

    n_register_func                shift and go to state 48

state 42

    (10) vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .

    PRINCIPAL       reduce using rule 10 (vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .)
    FUNCION         reduce using rule 10 (vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .)
    LBRACKET        reduce using rule 10 (vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .)


state 43

    (12) vars_aux1 -> vars_aux2 COMMA vars_aux1 .

    SEMICOLON       reduce using rule 12 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)


state 44

    (14) vars_aux2 -> ID LSQUARE CTE_I . n_save_array RSQUARE
    (15) n_save_array -> .

    RSQUARE         reduce using rule 15 (n_save_array -> .)

    n_save_array                   shift and go to state 49

state 45

    (6) principal -> PRINCIPAL n_register_glob LPAREN RPAREN bloque .

    $end            reduce using rule 6 (principal -> PRINCIPAL n_register_glob LPAREN RPAREN bloque .)


state 46

    (41) bloque -> LBRACKET . mult_estatutos RBRACKET
    (42) bloque -> LBRACKET . empty RBRACKET
    (43) mult_estatutos -> . estatuto
    (44) mult_estatutos -> . estatuto mult_estatutos
    (21) empty -> .
    (45) estatuto -> . asigna SEMICOLON
    (46) estatuto -> . llamada SEMICOLON
    (47) estatuto -> . lee
    (48) estatuto -> . escribe
    (49) estatuto -> . condicion
    (50) estatuto -> . ciclo_w
    (51) estatuto -> . retorno
    (52) estatuto -> . ciclo_f
    (53) asigna -> . mult_asigna
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (65) lee -> . LEE LPAREN variable RPAREN SEMICOLON
    (66) escribe -> . ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
    (67) escribe -> . ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON
    (108) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (109) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (113) ciclo_w -> . MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (120) retorno -> . REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON
    (117) ciclo_f -> . DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (54) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal

    RBRACKET        reduce using rule 21 (empty -> .)
    ID              shift and go to state 62
    LEE             shift and go to state 63
    ESCRIBE         shift and go to state 65
    SI              shift and go to state 66
    MIENTRAS        shift and go to state 67
    REGRESA         shift and go to state 68
    DESDE           shift and go to state 69

    mult_estatutos                 shift and go to state 50
    empty                          shift and go to state 51
    estatuto                       shift and go to state 52
    asigna                         shift and go to state 53
    llamada                        shift and go to state 54
    lee                            shift and go to state 55
    escribe                        shift and go to state 56
    condicion                      shift and go to state 57
    ciclo_w                        shift and go to state 58
    retorno                        shift and go to state 59
    ciclo_f                        shift and go to state 60
    mult_asigna                    shift and go to state 61
    variable                       shift and go to state 64

state 47

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . param RPAREN vars bloque n_endof_func
    (28) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . param RPAREN bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . RPAREN vars bloque n_endof_func
    (32) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . RPAREN bloque n_endof_func
    (36) param -> . tipo_simple param_aux1
    (17) tipo_simple -> . INT n_save_type
    (18) tipo_simple -> . FLOAT n_save_type
    (19) tipo_simple -> . CHAR n_save_type

    RPAREN          shift and go to state 72
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo_simple                    shift and go to state 70
    param                          shift and go to state 71

state 48

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN param RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN param RPAREN bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN RPAREN vars bloque n_endof_func
    (34) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN RPAREN bloque n_endof_func

    LPAREN          shift and go to state 73


state 49

    (14) vars_aux2 -> ID LSQUARE CTE_I n_save_array . RSQUARE

    RSQUARE         shift and go to state 74


state 50

    (41) bloque -> LBRACKET mult_estatutos . RBRACKET

    RBRACKET        shift and go to state 75


state 51

    (42) bloque -> LBRACKET empty . RBRACKET

    RBRACKET        shift and go to state 76


state 52

    (43) mult_estatutos -> estatuto .
    (44) mult_estatutos -> estatuto . mult_estatutos
    (43) mult_estatutos -> . estatuto
    (44) mult_estatutos -> . estatuto mult_estatutos
    (45) estatuto -> . asigna SEMICOLON
    (46) estatuto -> . llamada SEMICOLON
    (47) estatuto -> . lee
    (48) estatuto -> . escribe
    (49) estatuto -> . condicion
    (50) estatuto -> . ciclo_w
    (51) estatuto -> . retorno
    (52) estatuto -> . ciclo_f
    (53) asigna -> . mult_asigna
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (65) lee -> . LEE LPAREN variable RPAREN SEMICOLON
    (66) escribe -> . ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
    (67) escribe -> . ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON
    (108) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (109) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (113) ciclo_w -> . MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (120) retorno -> . REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON
    (117) ciclo_f -> . DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (54) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal

    RBRACKET        reduce using rule 43 (mult_estatutos -> estatuto .)
    ID              shift and go to state 62
    LEE             shift and go to state 63
    ESCRIBE         shift and go to state 65
    SI              shift and go to state 66
    MIENTRAS        shift and go to state 67
    REGRESA         shift and go to state 68
    DESDE           shift and go to state 69

    estatuto                       shift and go to state 52
    mult_estatutos                 shift and go to state 77
    asigna                         shift and go to state 53
    llamada                        shift and go to state 54
    lee                            shift and go to state 55
    escribe                        shift and go to state 56
    condicion                      shift and go to state 57
    ciclo_w                        shift and go to state 58
    retorno                        shift and go to state 59
    ciclo_f                        shift and go to state 60
    mult_asigna                    shift and go to state 61
    variable                       shift and go to state 64

state 53

    (45) estatuto -> asigna . SEMICOLON

    SEMICOLON       shift and go to state 78


state 54

    (46) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 79


state 55

    (47) estatuto -> lee .

    ID              reduce using rule 47 (estatuto -> lee .)
    LEE             reduce using rule 47 (estatuto -> lee .)
    ESCRIBE         reduce using rule 47 (estatuto -> lee .)
    SI              reduce using rule 47 (estatuto -> lee .)
    MIENTRAS        reduce using rule 47 (estatuto -> lee .)
    REGRESA         reduce using rule 47 (estatuto -> lee .)
    DESDE           reduce using rule 47 (estatuto -> lee .)
    RBRACKET        reduce using rule 47 (estatuto -> lee .)


state 56

    (48) estatuto -> escribe .

    ID              reduce using rule 48 (estatuto -> escribe .)
    LEE             reduce using rule 48 (estatuto -> escribe .)
    ESCRIBE         reduce using rule 48 (estatuto -> escribe .)
    SI              reduce using rule 48 (estatuto -> escribe .)
    MIENTRAS        reduce using rule 48 (estatuto -> escribe .)
    REGRESA         reduce using rule 48 (estatuto -> escribe .)
    DESDE           reduce using rule 48 (estatuto -> escribe .)
    RBRACKET        reduce using rule 48 (estatuto -> escribe .)


state 57

    (49) estatuto -> condicion .

    ID              reduce using rule 49 (estatuto -> condicion .)
    LEE             reduce using rule 49 (estatuto -> condicion .)
    ESCRIBE         reduce using rule 49 (estatuto -> condicion .)
    SI              reduce using rule 49 (estatuto -> condicion .)
    MIENTRAS        reduce using rule 49 (estatuto -> condicion .)
    REGRESA         reduce using rule 49 (estatuto -> condicion .)
    DESDE           reduce using rule 49 (estatuto -> condicion .)
    RBRACKET        reduce using rule 49 (estatuto -> condicion .)


state 58

    (50) estatuto -> ciclo_w .

    ID              reduce using rule 50 (estatuto -> ciclo_w .)
    LEE             reduce using rule 50 (estatuto -> ciclo_w .)
    ESCRIBE         reduce using rule 50 (estatuto -> ciclo_w .)
    SI              reduce using rule 50 (estatuto -> ciclo_w .)
    MIENTRAS        reduce using rule 50 (estatuto -> ciclo_w .)
    REGRESA         reduce using rule 50 (estatuto -> ciclo_w .)
    DESDE           reduce using rule 50 (estatuto -> ciclo_w .)
    RBRACKET        reduce using rule 50 (estatuto -> ciclo_w .)


state 59

    (51) estatuto -> retorno .

    ID              reduce using rule 51 (estatuto -> retorno .)
    LEE             reduce using rule 51 (estatuto -> retorno .)
    ESCRIBE         reduce using rule 51 (estatuto -> retorno .)
    SI              reduce using rule 51 (estatuto -> retorno .)
    MIENTRAS        reduce using rule 51 (estatuto -> retorno .)
    REGRESA         reduce using rule 51 (estatuto -> retorno .)
    DESDE           reduce using rule 51 (estatuto -> retorno .)
    RBRACKET        reduce using rule 51 (estatuto -> retorno .)


state 60

    (52) estatuto -> ciclo_f .

    ID              reduce using rule 52 (estatuto -> ciclo_f .)
    LEE             reduce using rule 52 (estatuto -> ciclo_f .)
    ESCRIBE         reduce using rule 52 (estatuto -> ciclo_f .)
    SI              reduce using rule 52 (estatuto -> ciclo_f .)
    MIENTRAS        reduce using rule 52 (estatuto -> ciclo_f .)
    REGRESA         reduce using rule 52 (estatuto -> ciclo_f .)
    DESDE           reduce using rule 52 (estatuto -> ciclo_f .)
    RBRACKET        reduce using rule 52 (estatuto -> ciclo_f .)


state 61

    (53) asigna -> mult_asigna .

    SEMICOLON       reduce using rule 53 (asigna -> mult_asigna .)
    HASTA           reduce using rule 53 (asigna -> mult_asigna .)


state 62

    (60) llamada -> ID . n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> ID . n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (22) variable -> ID . LSQUARE mult_exp RSQUARE
    (23) variable -> ID . p_n_getVarVal
    (64) n_verify_func -> .
    (24) p_n_getVarVal -> .

    LSQUARE         shift and go to state 81
    LPAREN          reduce using rule 64 (n_verify_func -> .)
    EQUAL           reduce using rule 24 (p_n_getVarVal -> .)

    n_verify_func                  shift and go to state 80
    p_n_getVarVal                  shift and go to state 82

state 63

    (65) lee -> LEE . LPAREN variable RPAREN SEMICOLON

    LPAREN          shift and go to state 83


state 64

    (54) mult_asigna -> variable . EQUAL n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> variable . EQUAL n_Operador mult_asigna n_asignQuad

    EQUAL           shift and go to state 84


state 65

    (66) escribe -> ESCRIBE . LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
    (67) escribe -> ESCRIBE . LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON

    LPAREN          shift and go to state 85


state 66

    (108) condicion -> SI . LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (109) condicion -> SI . LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad

    LPAREN          shift and go to state 86


state 67

    (113) ciclo_w -> MIENTRAS . n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (114) n_startCicle -> .

    LPAREN          reduce using rule 114 (n_startCicle -> .)

    n_startCicle                   shift and go to state 87

state 68

    (120) retorno -> REGRESA . LPAREN mult_exp n_regresaExp RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 69

    (117) ciclo_f -> DESDE . asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (53) asigna -> . mult_asigna
    (54) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal

    ID              shift and go to state 90

    asigna                         shift and go to state 89
    mult_asigna                    shift and go to state 61
    variable                       shift and go to state 64

state 70

    (36) param -> tipo_simple . param_aux1
    (37) param_aux1 -> . ID save_param
    (38) param_aux1 -> . ID save_param COMMA param

    ID              shift and go to state 92

    param_aux1                     shift and go to state 91

state 71

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param . RPAREN vars bloque n_endof_func
    (28) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param . RPAREN bloque n_endof_func

    RPAREN          shift and go to state 93


state 72

    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN . vars bloque n_endof_func
    (32) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN . bloque n_endof_func
    (8) vars -> . VAR vars_aux
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 9
    LBRACKET        shift and go to state 46

    vars                           shift and go to state 94
    bloque                         shift and go to state 95

state 73

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . param RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . param RPAREN bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . RPAREN vars bloque n_endof_func
    (34) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . RPAREN bloque n_endof_func
    (36) param -> . tipo_simple param_aux1
    (17) tipo_simple -> . INT n_save_type
    (18) tipo_simple -> . FLOAT n_save_type
    (19) tipo_simple -> . CHAR n_save_type

    RPAREN          shift and go to state 97
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    param                          shift and go to state 96
    tipo_simple                    shift and go to state 70

state 74

    (14) vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE .

    COMMA           reduce using rule 14 (vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE .)
    SEMICOLON       reduce using rule 14 (vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE .)


state 75

    (41) bloque -> LBRACKET mult_estatutos RBRACKET .

    $end            reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    FUNCION         reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    PRINCIPAL       reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SINO            reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    ID              reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    LEE             reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    ESCRIBE         reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SI              reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    MIENTRAS        reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    REGRESA         reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    DESDE           reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    RBRACKET        reduce using rule 41 (bloque -> LBRACKET mult_estatutos RBRACKET .)


state 76

    (42) bloque -> LBRACKET empty RBRACKET .

    $end            reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    FUNCION         reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    PRINCIPAL       reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    SINO            reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    ID              reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    LEE             reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    ESCRIBE         reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    SI              reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    MIENTRAS        reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    REGRESA         reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    DESDE           reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)
    RBRACKET        reduce using rule 42 (bloque -> LBRACKET empty RBRACKET .)


state 77

    (44) mult_estatutos -> estatuto mult_estatutos .

    RBRACKET        reduce using rule 44 (mult_estatutos -> estatuto mult_estatutos .)


state 78

    (45) estatuto -> asigna SEMICOLON .

    ID              reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    LEE             reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    ESCRIBE         reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    SI              reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    MIENTRAS        reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    REGRESA         reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    DESDE           reduce using rule 45 (estatuto -> asigna SEMICOLON .)
    RBRACKET        reduce using rule 45 (estatuto -> asigna SEMICOLON .)


state 79

    (46) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    LEE             reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    ESCRIBE         reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    SI              reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    MIENTRAS        reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    REGRESA         reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    DESDE           reduce using rule 46 (estatuto -> llamada SEMICOLON .)
    RBRACKET        reduce using rule 46 (estatuto -> llamada SEMICOLON .)


state 80

    (60) llamada -> ID n_verify_func . LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> ID n_verify_func . LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 98


state 81

    (22) variable -> ID LSQUARE . mult_exp RSQUARE
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 100
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 82

    (23) variable -> ID p_n_getVarVal .

    EQUAL           reduce using rule 23 (variable -> ID p_n_getVarVal .)
    MULT            reduce using rule 23 (variable -> ID p_n_getVarVal .)
    DIV             reduce using rule 23 (variable -> ID p_n_getVarVal .)
    PLUS            reduce using rule 23 (variable -> ID p_n_getVarVal .)
    MINUS           reduce using rule 23 (variable -> ID p_n_getVarVal .)
    LESSTHAN        reduce using rule 23 (variable -> ID p_n_getVarVal .)
    LESSEQUAL       reduce using rule 23 (variable -> ID p_n_getVarVal .)
    GREATERTHAN     reduce using rule 23 (variable -> ID p_n_getVarVal .)
    GREATEREQUAL    reduce using rule 23 (variable -> ID p_n_getVarVal .)
    SAME            reduce using rule 23 (variable -> ID p_n_getVarVal .)
    NOEQUAL         reduce using rule 23 (variable -> ID p_n_getVarVal .)
    AND             reduce using rule 23 (variable -> ID p_n_getVarVal .)
    OR              reduce using rule 23 (variable -> ID p_n_getVarVal .)
    COMMA           reduce using rule 23 (variable -> ID p_n_getVarVal .)
    RSQUARE         reduce using rule 23 (variable -> ID p_n_getVarVal .)
    RPAREN          reduce using rule 23 (variable -> ID p_n_getVarVal .)
    SEMICOLON       reduce using rule 23 (variable -> ID p_n_getVarVal .)
    HASTA           reduce using rule 23 (variable -> ID p_n_getVarVal .)
    HACER           reduce using rule 23 (variable -> ID p_n_getVarVal .)


state 83

    (65) lee -> LEE LPAREN . variable RPAREN SEMICOLON
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal

    ID              shift and go to state 90

    variable                       shift and go to state 113

state 84

    (54) mult_asigna -> variable EQUAL . n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> variable EQUAL . n_Operador mult_asigna n_asignQuad
    (95) n_Operador -> .

    ID              reduce using rule 95 (n_Operador -> .)
    LPAREN          reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 114

state 85

    (66) escribe -> ESCRIBE LPAREN . mult_exp n_escribeExp RPAREN SEMICOLON
    (67) escribe -> ESCRIBE LPAREN . mult_cte_s n_escribeExp RPAREN SEMICOLON
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (69) mult_cte_s -> . CTE_S
    (70) mult_cte_s -> . CTE_S COMMA mult_cte_s
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    CTE_S           shift and go to state 117
    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 115
    mult_cte_s                     shift and go to state 116
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 86

    (108) condicion -> SI LPAREN . mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (109) condicion -> SI LPAREN . mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 118
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 87

    (113) ciclo_w -> MIENTRAS n_startCicle . LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile

    LPAREN          shift and go to state 119


state 88

    (120) retorno -> REGRESA LPAREN . mult_exp n_regresaExp RPAREN SEMICOLON
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 120
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 89

    (117) ciclo_f -> DESDE asigna . n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (114) n_startCicle -> .

    HASTA           reduce using rule 114 (n_startCicle -> .)

    n_startCicle                   shift and go to state 121

state 90

    (22) variable -> ID . LSQUARE mult_exp RSQUARE
    (23) variable -> ID . p_n_getVarVal
    (24) p_n_getVarVal -> .

    LSQUARE         shift and go to state 81
    EQUAL           reduce using rule 24 (p_n_getVarVal -> .)
    RPAREN          reduce using rule 24 (p_n_getVarVal -> .)

    p_n_getVarVal                  shift and go to state 82

state 91

    (36) param -> tipo_simple param_aux1 .

    RPAREN          reduce using rule 36 (param -> tipo_simple param_aux1 .)


state 92

    (37) param_aux1 -> ID . save_param
    (38) param_aux1 -> ID . save_param COMMA param
    (39) save_param -> .

    COMMA           reduce using rule 39 (save_param -> .)
    RPAREN          reduce using rule 39 (save_param -> .)

    save_param                     shift and go to state 122

state 93

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN . vars bloque n_endof_func
    (28) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN . bloque n_endof_func
    (8) vars -> . VAR vars_aux
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 9
    LBRACKET        shift and go to state 46

    vars                           shift and go to state 123
    bloque                         shift and go to state 124

state 94

    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars . bloque n_endof_func
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 125

state 95

    (32) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 126

state 96

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param . RPAREN vars bloque n_endof_func
    (30) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param . RPAREN bloque n_endof_func

    RPAREN          shift and go to state 127


state 97

    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN . vars bloque n_endof_func
    (34) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN . bloque n_endof_func
    (8) vars -> . VAR vars_aux
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 9
    LBRACKET        shift and go to state 46

    vars                           shift and go to state 128
    bloque                         shift and go to state 129

state 98

    (60) llamada -> ID n_verify_func LPAREN . n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> ID n_verify_func LPAREN . n_start_pcounter RPAREN n_last_param_action
    (63) n_start_pcounter -> .

    RPAREN          reduce using rule 63 (n_start_pcounter -> .)
    LPAREN          reduce using rule 63 (n_start_pcounter -> .)
    ID              reduce using rule 63 (n_start_pcounter -> .)
    CTE_I           reduce using rule 63 (n_start_pcounter -> .)
    CTE_F           reduce using rule 63 (n_start_pcounter -> .)
    CTE_C           reduce using rule 63 (n_start_pcounter -> .)

    n_start_pcounter               shift and go to state 130

state 99

    (22) variable -> ID . LSQUARE mult_exp RSQUARE
    (23) variable -> ID . p_n_getVarVal
    (60) llamada -> ID . n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> ID . n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (24) p_n_getVarVal -> .
    (64) n_verify_func -> .

    LSQUARE         shift and go to state 81
    MULT            reduce using rule 24 (p_n_getVarVal -> .)
    DIV             reduce using rule 24 (p_n_getVarVal -> .)
    PLUS            reduce using rule 24 (p_n_getVarVal -> .)
    MINUS           reduce using rule 24 (p_n_getVarVal -> .)
    LESSTHAN        reduce using rule 24 (p_n_getVarVal -> .)
    LESSEQUAL       reduce using rule 24 (p_n_getVarVal -> .)
    GREATERTHAN     reduce using rule 24 (p_n_getVarVal -> .)
    GREATEREQUAL    reduce using rule 24 (p_n_getVarVal -> .)
    SAME            reduce using rule 24 (p_n_getVarVal -> .)
    NOEQUAL         reduce using rule 24 (p_n_getVarVal -> .)
    AND             reduce using rule 24 (p_n_getVarVal -> .)
    OR              reduce using rule 24 (p_n_getVarVal -> .)
    COMMA           reduce using rule 24 (p_n_getVarVal -> .)
    RSQUARE         reduce using rule 24 (p_n_getVarVal -> .)
    RPAREN          reduce using rule 24 (p_n_getVarVal -> .)
    EQUAL           reduce using rule 24 (p_n_getVarVal -> .)
    SEMICOLON       reduce using rule 24 (p_n_getVarVal -> .)
    HASTA           reduce using rule 24 (p_n_getVarVal -> .)
    HACER           reduce using rule 24 (p_n_getVarVal -> .)
    LPAREN          reduce using rule 64 (n_verify_func -> .)

    p_n_getVarVal                  shift and go to state 82
    n_verify_func                  shift and go to state 80

state 100

    (22) variable -> ID LSQUARE mult_exp . RSQUARE

    RSQUARE         shift and go to state 131


state 101

    (71) mult_exp -> exp .
    (72) mult_exp -> exp . COMMA mult_exp

    RSQUARE         reduce using rule 71 (mult_exp -> exp .)
    RPAREN          reduce using rule 71 (mult_exp -> exp .)
    SEMICOLON       reduce using rule 71 (mult_exp -> exp .)
    HASTA           reduce using rule 71 (mult_exp -> exp .)
    HACER           reduce using rule 71 (mult_exp -> exp .)
    COMMA           shift and go to state 132


state 102

    (73) exp -> t_exp . n_orQuad
    (74) exp -> t_exp . n_orQuad OR n_Operador exp
    (75) n_orQuad -> .

    OR              reduce using rule 75 (n_orQuad -> .)
    COMMA           reduce using rule 75 (n_orQuad -> .)
    RSQUARE         reduce using rule 75 (n_orQuad -> .)
    RPAREN          reduce using rule 75 (n_orQuad -> .)
    SEMICOLON       reduce using rule 75 (n_orQuad -> .)
    HASTA           reduce using rule 75 (n_orQuad -> .)
    HACER           reduce using rule 75 (n_orQuad -> .)

    n_orQuad                       shift and go to state 133

state 103

    (76) t_exp -> g_exp . n_andQuad
    (77) t_exp -> g_exp . n_andQuad AND n_Operador t_exp
    (78) n_andQuad -> .

    AND             reduce using rule 78 (n_andQuad -> .)
    OR              reduce using rule 78 (n_andQuad -> .)
    COMMA           reduce using rule 78 (n_andQuad -> .)
    RSQUARE         reduce using rule 78 (n_andQuad -> .)
    RPAREN          reduce using rule 78 (n_andQuad -> .)
    SEMICOLON       reduce using rule 78 (n_andQuad -> .)
    HASTA           reduce using rule 78 (n_andQuad -> .)
    HACER           reduce using rule 78 (n_andQuad -> .)

    n_andQuad                      shift and go to state 134

state 104

    (79) g_exp -> m_exp . n_compareQuad
    (80) g_exp -> m_exp . n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> m_exp . n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> m_exp . n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> m_exp . n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> m_exp . n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> m_exp . n_compareQuad NOEQUAL n_Operador g_exp
    (86) n_compareQuad -> .

    LESSTHAN        reduce using rule 86 (n_compareQuad -> .)
    LESSEQUAL       reduce using rule 86 (n_compareQuad -> .)
    GREATERTHAN     reduce using rule 86 (n_compareQuad -> .)
    GREATEREQUAL    reduce using rule 86 (n_compareQuad -> .)
    SAME            reduce using rule 86 (n_compareQuad -> .)
    NOEQUAL         reduce using rule 86 (n_compareQuad -> .)
    AND             reduce using rule 86 (n_compareQuad -> .)
    OR              reduce using rule 86 (n_compareQuad -> .)
    COMMA           reduce using rule 86 (n_compareQuad -> .)
    RSQUARE         reduce using rule 86 (n_compareQuad -> .)
    RPAREN          reduce using rule 86 (n_compareQuad -> .)
    SEMICOLON       reduce using rule 86 (n_compareQuad -> .)
    HASTA           reduce using rule 86 (n_compareQuad -> .)
    HACER           reduce using rule 86 (n_compareQuad -> .)

    n_compareQuad                  shift and go to state 135

state 105

    (87) m_exp -> t . n_sumQuad
    (88) m_exp -> t . n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> t . n_sumQuad MINUS n_Operador m_exp
    (90) n_sumQuad -> .

    PLUS            reduce using rule 90 (n_sumQuad -> .)
    MINUS           reduce using rule 90 (n_sumQuad -> .)
    LESSTHAN        reduce using rule 90 (n_sumQuad -> .)
    LESSEQUAL       reduce using rule 90 (n_sumQuad -> .)
    GREATERTHAN     reduce using rule 90 (n_sumQuad -> .)
    GREATEREQUAL    reduce using rule 90 (n_sumQuad -> .)
    SAME            reduce using rule 90 (n_sumQuad -> .)
    NOEQUAL         reduce using rule 90 (n_sumQuad -> .)
    AND             reduce using rule 90 (n_sumQuad -> .)
    OR              reduce using rule 90 (n_sumQuad -> .)
    COMMA           reduce using rule 90 (n_sumQuad -> .)
    RSQUARE         reduce using rule 90 (n_sumQuad -> .)
    RPAREN          reduce using rule 90 (n_sumQuad -> .)
    SEMICOLON       reduce using rule 90 (n_sumQuad -> .)
    HASTA           reduce using rule 90 (n_sumQuad -> .)
    HACER           reduce using rule 90 (n_sumQuad -> .)

    n_sumQuad                      shift and go to state 136

state 106

    (91) t -> f . n_multQuad
    (92) t -> f . n_multQuad MULT n_Operador t
    (93) t -> f . n_multQuad DIV n_Operador t
    (94) n_multQuad -> .

    MULT            reduce using rule 94 (n_multQuad -> .)
    DIV             reduce using rule 94 (n_multQuad -> .)
    PLUS            reduce using rule 94 (n_multQuad -> .)
    MINUS           reduce using rule 94 (n_multQuad -> .)
    LESSTHAN        reduce using rule 94 (n_multQuad -> .)
    LESSEQUAL       reduce using rule 94 (n_multQuad -> .)
    GREATERTHAN     reduce using rule 94 (n_multQuad -> .)
    GREATEREQUAL    reduce using rule 94 (n_multQuad -> .)
    SAME            reduce using rule 94 (n_multQuad -> .)
    NOEQUAL         reduce using rule 94 (n_multQuad -> .)
    AND             reduce using rule 94 (n_multQuad -> .)
    OR              reduce using rule 94 (n_multQuad -> .)
    COMMA           reduce using rule 94 (n_multQuad -> .)
    RSQUARE         reduce using rule 94 (n_multQuad -> .)
    RPAREN          reduce using rule 94 (n_multQuad -> .)
    SEMICOLON       reduce using rule 94 (n_multQuad -> .)
    HASTA           reduce using rule 94 (n_multQuad -> .)
    HACER           reduce using rule 94 (n_multQuad -> .)

    n_multQuad                     shift and go to state 137

state 107

    (96) f -> LPAREN . n_start_FF mult_exp RPAREN n_end_FF
    (106) n_start_FF -> .

    LPAREN          reduce using rule 106 (n_start_FF -> .)
    ID              reduce using rule 106 (n_start_FF -> .)
    CTE_I           reduce using rule 106 (n_start_FF -> .)
    CTE_F           reduce using rule 106 (n_start_FF -> .)
    CTE_C           reduce using rule 106 (n_start_FF -> .)

    n_start_FF                     shift and go to state 138

state 108

    (97) f -> n_tempTypeI . CTE_I n_directPrint

    CTE_I           shift and go to state 139


state 109

    (98) f -> n_tempTypeF . CTE_F n_directPrint

    CTE_F           shift and go to state 140


state 110

    (99) f -> n_tempTypeC . CTE_C n_directPrint

    CTE_C           shift and go to state 141


state 111

    (100) f -> variable .

    MULT            reduce using rule 100 (f -> variable .)
    DIV             reduce using rule 100 (f -> variable .)
    PLUS            reduce using rule 100 (f -> variable .)
    MINUS           reduce using rule 100 (f -> variable .)
    LESSTHAN        reduce using rule 100 (f -> variable .)
    LESSEQUAL       reduce using rule 100 (f -> variable .)
    GREATERTHAN     reduce using rule 100 (f -> variable .)
    GREATEREQUAL    reduce using rule 100 (f -> variable .)
    SAME            reduce using rule 100 (f -> variable .)
    NOEQUAL         reduce using rule 100 (f -> variable .)
    AND             reduce using rule 100 (f -> variable .)
    OR              reduce using rule 100 (f -> variable .)
    COMMA           reduce using rule 100 (f -> variable .)
    RSQUARE         reduce using rule 100 (f -> variable .)
    RPAREN          reduce using rule 100 (f -> variable .)
    SEMICOLON       reduce using rule 100 (f -> variable .)
    HASTA           reduce using rule 100 (f -> variable .)
    HACER           reduce using rule 100 (f -> variable .)


state 112

    (101) f -> llamada .

    MULT            reduce using rule 101 (f -> llamada .)
    DIV             reduce using rule 101 (f -> llamada .)
    PLUS            reduce using rule 101 (f -> llamada .)
    MINUS           reduce using rule 101 (f -> llamada .)
    LESSTHAN        reduce using rule 101 (f -> llamada .)
    LESSEQUAL       reduce using rule 101 (f -> llamada .)
    GREATERTHAN     reduce using rule 101 (f -> llamada .)
    GREATEREQUAL    reduce using rule 101 (f -> llamada .)
    SAME            reduce using rule 101 (f -> llamada .)
    NOEQUAL         reduce using rule 101 (f -> llamada .)
    AND             reduce using rule 101 (f -> llamada .)
    OR              reduce using rule 101 (f -> llamada .)
    COMMA           reduce using rule 101 (f -> llamada .)
    RSQUARE         reduce using rule 101 (f -> llamada .)
    RPAREN          reduce using rule 101 (f -> llamada .)
    SEMICOLON       reduce using rule 101 (f -> llamada .)
    HASTA           reduce using rule 101 (f -> llamada .)
    HACER           reduce using rule 101 (f -> llamada .)


state 113

    (65) lee -> LEE LPAREN variable . RPAREN SEMICOLON

    RPAREN          shift and go to state 142


state 114

    (54) mult_asigna -> variable EQUAL n_Operador . mult_exp n_asignQuad
    (55) mult_asigna -> variable EQUAL n_Operador . mult_asigna n_asignQuad
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (54) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    ID              shift and go to state 99
    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)

    variable                       shift and go to state 143
    mult_exp                       shift and go to state 144
    mult_asigna                    shift and go to state 145
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    llamada                        shift and go to state 112

state 115

    (66) escribe -> ESCRIBE LPAREN mult_exp . n_escribeExp RPAREN SEMICOLON
    (68) n_escribeExp -> .

    RPAREN          reduce using rule 68 (n_escribeExp -> .)

    n_escribeExp                   shift and go to state 146

state 116

    (67) escribe -> ESCRIBE LPAREN mult_cte_s . n_escribeExp RPAREN SEMICOLON
    (68) n_escribeExp -> .

    RPAREN          reduce using rule 68 (n_escribeExp -> .)

    n_escribeExp                   shift and go to state 147

state 117

    (69) mult_cte_s -> CTE_S .
    (70) mult_cte_s -> CTE_S . COMMA mult_cte_s

    RPAREN          reduce using rule 69 (mult_cte_s -> CTE_S .)
    COMMA           shift and go to state 148


state 118

    (108) condicion -> SI LPAREN mult_exp . RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (109) condicion -> SI LPAREN mult_exp . RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad

    RPAREN          shift and go to state 149


state 119

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN . mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 150
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 120

    (120) retorno -> REGRESA LPAREN mult_exp . n_regresaExp RPAREN SEMICOLON
    (121) n_regresaExp -> .

    RPAREN          reduce using rule 121 (n_regresaExp -> .)

    n_regresaExp                   shift and go to state 151

state 121

    (117) ciclo_f -> DESDE asigna n_startCicle . HASTA mult_exp n_evalExp_for HACER bloque n_endFor

    HASTA           shift and go to state 152


state 122

    (37) param_aux1 -> ID save_param .
    (38) param_aux1 -> ID save_param . COMMA param

    RPAREN          reduce using rule 37 (param_aux1 -> ID save_param .)
    COMMA           shift and go to state 153


state 123

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars . bloque n_endof_func
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 154

state 124

    (28) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 155

state 125

    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 156

state 126

    (32) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 32 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 32 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func .)


state 127

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN . vars bloque n_endof_func
    (30) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN . bloque n_endof_func
    (8) vars -> . VAR vars_aux
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 9
    LBRACKET        shift and go to state 46

    vars                           shift and go to state 157
    bloque                         shift and go to state 158

state 128

    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars . bloque n_endof_func
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 159

state 129

    (34) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 160

state 130

    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter . param_exp RPAREN n_last_param_action
    (61) llamada -> ID n_verify_func LPAREN n_start_pcounter . RPAREN n_last_param_action
    (57) param_exp -> . exp n_parameter_action
    (58) param_exp -> . exp n_parameter_action COMMA param_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    RPAREN          shift and go to state 162
    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    param_exp                      shift and go to state 161
    exp                            shift and go to state 163
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 131

    (22) variable -> ID LSQUARE mult_exp RSQUARE .

    EQUAL           reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    MULT            reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    DIV             reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    PLUS            reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    MINUS           reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    LESSTHAN        reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    LESSEQUAL       reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    GREATEREQUAL    reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    SAME            reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    NOEQUAL         reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    AND             reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    OR              reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    COMMA           reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    RSQUARE         reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    RPAREN          reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    SEMICOLON       reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    HASTA           reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)
    HACER           reduce using rule 22 (variable -> ID LSQUARE mult_exp RSQUARE .)


state 132

    (72) mult_exp -> exp COMMA . mult_exp
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    exp                            shift and go to state 101
    mult_exp                       shift and go to state 164
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 133

    (73) exp -> t_exp n_orQuad .
    (74) exp -> t_exp n_orQuad . OR n_Operador exp

    COMMA           reduce using rule 73 (exp -> t_exp n_orQuad .)
    RSQUARE         reduce using rule 73 (exp -> t_exp n_orQuad .)
    RPAREN          reduce using rule 73 (exp -> t_exp n_orQuad .)
    SEMICOLON       reduce using rule 73 (exp -> t_exp n_orQuad .)
    HASTA           reduce using rule 73 (exp -> t_exp n_orQuad .)
    HACER           reduce using rule 73 (exp -> t_exp n_orQuad .)
    OR              shift and go to state 165


state 134

    (76) t_exp -> g_exp n_andQuad .
    (77) t_exp -> g_exp n_andQuad . AND n_Operador t_exp

    OR              reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    COMMA           reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    RSQUARE         reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    RPAREN          reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    SEMICOLON       reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    HASTA           reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    HACER           reduce using rule 76 (t_exp -> g_exp n_andQuad .)
    AND             shift and go to state 166


state 135

    (79) g_exp -> m_exp n_compareQuad .
    (80) g_exp -> m_exp n_compareQuad . LESSTHAN n_Operador g_exp
    (81) g_exp -> m_exp n_compareQuad . LESSEQUAL n_Operador g_exp
    (82) g_exp -> m_exp n_compareQuad . GREATERTHAN n_Operador g_exp
    (83) g_exp -> m_exp n_compareQuad . GREATEREQUAL n_Operador g_exp
    (84) g_exp -> m_exp n_compareQuad . SAME n_Operador g_exp
    (85) g_exp -> m_exp n_compareQuad . NOEQUAL n_Operador g_exp

    AND             reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    OR              reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    COMMA           reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    RSQUARE         reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    RPAREN          reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    SEMICOLON       reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    HASTA           reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    HACER           reduce using rule 79 (g_exp -> m_exp n_compareQuad .)
    LESSTHAN        shift and go to state 167
    LESSEQUAL       shift and go to state 168
    GREATERTHAN     shift and go to state 169
    GREATEREQUAL    shift and go to state 170
    SAME            shift and go to state 171
    NOEQUAL         shift and go to state 172


state 136

    (87) m_exp -> t n_sumQuad .
    (88) m_exp -> t n_sumQuad . PLUS n_Operador m_exp
    (89) m_exp -> t n_sumQuad . MINUS n_Operador m_exp

    LESSTHAN        reduce using rule 87 (m_exp -> t n_sumQuad .)
    LESSEQUAL       reduce using rule 87 (m_exp -> t n_sumQuad .)
    GREATERTHAN     reduce using rule 87 (m_exp -> t n_sumQuad .)
    GREATEREQUAL    reduce using rule 87 (m_exp -> t n_sumQuad .)
    SAME            reduce using rule 87 (m_exp -> t n_sumQuad .)
    NOEQUAL         reduce using rule 87 (m_exp -> t n_sumQuad .)
    AND             reduce using rule 87 (m_exp -> t n_sumQuad .)
    OR              reduce using rule 87 (m_exp -> t n_sumQuad .)
    COMMA           reduce using rule 87 (m_exp -> t n_sumQuad .)
    RSQUARE         reduce using rule 87 (m_exp -> t n_sumQuad .)
    RPAREN          reduce using rule 87 (m_exp -> t n_sumQuad .)
    SEMICOLON       reduce using rule 87 (m_exp -> t n_sumQuad .)
    HASTA           reduce using rule 87 (m_exp -> t n_sumQuad .)
    HACER           reduce using rule 87 (m_exp -> t n_sumQuad .)
    PLUS            shift and go to state 173
    MINUS           shift and go to state 174


state 137

    (91) t -> f n_multQuad .
    (92) t -> f n_multQuad . MULT n_Operador t
    (93) t -> f n_multQuad . DIV n_Operador t

    PLUS            reduce using rule 91 (t -> f n_multQuad .)
    MINUS           reduce using rule 91 (t -> f n_multQuad .)
    LESSTHAN        reduce using rule 91 (t -> f n_multQuad .)
    LESSEQUAL       reduce using rule 91 (t -> f n_multQuad .)
    GREATERTHAN     reduce using rule 91 (t -> f n_multQuad .)
    GREATEREQUAL    reduce using rule 91 (t -> f n_multQuad .)
    SAME            reduce using rule 91 (t -> f n_multQuad .)
    NOEQUAL         reduce using rule 91 (t -> f n_multQuad .)
    AND             reduce using rule 91 (t -> f n_multQuad .)
    OR              reduce using rule 91 (t -> f n_multQuad .)
    COMMA           reduce using rule 91 (t -> f n_multQuad .)
    RSQUARE         reduce using rule 91 (t -> f n_multQuad .)
    RPAREN          reduce using rule 91 (t -> f n_multQuad .)
    SEMICOLON       reduce using rule 91 (t -> f n_multQuad .)
    HASTA           reduce using rule 91 (t -> f n_multQuad .)
    HACER           reduce using rule 91 (t -> f n_multQuad .)
    MULT            shift and go to state 175
    DIV             shift and go to state 176


state 138

    (96) f -> LPAREN n_start_FF . mult_exp RPAREN n_end_FF
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 177
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 139

    (97) f -> n_tempTypeI CTE_I . n_directPrint
    (105) n_directPrint -> .

    MULT            reduce using rule 105 (n_directPrint -> .)
    DIV             reduce using rule 105 (n_directPrint -> .)
    PLUS            reduce using rule 105 (n_directPrint -> .)
    MINUS           reduce using rule 105 (n_directPrint -> .)
    LESSTHAN        reduce using rule 105 (n_directPrint -> .)
    LESSEQUAL       reduce using rule 105 (n_directPrint -> .)
    GREATERTHAN     reduce using rule 105 (n_directPrint -> .)
    GREATEREQUAL    reduce using rule 105 (n_directPrint -> .)
    SAME            reduce using rule 105 (n_directPrint -> .)
    NOEQUAL         reduce using rule 105 (n_directPrint -> .)
    AND             reduce using rule 105 (n_directPrint -> .)
    OR              reduce using rule 105 (n_directPrint -> .)
    COMMA           reduce using rule 105 (n_directPrint -> .)
    RSQUARE         reduce using rule 105 (n_directPrint -> .)
    RPAREN          reduce using rule 105 (n_directPrint -> .)
    SEMICOLON       reduce using rule 105 (n_directPrint -> .)
    HASTA           reduce using rule 105 (n_directPrint -> .)
    HACER           reduce using rule 105 (n_directPrint -> .)

    n_directPrint                  shift and go to state 178

state 140

    (98) f -> n_tempTypeF CTE_F . n_directPrint
    (105) n_directPrint -> .

    MULT            reduce using rule 105 (n_directPrint -> .)
    DIV             reduce using rule 105 (n_directPrint -> .)
    PLUS            reduce using rule 105 (n_directPrint -> .)
    MINUS           reduce using rule 105 (n_directPrint -> .)
    LESSTHAN        reduce using rule 105 (n_directPrint -> .)
    LESSEQUAL       reduce using rule 105 (n_directPrint -> .)
    GREATERTHAN     reduce using rule 105 (n_directPrint -> .)
    GREATEREQUAL    reduce using rule 105 (n_directPrint -> .)
    SAME            reduce using rule 105 (n_directPrint -> .)
    NOEQUAL         reduce using rule 105 (n_directPrint -> .)
    AND             reduce using rule 105 (n_directPrint -> .)
    OR              reduce using rule 105 (n_directPrint -> .)
    COMMA           reduce using rule 105 (n_directPrint -> .)
    RSQUARE         reduce using rule 105 (n_directPrint -> .)
    RPAREN          reduce using rule 105 (n_directPrint -> .)
    SEMICOLON       reduce using rule 105 (n_directPrint -> .)
    HASTA           reduce using rule 105 (n_directPrint -> .)
    HACER           reduce using rule 105 (n_directPrint -> .)

    n_directPrint                  shift and go to state 179

state 141

    (99) f -> n_tempTypeC CTE_C . n_directPrint
    (105) n_directPrint -> .

    MULT            reduce using rule 105 (n_directPrint -> .)
    DIV             reduce using rule 105 (n_directPrint -> .)
    PLUS            reduce using rule 105 (n_directPrint -> .)
    MINUS           reduce using rule 105 (n_directPrint -> .)
    LESSTHAN        reduce using rule 105 (n_directPrint -> .)
    LESSEQUAL       reduce using rule 105 (n_directPrint -> .)
    GREATERTHAN     reduce using rule 105 (n_directPrint -> .)
    GREATEREQUAL    reduce using rule 105 (n_directPrint -> .)
    SAME            reduce using rule 105 (n_directPrint -> .)
    NOEQUAL         reduce using rule 105 (n_directPrint -> .)
    AND             reduce using rule 105 (n_directPrint -> .)
    OR              reduce using rule 105 (n_directPrint -> .)
    COMMA           reduce using rule 105 (n_directPrint -> .)
    RSQUARE         reduce using rule 105 (n_directPrint -> .)
    RPAREN          reduce using rule 105 (n_directPrint -> .)
    SEMICOLON       reduce using rule 105 (n_directPrint -> .)
    HASTA           reduce using rule 105 (n_directPrint -> .)
    HACER           reduce using rule 105 (n_directPrint -> .)

    n_directPrint                  shift and go to state 180

state 142

    (65) lee -> LEE LPAREN variable RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 181


state 143

    (54) mult_asigna -> variable . EQUAL n_Operador mult_exp n_asignQuad
    (55) mult_asigna -> variable . EQUAL n_Operador mult_asigna n_asignQuad
    (100) f -> variable .

    EQUAL           shift and go to state 84
    MULT            reduce using rule 100 (f -> variable .)
    DIV             reduce using rule 100 (f -> variable .)
    PLUS            reduce using rule 100 (f -> variable .)
    MINUS           reduce using rule 100 (f -> variable .)
    LESSTHAN        reduce using rule 100 (f -> variable .)
    LESSEQUAL       reduce using rule 100 (f -> variable .)
    GREATERTHAN     reduce using rule 100 (f -> variable .)
    GREATEREQUAL    reduce using rule 100 (f -> variable .)
    SAME            reduce using rule 100 (f -> variable .)
    NOEQUAL         reduce using rule 100 (f -> variable .)
    AND             reduce using rule 100 (f -> variable .)
    OR              reduce using rule 100 (f -> variable .)
    COMMA           reduce using rule 100 (f -> variable .)
    SEMICOLON       reduce using rule 100 (f -> variable .)
    HASTA           reduce using rule 100 (f -> variable .)


state 144

    (54) mult_asigna -> variable EQUAL n_Operador mult_exp . n_asignQuad
    (56) n_asignQuad -> .

    SEMICOLON       reduce using rule 56 (n_asignQuad -> .)
    HASTA           reduce using rule 56 (n_asignQuad -> .)

    n_asignQuad                    shift and go to state 182

state 145

    (55) mult_asigna -> variable EQUAL n_Operador mult_asigna . n_asignQuad
    (56) n_asignQuad -> .

    SEMICOLON       reduce using rule 56 (n_asignQuad -> .)
    HASTA           reduce using rule 56 (n_asignQuad -> .)

    n_asignQuad                    shift and go to state 183

state 146

    (66) escribe -> ESCRIBE LPAREN mult_exp n_escribeExp . RPAREN SEMICOLON

    RPAREN          shift and go to state 184


state 147

    (67) escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp . RPAREN SEMICOLON

    RPAREN          shift and go to state 185


state 148

    (70) mult_cte_s -> CTE_S COMMA . mult_cte_s
    (69) mult_cte_s -> . CTE_S
    (70) mult_cte_s -> . CTE_S COMMA mult_cte_s

    CTE_S           shift and go to state 117

    mult_cte_s                     shift and go to state 186

state 149

    (108) condicion -> SI LPAREN mult_exp RPAREN . n_ifQuad ENTONCES bloque n_endIfQuad
    (109) condicion -> SI LPAREN mult_exp RPAREN . n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (110) n_ifQuad -> .

    ENTONCES        reduce using rule 110 (n_ifQuad -> .)

    n_ifQuad                       shift and go to state 187

state 150

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp . RPAREN n_evalExp HAZ bloque n_endWhile

    RPAREN          shift and go to state 188


state 151

    (120) retorno -> REGRESA LPAREN mult_exp n_regresaExp . RPAREN SEMICOLON

    RPAREN          shift and go to state 189


state 152

    (117) ciclo_f -> DESDE asigna n_startCicle HASTA . mult_exp n_evalExp_for HACER bloque n_endFor
    (71) mult_exp -> . exp
    (72) mult_exp -> . exp COMMA mult_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    mult_exp                       shift and go to state 190
    exp                            shift and go to state 101
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 153

    (38) param_aux1 -> ID save_param COMMA . param
    (36) param -> . tipo_simple param_aux1
    (17) tipo_simple -> . INT n_save_type
    (18) tipo_simple -> . FLOAT n_save_type
    (19) tipo_simple -> . CHAR n_save_type

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    param                          shift and go to state 191
    tipo_simple                    shift and go to state 70

state 154

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 192

state 155

    (28) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 28 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 28 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func .)


state 156

    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 31 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 31 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)


state 157

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars . bloque n_endof_func
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 193

state 158

    (30) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 194

state 159

    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 195

state 160

    (34) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 34 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 34 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func .)


state 161

    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp . RPAREN n_last_param_action

    RPAREN          shift and go to state 196


state 162

    (61) llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN . n_last_param_action
    (62) n_last_param_action -> .

    SEMICOLON       reduce using rule 62 (n_last_param_action -> .)
    MULT            reduce using rule 62 (n_last_param_action -> .)
    DIV             reduce using rule 62 (n_last_param_action -> .)
    PLUS            reduce using rule 62 (n_last_param_action -> .)
    MINUS           reduce using rule 62 (n_last_param_action -> .)
    LESSTHAN        reduce using rule 62 (n_last_param_action -> .)
    LESSEQUAL       reduce using rule 62 (n_last_param_action -> .)
    GREATERTHAN     reduce using rule 62 (n_last_param_action -> .)
    GREATEREQUAL    reduce using rule 62 (n_last_param_action -> .)
    SAME            reduce using rule 62 (n_last_param_action -> .)
    NOEQUAL         reduce using rule 62 (n_last_param_action -> .)
    AND             reduce using rule 62 (n_last_param_action -> .)
    OR              reduce using rule 62 (n_last_param_action -> .)
    COMMA           reduce using rule 62 (n_last_param_action -> .)
    RSQUARE         reduce using rule 62 (n_last_param_action -> .)
    RPAREN          reduce using rule 62 (n_last_param_action -> .)
    HASTA           reduce using rule 62 (n_last_param_action -> .)
    HACER           reduce using rule 62 (n_last_param_action -> .)

    n_last_param_action            shift and go to state 197

state 163

    (57) param_exp -> exp . n_parameter_action
    (58) param_exp -> exp . n_parameter_action COMMA param_exp
    (59) n_parameter_action -> .

    COMMA           reduce using rule 59 (n_parameter_action -> .)
    RPAREN          reduce using rule 59 (n_parameter_action -> .)

    n_parameter_action             shift and go to state 198

state 164

    (72) mult_exp -> exp COMMA mult_exp .

    RSQUARE         reduce using rule 72 (mult_exp -> exp COMMA mult_exp .)
    RPAREN          reduce using rule 72 (mult_exp -> exp COMMA mult_exp .)
    SEMICOLON       reduce using rule 72 (mult_exp -> exp COMMA mult_exp .)
    HASTA           reduce using rule 72 (mult_exp -> exp COMMA mult_exp .)
    HACER           reduce using rule 72 (mult_exp -> exp COMMA mult_exp .)


state 165

    (74) exp -> t_exp n_orQuad OR . n_Operador exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 199

state 166

    (77) t_exp -> g_exp n_andQuad AND . n_Operador t_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 200

state 167

    (80) g_exp -> m_exp n_compareQuad LESSTHAN . n_Operador g_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 201

state 168

    (81) g_exp -> m_exp n_compareQuad LESSEQUAL . n_Operador g_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 202

state 169

    (82) g_exp -> m_exp n_compareQuad GREATERTHAN . n_Operador g_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 203

state 170

    (83) g_exp -> m_exp n_compareQuad GREATEREQUAL . n_Operador g_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 204

state 171

    (84) g_exp -> m_exp n_compareQuad SAME . n_Operador g_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 205

state 172

    (85) g_exp -> m_exp n_compareQuad NOEQUAL . n_Operador g_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 206

state 173

    (88) m_exp -> t n_sumQuad PLUS . n_Operador m_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 207

state 174

    (89) m_exp -> t n_sumQuad MINUS . n_Operador m_exp
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 208

state 175

    (92) t -> f n_multQuad MULT . n_Operador t
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 209

state 176

    (93) t -> f n_multQuad DIV . n_Operador t
    (95) n_Operador -> .

    LPAREN          reduce using rule 95 (n_Operador -> .)
    ID              reduce using rule 95 (n_Operador -> .)
    CTE_I           reduce using rule 95 (n_Operador -> .)
    CTE_F           reduce using rule 95 (n_Operador -> .)
    CTE_C           reduce using rule 95 (n_Operador -> .)

    n_Operador                     shift and go to state 210

state 177

    (96) f -> LPAREN n_start_FF mult_exp . RPAREN n_end_FF

    RPAREN          shift and go to state 211


state 178

    (97) f -> n_tempTypeI CTE_I n_directPrint .

    MULT            reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    DIV             reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    PLUS            reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    MINUS           reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    LESSTHAN        reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    LESSEQUAL       reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    GREATERTHAN     reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    GREATEREQUAL    reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    SAME            reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    NOEQUAL         reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    AND             reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    OR              reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    COMMA           reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    RSQUARE         reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    RPAREN          reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    SEMICOLON       reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    HASTA           reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)
    HACER           reduce using rule 97 (f -> n_tempTypeI CTE_I n_directPrint .)


state 179

    (98) f -> n_tempTypeF CTE_F n_directPrint .

    MULT            reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    DIV             reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    PLUS            reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    MINUS           reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    LESSTHAN        reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    LESSEQUAL       reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    GREATERTHAN     reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    GREATEREQUAL    reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    SAME            reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    NOEQUAL         reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    AND             reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    OR              reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    COMMA           reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    RSQUARE         reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    RPAREN          reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    SEMICOLON       reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    HASTA           reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)
    HACER           reduce using rule 98 (f -> n_tempTypeF CTE_F n_directPrint .)


state 180

    (99) f -> n_tempTypeC CTE_C n_directPrint .

    MULT            reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    DIV             reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    PLUS            reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    MINUS           reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    LESSTHAN        reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    LESSEQUAL       reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    GREATERTHAN     reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    GREATEREQUAL    reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    SAME            reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    NOEQUAL         reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    AND             reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    OR              reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    COMMA           reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    RSQUARE         reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    RPAREN          reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    SEMICOLON       reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    HASTA           reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)
    HACER           reduce using rule 99 (f -> n_tempTypeC CTE_C n_directPrint .)


state 181

    (65) lee -> LEE LPAREN variable RPAREN SEMICOLON .

    ID              reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    LEE             reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    SI              reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    REGRESA         reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    DESDE           reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 65 (lee -> LEE LPAREN variable RPAREN SEMICOLON .)


state 182

    (54) mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad .

    SEMICOLON       reduce using rule 54 (mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad .)
    HASTA           reduce using rule 54 (mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad .)


state 183

    (55) mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad .

    SEMICOLON       reduce using rule 55 (mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad .)
    HASTA           reduce using rule 55 (mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad .)


state 184

    (66) escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 212


state 185

    (67) escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 186

    (70) mult_cte_s -> CTE_S COMMA mult_cte_s .

    RPAREN          reduce using rule 70 (mult_cte_s -> CTE_S COMMA mult_cte_s .)


state 187

    (108) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad . ENTONCES bloque n_endIfQuad
    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad . ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad

    ENTONCES        shift and go to state 214


state 188

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN . n_evalExp HAZ bloque n_endWhile
    (115) n_evalExp -> .

    HAZ             reduce using rule 115 (n_evalExp -> .)

    n_evalExp                      shift and go to state 215

state 189

    (120) retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 216


state 190

    (117) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp . n_evalExp_for HACER bloque n_endFor
    (118) n_evalExp_for -> .

    HACER           reduce using rule 118 (n_evalExp_for -> .)

    n_evalExp_for                  shift and go to state 217

state 191

    (38) param_aux1 -> ID save_param COMMA param .

    RPAREN          reduce using rule 38 (param_aux1 -> ID save_param COMMA param .)


state 192

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 27 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 27 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)


state 193

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque . n_endof_func
    (40) n_endof_func -> .

    FUNCION         reduce using rule 40 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 40 (n_endof_func -> .)

    n_endof_func                   shift and go to state 218

state 194

    (30) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 30 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 30 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func .)


state 195

    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 33 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 33 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)


state 196

    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN . n_last_param_action
    (62) n_last_param_action -> .

    SEMICOLON       reduce using rule 62 (n_last_param_action -> .)
    MULT            reduce using rule 62 (n_last_param_action -> .)
    DIV             reduce using rule 62 (n_last_param_action -> .)
    PLUS            reduce using rule 62 (n_last_param_action -> .)
    MINUS           reduce using rule 62 (n_last_param_action -> .)
    LESSTHAN        reduce using rule 62 (n_last_param_action -> .)
    LESSEQUAL       reduce using rule 62 (n_last_param_action -> .)
    GREATERTHAN     reduce using rule 62 (n_last_param_action -> .)
    GREATEREQUAL    reduce using rule 62 (n_last_param_action -> .)
    SAME            reduce using rule 62 (n_last_param_action -> .)
    NOEQUAL         reduce using rule 62 (n_last_param_action -> .)
    AND             reduce using rule 62 (n_last_param_action -> .)
    OR              reduce using rule 62 (n_last_param_action -> .)
    COMMA           reduce using rule 62 (n_last_param_action -> .)
    RSQUARE         reduce using rule 62 (n_last_param_action -> .)
    RPAREN          reduce using rule 62 (n_last_param_action -> .)
    HASTA           reduce using rule 62 (n_last_param_action -> .)
    HACER           reduce using rule 62 (n_last_param_action -> .)

    n_last_param_action            shift and go to state 219

state 197

    (61) llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .

    SEMICOLON       reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    MULT            reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    DIV             reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    PLUS            reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    MINUS           reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    LESSTHAN        reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    LESSEQUAL       reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    GREATERTHAN     reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    GREATEREQUAL    reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    SAME            reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    NOEQUAL         reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    AND             reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    OR              reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    COMMA           reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    RSQUARE         reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    RPAREN          reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    HASTA           reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    HACER           reduce using rule 61 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)


state 198

    (57) param_exp -> exp n_parameter_action .
    (58) param_exp -> exp n_parameter_action . COMMA param_exp

    RPAREN          reduce using rule 57 (param_exp -> exp n_parameter_action .)
    COMMA           shift and go to state 220


state 199

    (74) exp -> t_exp n_orQuad OR n_Operador . exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    t_exp                          shift and go to state 102
    exp                            shift and go to state 221
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 200

    (77) t_exp -> g_exp n_andQuad AND n_Operador . t_exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    g_exp                          shift and go to state 103
    t_exp                          shift and go to state 222
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 201

    (80) g_exp -> m_exp n_compareQuad LESSTHAN n_Operador . g_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    m_exp                          shift and go to state 104
    g_exp                          shift and go to state 223
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 202

    (81) g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador . g_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    m_exp                          shift and go to state 104
    g_exp                          shift and go to state 224
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 203

    (82) g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador . g_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    m_exp                          shift and go to state 104
    g_exp                          shift and go to state 225
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 204

    (83) g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador . g_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    m_exp                          shift and go to state 104
    g_exp                          shift and go to state 226
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 205

    (84) g_exp -> m_exp n_compareQuad SAME n_Operador . g_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    m_exp                          shift and go to state 104
    g_exp                          shift and go to state 227
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 206

    (85) g_exp -> m_exp n_compareQuad NOEQUAL n_Operador . g_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    m_exp                          shift and go to state 104
    g_exp                          shift and go to state 228
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 207

    (88) m_exp -> t n_sumQuad PLUS n_Operador . m_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    t                              shift and go to state 105
    m_exp                          shift and go to state 229
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 208

    (89) m_exp -> t n_sumQuad MINUS n_Operador . m_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    t                              shift and go to state 105
    m_exp                          shift and go to state 230
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 209

    (92) t -> f n_multQuad MULT n_Operador . t
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    f                              shift and go to state 106
    t                              shift and go to state 231
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 210

    (93) t -> f n_multQuad DIV n_Operador . t
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    f                              shift and go to state 106
    t                              shift and go to state 232
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 211

    (96) f -> LPAREN n_start_FF mult_exp RPAREN . n_end_FF
    (107) n_end_FF -> .

    MULT            reduce using rule 107 (n_end_FF -> .)
    DIV             reduce using rule 107 (n_end_FF -> .)
    PLUS            reduce using rule 107 (n_end_FF -> .)
    MINUS           reduce using rule 107 (n_end_FF -> .)
    LESSTHAN        reduce using rule 107 (n_end_FF -> .)
    LESSEQUAL       reduce using rule 107 (n_end_FF -> .)
    GREATERTHAN     reduce using rule 107 (n_end_FF -> .)
    GREATEREQUAL    reduce using rule 107 (n_end_FF -> .)
    SAME            reduce using rule 107 (n_end_FF -> .)
    NOEQUAL         reduce using rule 107 (n_end_FF -> .)
    AND             reduce using rule 107 (n_end_FF -> .)
    OR              reduce using rule 107 (n_end_FF -> .)
    COMMA           reduce using rule 107 (n_end_FF -> .)
    RSQUARE         reduce using rule 107 (n_end_FF -> .)
    RPAREN          reduce using rule 107 (n_end_FF -> .)
    SEMICOLON       reduce using rule 107 (n_end_FF -> .)
    HASTA           reduce using rule 107 (n_end_FF -> .)
    HACER           reduce using rule 107 (n_end_FF -> .)

    n_end_FF                       shift and go to state 233

state 212

    (66) escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .

    ID              reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    LEE             reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    SI              reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    DESDE           reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)


state 213

    (67) escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .

    ID              reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    LEE             reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    SI              reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    DESDE           reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 67 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)


state 214

    (108) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES . bloque n_endIfQuad
    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES . bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 234

state 215

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp . HAZ bloque n_endWhile

    HAZ             shift and go to state 235


state 216

    (120) retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .

    ID              reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    LEE             reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    SI              reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    DESDE           reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 120 (retorno -> REGRESA LPAREN mult_exp n_regresaExp RPAREN SEMICOLON .)


state 217

    (117) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for . HACER bloque n_endFor

    HACER           shift and go to state 236


state 218

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 29 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 29 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)


state 219

    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .

    SEMICOLON       reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    MULT            reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    DIV             reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    PLUS            reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    MINUS           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    LESSTHAN        reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    LESSEQUAL       reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    GREATERTHAN     reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    GREATEREQUAL    reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    SAME            reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    NOEQUAL         reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    AND             reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    OR              reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    COMMA           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    RSQUARE         reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    RPAREN          reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    HASTA           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    HACER           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)


state 220

    (58) param_exp -> exp n_parameter_action COMMA . param_exp
    (57) param_exp -> . exp n_parameter_action
    (58) param_exp -> . exp n_parameter_action COMMA param_exp
    (73) exp -> . t_exp n_orQuad
    (74) exp -> . t_exp n_orQuad OR n_Operador exp
    (76) t_exp -> . g_exp n_andQuad
    (77) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (79) g_exp -> . m_exp n_compareQuad
    (80) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (85) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (87) m_exp -> . t n_sumQuad
    (88) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (89) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (91) t -> . f n_multQuad
    (92) t -> . f n_multQuad MULT n_Operador t
    (93) t -> . f n_multQuad DIV n_Operador t
    (96) f -> . LPAREN n_start_FF mult_exp RPAREN n_end_FF
    (97) f -> . n_tempTypeI CTE_I n_directPrint
    (98) f -> . n_tempTypeF CTE_F n_directPrint
    (99) f -> . n_tempTypeC CTE_C n_directPrint
    (100) f -> . variable
    (101) f -> . llamada
    (102) n_tempTypeI -> .
    (103) n_tempTypeF -> .
    (104) n_tempTypeC -> .
    (22) variable -> . ID LSQUARE mult_exp RSQUARE
    (23) variable -> . ID p_n_getVarVal
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (61) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 107
    CTE_I           reduce using rule 102 (n_tempTypeI -> .)
    CTE_F           reduce using rule 103 (n_tempTypeF -> .)
    CTE_C           reduce using rule 104 (n_tempTypeC -> .)
    ID              shift and go to state 99

    exp                            shift and go to state 163
    param_exp                      shift and go to state 237
    t_exp                          shift and go to state 102
    g_exp                          shift and go to state 103
    m_exp                          shift and go to state 104
    t                              shift and go to state 105
    f                              shift and go to state 106
    n_tempTypeI                    shift and go to state 108
    n_tempTypeF                    shift and go to state 109
    n_tempTypeC                    shift and go to state 110
    variable                       shift and go to state 111
    llamada                        shift and go to state 112

state 221

    (74) exp -> t_exp n_orQuad OR n_Operador exp .

    COMMA           reduce using rule 74 (exp -> t_exp n_orQuad OR n_Operador exp .)
    RSQUARE         reduce using rule 74 (exp -> t_exp n_orQuad OR n_Operador exp .)
    RPAREN          reduce using rule 74 (exp -> t_exp n_orQuad OR n_Operador exp .)
    SEMICOLON       reduce using rule 74 (exp -> t_exp n_orQuad OR n_Operador exp .)
    HASTA           reduce using rule 74 (exp -> t_exp n_orQuad OR n_Operador exp .)
    HACER           reduce using rule 74 (exp -> t_exp n_orQuad OR n_Operador exp .)


state 222

    (77) t_exp -> g_exp n_andQuad AND n_Operador t_exp .

    OR              reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    COMMA           reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    RSQUARE         reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    RPAREN          reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    SEMICOLON       reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    HASTA           reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    HACER           reduce using rule 77 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)


state 223

    (80) g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .

    AND             reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    OR              reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    COMMA           reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    RSQUARE         reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    RPAREN          reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    SEMICOLON       reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    HASTA           reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    HACER           reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)


state 224

    (81) g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .

    AND             reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    OR              reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    COMMA           reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    RSQUARE         reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    RPAREN          reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    SEMICOLON       reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    HASTA           reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    HACER           reduce using rule 81 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)


state 225

    (82) g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .

    AND             reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    OR              reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    COMMA           reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    RSQUARE         reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    RPAREN          reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    SEMICOLON       reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    HASTA           reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    HACER           reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)


state 226

    (83) g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .

    AND             reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    OR              reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    COMMA           reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    RSQUARE         reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    RPAREN          reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    SEMICOLON       reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    HASTA           reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    HACER           reduce using rule 83 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)


state 227

    (84) g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .

    AND             reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    OR              reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    COMMA           reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    RSQUARE         reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    RPAREN          reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    SEMICOLON       reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    HASTA           reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    HACER           reduce using rule 84 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)


state 228

    (85) g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .

    AND             reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    OR              reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    COMMA           reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    RSQUARE         reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    RPAREN          reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    SEMICOLON       reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    HASTA           reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    HACER           reduce using rule 85 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)


state 229

    (88) m_exp -> t n_sumQuad PLUS n_Operador m_exp .

    LESSTHAN        reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    LESSEQUAL       reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    GREATERTHAN     reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    GREATEREQUAL    reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    SAME            reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    NOEQUAL         reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    AND             reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    OR              reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    COMMA           reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    RSQUARE         reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    RPAREN          reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    SEMICOLON       reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    HASTA           reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    HACER           reduce using rule 88 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)


state 230

    (89) m_exp -> t n_sumQuad MINUS n_Operador m_exp .

    LESSTHAN        reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    LESSEQUAL       reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    GREATERTHAN     reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    GREATEREQUAL    reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    SAME            reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    NOEQUAL         reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    AND             reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    OR              reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    COMMA           reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    RSQUARE         reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    RPAREN          reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    SEMICOLON       reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    HASTA           reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    HACER           reduce using rule 89 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)


state 231

    (92) t -> f n_multQuad MULT n_Operador t .

    PLUS            reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    MINUS           reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    LESSTHAN        reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    LESSEQUAL       reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    GREATERTHAN     reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    GREATEREQUAL    reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    SAME            reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    NOEQUAL         reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    AND             reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    OR              reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    COMMA           reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    RSQUARE         reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    RPAREN          reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    SEMICOLON       reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    HASTA           reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)
    HACER           reduce using rule 92 (t -> f n_multQuad MULT n_Operador t .)


state 232

    (93) t -> f n_multQuad DIV n_Operador t .

    PLUS            reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    MINUS           reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    LESSTHAN        reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    LESSEQUAL       reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    GREATERTHAN     reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    GREATEREQUAL    reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    SAME            reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    NOEQUAL         reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    AND             reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    OR              reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    COMMA           reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    RSQUARE         reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    RPAREN          reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    SEMICOLON       reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    HASTA           reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)
    HACER           reduce using rule 93 (t -> f n_multQuad DIV n_Operador t .)


state 233

    (96) f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .

    MULT            reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    DIV             reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    PLUS            reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    MINUS           reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    LESSTHAN        reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    LESSEQUAL       reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    GREATERTHAN     reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    GREATEREQUAL    reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    SAME            reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    NOEQUAL         reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    AND             reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    OR              reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    COMMA           reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    RSQUARE         reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    RPAREN          reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    SEMICOLON       reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    HASTA           reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)
    HACER           reduce using rule 96 (f -> LPAREN n_start_FF mult_exp RPAREN n_end_FF .)


state 234

    (108) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque . n_endIfQuad
    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque . SINO p_n_sinoQuad bloque n_endIfQuad
    (111) n_endIfQuad -> .

    SINO            shift and go to state 239
    ID              reduce using rule 111 (n_endIfQuad -> .)
    LEE             reduce using rule 111 (n_endIfQuad -> .)
    ESCRIBE         reduce using rule 111 (n_endIfQuad -> .)
    SI              reduce using rule 111 (n_endIfQuad -> .)
    MIENTRAS        reduce using rule 111 (n_endIfQuad -> .)
    REGRESA         reduce using rule 111 (n_endIfQuad -> .)
    DESDE           reduce using rule 111 (n_endIfQuad -> .)
    RBRACKET        reduce using rule 111 (n_endIfQuad -> .)

    n_endIfQuad                    shift and go to state 238

state 235

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ . bloque n_endWhile
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 240

state 236

    (117) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER . bloque n_endFor
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 241

state 237

    (58) param_exp -> exp n_parameter_action COMMA param_exp .

    RPAREN          reduce using rule 58 (param_exp -> exp n_parameter_action COMMA param_exp .)


state 238

    (108) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .

    ID              reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    LEE             reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    ESCRIBE         reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    SI              reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    MIENTRAS        reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    REGRESA         reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    DESDE           reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    RBRACKET        reduce using rule 108 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)


state 239

    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO . p_n_sinoQuad bloque n_endIfQuad
    (112) p_n_sinoQuad -> .

    LBRACKET        reduce using rule 112 (p_n_sinoQuad -> .)

    p_n_sinoQuad                   shift and go to state 242

state 240

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque . n_endWhile
    (116) n_endWhile -> .

    ID              reduce using rule 116 (n_endWhile -> .)
    LEE             reduce using rule 116 (n_endWhile -> .)
    ESCRIBE         reduce using rule 116 (n_endWhile -> .)
    SI              reduce using rule 116 (n_endWhile -> .)
    MIENTRAS        reduce using rule 116 (n_endWhile -> .)
    REGRESA         reduce using rule 116 (n_endWhile -> .)
    DESDE           reduce using rule 116 (n_endWhile -> .)
    RBRACKET        reduce using rule 116 (n_endWhile -> .)

    n_endWhile                     shift and go to state 243

state 241

    (117) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque . n_endFor
    (119) n_endFor -> .

    ID              reduce using rule 119 (n_endFor -> .)
    LEE             reduce using rule 119 (n_endFor -> .)
    ESCRIBE         reduce using rule 119 (n_endFor -> .)
    SI              reduce using rule 119 (n_endFor -> .)
    MIENTRAS        reduce using rule 119 (n_endFor -> .)
    REGRESA         reduce using rule 119 (n_endFor -> .)
    DESDE           reduce using rule 119 (n_endFor -> .)
    RBRACKET        reduce using rule 119 (n_endFor -> .)

    n_endFor                       shift and go to state 244

state 242

    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad . bloque n_endIfQuad
    (41) bloque -> . LBRACKET mult_estatutos RBRACKET
    (42) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 46

    bloque                         shift and go to state 245

state 243

    (113) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .

    ID              reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    LEE             reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    ESCRIBE         reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    SI              reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    MIENTRAS        reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    REGRESA         reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    DESDE           reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    RBRACKET        reduce using rule 113 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)


state 244

    (117) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .

    ID              reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    LEE             reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    ESCRIBE         reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    SI              reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    MIENTRAS        reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    REGRESA         reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    DESDE           reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    RBRACKET        reduce using rule 117 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)


state 245

    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque . n_endIfQuad
    (111) n_endIfQuad -> .

    ID              reduce using rule 111 (n_endIfQuad -> .)
    LEE             reduce using rule 111 (n_endIfQuad -> .)
    ESCRIBE         reduce using rule 111 (n_endIfQuad -> .)
    SI              reduce using rule 111 (n_endIfQuad -> .)
    MIENTRAS        reduce using rule 111 (n_endIfQuad -> .)
    REGRESA         reduce using rule 111 (n_endIfQuad -> .)
    DESDE           reduce using rule 111 (n_endIfQuad -> .)
    RBRACKET        reduce using rule 111 (n_endIfQuad -> .)

    n_endIfQuad                    shift and go to state 246

state 246

    (109) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .

    ID              reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    LEE             reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    ESCRIBE         reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    SI              reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    MIENTRAS        reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    REGRESA         reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    DESDE           reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    RBRACKET        reduce using rule 109 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)

