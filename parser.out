Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    SAME

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA ID SEMICOLON vars funcion principal
Rule 2     programa -> PROGRAMA ID SEMICOLON funcion principal
Rule 3     programa -> PROGRAMA ID SEMICOLON vars principal
Rule 4     programa -> PROGRAMA ID SEMICOLON principal
Rule 5     principal -> PRINCIPAL LPAREN RPAREN bloque
Rule 6     vars -> VAR vars_aux
Rule 7     vars_aux -> tipo_simple vars_aux1
Rule 8     vars_aux -> tipo_simple vars_aux1 vars_aux
Rule 9     vars_aux1 -> vars_aux2 SEMICOLON
Rule 10    vars_aux1 -> vars_aux2 COMMA vars_aux1
Rule 11    vars_aux2 -> ID SEMICOLON
Rule 12    vars_aux2 -> ID LSQUARE CTE_I RSQUARE SEMICOLON
Rule 13    tipo_simple -> INT
Rule 14    tipo_simple -> FLOAT
Rule 15    tipo_simple -> CHAR
Rule 16    empty -> <empty>
Rule 17    variable -> ID LSQUARE exp RSQUARE
Rule 18    variable -> ID
Rule 19    funcion -> FUNCION tipo_simple ID LPAREN param RPAREN vars SEMICOLON bloque
Rule 20    funcion -> FUNCION tipo_simple ID LPAREN param RPAREN SEMICOLON bloque
Rule 21    funcion -> FUNCION VOID ID LPAREN param RPAREN vars SEMICOLON bloque
Rule 22    funcion -> FUNCION VOID ID LPAREN param RPAREN SEMICOLON bloque
Rule 23    param -> ID
Rule 24    param -> ID COMMA param
Rule 25    param -> empty
Rule 26    bloque -> LBRACKET mult_estatutos RBRACKET
Rule 27    mult_estatutos -> estatuto
Rule 28    mult_estatutos -> estatuto mult_estatutos
Rule 29    mult_estatutos -> empty
Rule 30    estatuto -> asigna
Rule 31    estatuto -> llamada
Rule 32    estatuto -> lee
Rule 33    estatuto -> escribe
Rule 34    estatuto -> condicion
Rule 35    estatuto -> ciclo_w
Rule 36    estatuto -> retorno
Rule 37    estatuto -> ciclo_f
Rule 38    asigna -> variable EQUAL exp SEMICOLON
Rule 39    llamada -> ID LPAREN mult_exp RPAREN
Rule 40    mult_exp -> exp
Rule 41    mult_exp -> exp COMMA mult_exp
Rule 42    mult_exp -> empty
Rule 43    lee -> LEE LPAREN variable RPAREN
Rule 44    escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON
Rule 45    escribe -> LPAREN mult_cte_s RPAREN SEMICOLON
Rule 46    mult_cte_s -> CTE_S
Rule 47    mult_cte_s -> CTE_S COMMA mult_cte_s
Rule 48    mult_cte_s -> empty
Rule 49    exp -> t_exp OR exp
Rule 50    exp -> t_exp
Rule 51    t_exp -> g_exp AND t_exp
Rule 52    t_exp -> g_exp
Rule 53    g_exp -> m_exp
Rule 54    g_exp -> LESSTHAN m_exp
Rule 55    g_exp -> LESSEQUAL m_exp
Rule 56    g_exp -> GREATERTHAN m_exp
Rule 57    g_exp -> GREATEREQUAL m_exp
Rule 58    g_exp -> EQUAL m_exp
Rule 59    g_exp -> NOEQUAL m_exp
Rule 60    m_exp -> t
Rule 61    m_exp -> t PLUS m_exp
Rule 62    m_exp -> t MINUS m_exp
Rule 63    t -> f
Rule 64    t -> f MULT t
Rule 65    t -> f DIV t
Rule 66    t -> f DETER t
Rule 67    t -> f TRANS t
Rule 68    t -> f INVER t
Rule 69    f -> LPAREN exp RPAREN
Rule 70    f -> CTE_I
Rule 71    f -> CTE_F
Rule 72    f -> CTE_C
Rule 73    f -> variable
Rule 74    f -> llamada
Rule 75    condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON
Rule 76    condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON
Rule 77    ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque
Rule 78    ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque
Rule 79    var_cte -> exp
Rule 80    var_cte -> CTE_I
Rule 81    var_cte -> CTE_F
Rule 82    retorno -> REGRESA exp SEMICOLON

Terminals, with rules where they appear

AND                  : 51
CHAR                 : 15
COLON                : 
COMMA                : 10 24 41 47
COMMENT              : 
CTE_C                : 72
CTE_F                : 71 81
CTE_I                : 12 70 78 80
CTE_S                : 46 47
DESDE                : 78
DETER                : 66
DIV                  : 65
ENTONCES             : 75 76
EQUAL                : 38 58
ESCRIBE              : 44
FLOAT                : 14
FUNCION              : 19 20 21 22
GREATEREQUAL         : 57
GREATERTHAN          : 56
HACER                : 78
HASTA                : 78
HAZ                  : 77
ID                   : 1 2 3 4 11 12 17 18 19 20 21 22 23 24 39
INT                  : 13
INVER                : 68
LBRACKET             : 26
LEE                  : 43
LESSEQUAL            : 55
LESSTHAN             : 54
LPAREN               : 5 19 20 21 22 39 43 44 45 69 75 76 77
LSQUARE              : 12 17
MIENTRAS             : 77
MINUS                : 62
MULT                 : 64
NOEQUAL              : 59
OR                   : 49
PLUS                 : 61
PRINCIPAL            : 5
PROGRAMA             : 1 2 3 4
RBRACKET             : 26
REGRESA              : 82
RPAREN               : 5 19 20 21 22 39 43 44 45 69 75 76 77
RSQUARE              : 12 17
SAME                 : 
SEMICOLON            : 1 2 3 4 9 11 12 19 20 21 22 38 44 45 75 76 82
SI                   : 75 76
SINO                 : 75
TRANS                : 67
VAR                  : 6
VOID                 : 21 22
error                : 

Nonterminals, with rules where they appear

asigna               : 30 78
bloque               : 5 19 20 21 22 75 75 76 77 78
ciclo_f              : 37
ciclo_w              : 35
condicion            : 34
empty                : 25 29 42 48
escribe              : 33
estatuto             : 27 28
exp                  : 17 38 40 41 49 69 75 76 77 79 82
f                    : 63 64 65 66 67 68
funcion              : 1 2
g_exp                : 51 52
lee                  : 32
llamada              : 31 74
m_exp                : 53 54 55 56 57 58 59 61 62
mult_cte_s           : 45 47
mult_estatutos       : 26 28
mult_exp             : 39 41 44
param                : 19 20 21 22 24
principal            : 1 2 3 4
programa             : 0
retorno              : 36
t                    : 60 61 62 64 65 66 67 68
t_exp                : 49 50 51
tipo_simple          : 7 8 19 20
var_cte              : 
variable             : 38 43 73
vars                 : 1 3 19 21
vars_aux             : 6 8
vars_aux1            : 7 8 10
vars_aux2            : 9 10

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA ID SEMICOLON vars funcion principal
    (2) programa -> . PROGRAMA ID SEMICOLON funcion principal
    (3) programa -> . PROGRAMA ID SEMICOLON vars principal
    (4) programa -> . PROGRAMA ID SEMICOLON principal

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . ID SEMICOLON vars funcion principal
    (2) programa -> PROGRAMA . ID SEMICOLON funcion principal
    (3) programa -> PROGRAMA . ID SEMICOLON vars principal
    (4) programa -> PROGRAMA . ID SEMICOLON principal

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAMA ID . SEMICOLON vars funcion principal
    (2) programa -> PROGRAMA ID . SEMICOLON funcion principal
    (3) programa -> PROGRAMA ID . SEMICOLON vars principal
    (4) programa -> PROGRAMA ID . SEMICOLON principal

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAMA ID SEMICOLON . vars funcion principal
    (2) programa -> PROGRAMA ID SEMICOLON . funcion principal
    (3) programa -> PROGRAMA ID SEMICOLON . vars principal
    (4) programa -> PROGRAMA ID SEMICOLON . principal
    (6) vars -> . VAR vars_aux
    (19) funcion -> . FUNCION tipo_simple ID LPAREN param RPAREN vars SEMICOLON bloque
    (20) funcion -> . FUNCION tipo_simple ID LPAREN param RPAREN SEMICOLON bloque
    (21) funcion -> . FUNCION VOID ID LPAREN param RPAREN vars SEMICOLON bloque
    (22) funcion -> . FUNCION VOID ID LPAREN param RPAREN SEMICOLON bloque
    (5) principal -> . PRINCIPAL LPAREN RPAREN bloque

    VAR             shift and go to state 8
    FUNCION         shift and go to state 9
    PRINCIPAL       shift and go to state 10

    vars                           shift and go to state 5
    funcion                        shift and go to state 6
    principal                      shift and go to state 7

state 5

    (1) programa -> PROGRAMA ID SEMICOLON vars . funcion principal
    (3) programa -> PROGRAMA ID SEMICOLON vars . principal
    (19) funcion -> . FUNCION tipo_simple ID LPAREN param RPAREN vars SEMICOLON bloque
    (20) funcion -> . FUNCION tipo_simple ID LPAREN param RPAREN SEMICOLON bloque
    (21) funcion -> . FUNCION VOID ID LPAREN param RPAREN vars SEMICOLON bloque
    (22) funcion -> . FUNCION VOID ID LPAREN param RPAREN SEMICOLON bloque
    (5) principal -> . PRINCIPAL LPAREN RPAREN bloque

    FUNCION         shift and go to state 9
    PRINCIPAL       shift and go to state 10

    funcion                        shift and go to state 11
    principal                      shift and go to state 12

state 6

    (2) programa -> PROGRAMA ID SEMICOLON funcion . principal
    (5) principal -> . PRINCIPAL LPAREN RPAREN bloque

    PRINCIPAL       shift and go to state 10

    principal                      shift and go to state 13

state 7

    (4) programa -> PROGRAMA ID SEMICOLON principal .

    $end            reduce using rule 4 (programa -> PROGRAMA ID SEMICOLON principal .)


state 8

    (6) vars -> VAR . vars_aux
    (7) vars_aux -> . tipo_simple vars_aux1
    (8) vars_aux -> . tipo_simple vars_aux1 vars_aux
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    vars_aux                       shift and go to state 14
    tipo_simple                    shift and go to state 15

state 9

    (19) funcion -> FUNCION . tipo_simple ID LPAREN param RPAREN vars SEMICOLON bloque
    (20) funcion -> FUNCION . tipo_simple ID LPAREN param RPAREN SEMICOLON bloque
    (21) funcion -> FUNCION . VOID ID LPAREN param RPAREN vars SEMICOLON bloque
    (22) funcion -> FUNCION . VOID ID LPAREN param RPAREN SEMICOLON bloque
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    VOID            shift and go to state 20
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    tipo_simple                    shift and go to state 19

state 10

    (5) principal -> PRINCIPAL . LPAREN RPAREN bloque

    LPAREN          shift and go to state 21


state 11

    (1) programa -> PROGRAMA ID SEMICOLON vars funcion . principal
    (5) principal -> . PRINCIPAL LPAREN RPAREN bloque

    PRINCIPAL       shift and go to state 10

    principal                      shift and go to state 22

state 12

    (3) programa -> PROGRAMA ID SEMICOLON vars principal .

    $end            reduce using rule 3 (programa -> PROGRAMA ID SEMICOLON vars principal .)


state 13

    (2) programa -> PROGRAMA ID SEMICOLON funcion principal .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON funcion principal .)


state 14

    (6) vars -> VAR vars_aux .

    FUNCION         reduce using rule 6 (vars -> VAR vars_aux .)
    PRINCIPAL       reduce using rule 6 (vars -> VAR vars_aux .)
    SEMICOLON       reduce using rule 6 (vars -> VAR vars_aux .)


state 15

    (7) vars_aux -> tipo_simple . vars_aux1
    (8) vars_aux -> tipo_simple . vars_aux1 vars_aux
    (9) vars_aux1 -> . vars_aux2 SEMICOLON
    (10) vars_aux1 -> . vars_aux2 COMMA vars_aux1
    (11) vars_aux2 -> . ID SEMICOLON
    (12) vars_aux2 -> . ID LSQUARE CTE_I RSQUARE SEMICOLON

    ID              shift and go to state 25

    vars_aux1                      shift and go to state 23
    vars_aux2                      shift and go to state 24

state 16

    (13) tipo_simple -> INT .

    ID              reduce using rule 13 (tipo_simple -> INT .)


state 17

    (14) tipo_simple -> FLOAT .

    ID              reduce using rule 14 (tipo_simple -> FLOAT .)


state 18

    (15) tipo_simple -> CHAR .

    ID              reduce using rule 15 (tipo_simple -> CHAR .)


state 19

    (19) funcion -> FUNCION tipo_simple . ID LPAREN param RPAREN vars SEMICOLON bloque
    (20) funcion -> FUNCION tipo_simple . ID LPAREN param RPAREN SEMICOLON bloque

    ID              shift and go to state 26


state 20

    (21) funcion -> FUNCION VOID . ID LPAREN param RPAREN vars SEMICOLON bloque
    (22) funcion -> FUNCION VOID . ID LPAREN param RPAREN SEMICOLON bloque

    ID              shift and go to state 27


state 21

    (5) principal -> PRINCIPAL LPAREN . RPAREN bloque

    RPAREN          shift and go to state 28


state 22

    (1) programa -> PROGRAMA ID SEMICOLON vars funcion principal .

    $end            reduce using rule 1 (programa -> PROGRAMA ID SEMICOLON vars funcion principal .)


state 23

    (7) vars_aux -> tipo_simple vars_aux1 .
    (8) vars_aux -> tipo_simple vars_aux1 . vars_aux
    (7) vars_aux -> . tipo_simple vars_aux1
    (8) vars_aux -> . tipo_simple vars_aux1 vars_aux
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    FUNCION         reduce using rule 7 (vars_aux -> tipo_simple vars_aux1 .)
    PRINCIPAL       reduce using rule 7 (vars_aux -> tipo_simple vars_aux1 .)
    SEMICOLON       reduce using rule 7 (vars_aux -> tipo_simple vars_aux1 .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    tipo_simple                    shift and go to state 15
    vars_aux                       shift and go to state 29

state 24

    (9) vars_aux1 -> vars_aux2 . SEMICOLON
    (10) vars_aux1 -> vars_aux2 . COMMA vars_aux1

    SEMICOLON       shift and go to state 30
    COMMA           shift and go to state 31


state 25

    (11) vars_aux2 -> ID . SEMICOLON
    (12) vars_aux2 -> ID . LSQUARE CTE_I RSQUARE SEMICOLON

    SEMICOLON       shift and go to state 32
    LSQUARE         shift and go to state 33


state 26

    (19) funcion -> FUNCION tipo_simple ID . LPAREN param RPAREN vars SEMICOLON bloque
    (20) funcion -> FUNCION tipo_simple ID . LPAREN param RPAREN SEMICOLON bloque

    LPAREN          shift and go to state 34


state 27

    (21) funcion -> FUNCION VOID ID . LPAREN param RPAREN vars SEMICOLON bloque
    (22) funcion -> FUNCION VOID ID . LPAREN param RPAREN SEMICOLON bloque

    LPAREN          shift and go to state 35


state 28

    (5) principal -> PRINCIPAL LPAREN RPAREN . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 36

state 29

    (8) vars_aux -> tipo_simple vars_aux1 vars_aux .

    FUNCION         reduce using rule 8 (vars_aux -> tipo_simple vars_aux1 vars_aux .)
    PRINCIPAL       reduce using rule 8 (vars_aux -> tipo_simple vars_aux1 vars_aux .)
    SEMICOLON       reduce using rule 8 (vars_aux -> tipo_simple vars_aux1 vars_aux .)


state 30

    (9) vars_aux1 -> vars_aux2 SEMICOLON .

    INT             reduce using rule 9 (vars_aux1 -> vars_aux2 SEMICOLON .)
    FLOAT           reduce using rule 9 (vars_aux1 -> vars_aux2 SEMICOLON .)
    CHAR            reduce using rule 9 (vars_aux1 -> vars_aux2 SEMICOLON .)
    FUNCION         reduce using rule 9 (vars_aux1 -> vars_aux2 SEMICOLON .)
    PRINCIPAL       reduce using rule 9 (vars_aux1 -> vars_aux2 SEMICOLON .)
    SEMICOLON       reduce using rule 9 (vars_aux1 -> vars_aux2 SEMICOLON .)


state 31

    (10) vars_aux1 -> vars_aux2 COMMA . vars_aux1
    (9) vars_aux1 -> . vars_aux2 SEMICOLON
    (10) vars_aux1 -> . vars_aux2 COMMA vars_aux1
    (11) vars_aux2 -> . ID SEMICOLON
    (12) vars_aux2 -> . ID LSQUARE CTE_I RSQUARE SEMICOLON

    ID              shift and go to state 25

    vars_aux2                      shift and go to state 24
    vars_aux1                      shift and go to state 38

state 32

    (11) vars_aux2 -> ID SEMICOLON .

    SEMICOLON       reduce using rule 11 (vars_aux2 -> ID SEMICOLON .)
    COMMA           reduce using rule 11 (vars_aux2 -> ID SEMICOLON .)


state 33

    (12) vars_aux2 -> ID LSQUARE . CTE_I RSQUARE SEMICOLON

    CTE_I           shift and go to state 39


state 34

    (19) funcion -> FUNCION tipo_simple ID LPAREN . param RPAREN vars SEMICOLON bloque
    (20) funcion -> FUNCION tipo_simple ID LPAREN . param RPAREN SEMICOLON bloque
    (23) param -> . ID
    (24) param -> . ID COMMA param
    (25) param -> . empty
    (16) empty -> .

    ID              shift and go to state 40
    RPAREN          reduce using rule 16 (empty -> .)

    param                          shift and go to state 41
    empty                          shift and go to state 42

state 35

    (21) funcion -> FUNCION VOID ID LPAREN . param RPAREN vars SEMICOLON bloque
    (22) funcion -> FUNCION VOID ID LPAREN . param RPAREN SEMICOLON bloque
    (23) param -> . ID
    (24) param -> . ID COMMA param
    (25) param -> . empty
    (16) empty -> .

    ID              shift and go to state 40
    RPAREN          reduce using rule 16 (empty -> .)

    param                          shift and go to state 43
    empty                          shift and go to state 42

state 36

    (5) principal -> PRINCIPAL LPAREN RPAREN bloque .

    $end            reduce using rule 5 (principal -> PRINCIPAL LPAREN RPAREN bloque .)


state 37

    (26) bloque -> LBRACKET . mult_estatutos RBRACKET
    (27) mult_estatutos -> . estatuto
    (28) mult_estatutos -> . estatuto mult_estatutos
    (29) mult_estatutos -> . empty
    (30) estatuto -> . asigna
    (31) estatuto -> . llamada
    (32) estatuto -> . lee
    (33) estatuto -> . escribe
    (34) estatuto -> . condicion
    (35) estatuto -> . ciclo_w
    (36) estatuto -> . retorno
    (37) estatuto -> . ciclo_f
    (16) empty -> .
    (38) asigna -> . variable EQUAL exp SEMICOLON
    (39) llamada -> . ID LPAREN mult_exp RPAREN
    (43) lee -> . LEE LPAREN variable RPAREN
    (44) escribe -> . ESCRIBE LPAREN mult_exp RPAREN SEMICOLON
    (45) escribe -> . LPAREN mult_cte_s RPAREN SEMICOLON
    (75) condicion -> . SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON
    (76) condicion -> . SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON
    (77) ciclo_w -> . MIENTRAS LPAREN exp RPAREN HAZ bloque
    (82) retorno -> . REGRESA exp SEMICOLON
    (78) ciclo_f -> . DESDE asigna HASTA CTE_I HACER bloque
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID

    RBRACKET        reduce using rule 16 (empty -> .)
    ID              shift and go to state 56
    LEE             shift and go to state 58
    ESCRIBE         shift and go to state 59
    LPAREN          shift and go to state 57
    SI              shift and go to state 60
    MIENTRAS        shift and go to state 61
    REGRESA         shift and go to state 62
    DESDE           shift and go to state 63

    mult_estatutos                 shift and go to state 44
    estatuto                       shift and go to state 45
    empty                          shift and go to state 46
    asigna                         shift and go to state 47
    llamada                        shift and go to state 48
    lee                            shift and go to state 49
    escribe                        shift and go to state 50
    condicion                      shift and go to state 51
    ciclo_w                        shift and go to state 52
    retorno                        shift and go to state 53
    ciclo_f                        shift and go to state 54
    variable                       shift and go to state 55

state 38

    (10) vars_aux1 -> vars_aux2 COMMA vars_aux1 .

    INT             reduce using rule 10 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)
    FLOAT           reduce using rule 10 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)
    CHAR            reduce using rule 10 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)
    FUNCION         reduce using rule 10 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)
    PRINCIPAL       reduce using rule 10 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)
    SEMICOLON       reduce using rule 10 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)


state 39

    (12) vars_aux2 -> ID LSQUARE CTE_I . RSQUARE SEMICOLON

    RSQUARE         shift and go to state 64


state 40

    (23) param -> ID .
    (24) param -> ID . COMMA param

    RPAREN          reduce using rule 23 (param -> ID .)
    COMMA           shift and go to state 65


state 41

    (19) funcion -> FUNCION tipo_simple ID LPAREN param . RPAREN vars SEMICOLON bloque
    (20) funcion -> FUNCION tipo_simple ID LPAREN param . RPAREN SEMICOLON bloque

    RPAREN          shift and go to state 66


state 42

    (25) param -> empty .

    RPAREN          reduce using rule 25 (param -> empty .)


state 43

    (21) funcion -> FUNCION VOID ID LPAREN param . RPAREN vars SEMICOLON bloque
    (22) funcion -> FUNCION VOID ID LPAREN param . RPAREN SEMICOLON bloque

    RPAREN          shift and go to state 67


state 44

    (26) bloque -> LBRACKET mult_estatutos . RBRACKET

    RBRACKET        shift and go to state 68


state 45

    (27) mult_estatutos -> estatuto .
    (28) mult_estatutos -> estatuto . mult_estatutos
    (27) mult_estatutos -> . estatuto
    (28) mult_estatutos -> . estatuto mult_estatutos
    (29) mult_estatutos -> . empty
    (30) estatuto -> . asigna
    (31) estatuto -> . llamada
    (32) estatuto -> . lee
    (33) estatuto -> . escribe
    (34) estatuto -> . condicion
    (35) estatuto -> . ciclo_w
    (36) estatuto -> . retorno
    (37) estatuto -> . ciclo_f
    (16) empty -> .
    (38) asigna -> . variable EQUAL exp SEMICOLON
    (39) llamada -> . ID LPAREN mult_exp RPAREN
    (43) lee -> . LEE LPAREN variable RPAREN
    (44) escribe -> . ESCRIBE LPAREN mult_exp RPAREN SEMICOLON
    (45) escribe -> . LPAREN mult_cte_s RPAREN SEMICOLON
    (75) condicion -> . SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON
    (76) condicion -> . SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON
    (77) ciclo_w -> . MIENTRAS LPAREN exp RPAREN HAZ bloque
    (82) retorno -> . REGRESA exp SEMICOLON
    (78) ciclo_f -> . DESDE asigna HASTA CTE_I HACER bloque
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID

  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (empty -> .)
    RBRACKET        reduce using rule 16 (empty -> .)
    ID              shift and go to state 56
    LEE             shift and go to state 58
    ESCRIBE         shift and go to state 59
    LPAREN          shift and go to state 57
    SI              shift and go to state 60
    MIENTRAS        shift and go to state 61
    REGRESA         shift and go to state 62
    DESDE           shift and go to state 63

  ! RBRACKET        [ reduce using rule 27 (mult_estatutos -> estatuto .) ]

    estatuto                       shift and go to state 45
    mult_estatutos                 shift and go to state 69
    empty                          shift and go to state 46
    asigna                         shift and go to state 47
    llamada                        shift and go to state 48
    lee                            shift and go to state 49
    escribe                        shift and go to state 50
    condicion                      shift and go to state 51
    ciclo_w                        shift and go to state 52
    retorno                        shift and go to state 53
    ciclo_f                        shift and go to state 54
    variable                       shift and go to state 55

state 46

    (29) mult_estatutos -> empty .

    RBRACKET        reduce using rule 29 (mult_estatutos -> empty .)


state 47

    (30) estatuto -> asigna .

    ID              reduce using rule 30 (estatuto -> asigna .)
    LEE             reduce using rule 30 (estatuto -> asigna .)
    ESCRIBE         reduce using rule 30 (estatuto -> asigna .)
    LPAREN          reduce using rule 30 (estatuto -> asigna .)
    SI              reduce using rule 30 (estatuto -> asigna .)
    MIENTRAS        reduce using rule 30 (estatuto -> asigna .)
    REGRESA         reduce using rule 30 (estatuto -> asigna .)
    DESDE           reduce using rule 30 (estatuto -> asigna .)
    RBRACKET        reduce using rule 30 (estatuto -> asigna .)


state 48

    (31) estatuto -> llamada .

    ID              reduce using rule 31 (estatuto -> llamada .)
    LEE             reduce using rule 31 (estatuto -> llamada .)
    ESCRIBE         reduce using rule 31 (estatuto -> llamada .)
    LPAREN          reduce using rule 31 (estatuto -> llamada .)
    SI              reduce using rule 31 (estatuto -> llamada .)
    MIENTRAS        reduce using rule 31 (estatuto -> llamada .)
    REGRESA         reduce using rule 31 (estatuto -> llamada .)
    DESDE           reduce using rule 31 (estatuto -> llamada .)
    RBRACKET        reduce using rule 31 (estatuto -> llamada .)


state 49

    (32) estatuto -> lee .

    ID              reduce using rule 32 (estatuto -> lee .)
    LEE             reduce using rule 32 (estatuto -> lee .)
    ESCRIBE         reduce using rule 32 (estatuto -> lee .)
    LPAREN          reduce using rule 32 (estatuto -> lee .)
    SI              reduce using rule 32 (estatuto -> lee .)
    MIENTRAS        reduce using rule 32 (estatuto -> lee .)
    REGRESA         reduce using rule 32 (estatuto -> lee .)
    DESDE           reduce using rule 32 (estatuto -> lee .)
    RBRACKET        reduce using rule 32 (estatuto -> lee .)


state 50

    (33) estatuto -> escribe .

    ID              reduce using rule 33 (estatuto -> escribe .)
    LEE             reduce using rule 33 (estatuto -> escribe .)
    ESCRIBE         reduce using rule 33 (estatuto -> escribe .)
    LPAREN          reduce using rule 33 (estatuto -> escribe .)
    SI              reduce using rule 33 (estatuto -> escribe .)
    MIENTRAS        reduce using rule 33 (estatuto -> escribe .)
    REGRESA         reduce using rule 33 (estatuto -> escribe .)
    DESDE           reduce using rule 33 (estatuto -> escribe .)
    RBRACKET        reduce using rule 33 (estatuto -> escribe .)


state 51

    (34) estatuto -> condicion .

    ID              reduce using rule 34 (estatuto -> condicion .)
    LEE             reduce using rule 34 (estatuto -> condicion .)
    ESCRIBE         reduce using rule 34 (estatuto -> condicion .)
    LPAREN          reduce using rule 34 (estatuto -> condicion .)
    SI              reduce using rule 34 (estatuto -> condicion .)
    MIENTRAS        reduce using rule 34 (estatuto -> condicion .)
    REGRESA         reduce using rule 34 (estatuto -> condicion .)
    DESDE           reduce using rule 34 (estatuto -> condicion .)
    RBRACKET        reduce using rule 34 (estatuto -> condicion .)


state 52

    (35) estatuto -> ciclo_w .

    ID              reduce using rule 35 (estatuto -> ciclo_w .)
    LEE             reduce using rule 35 (estatuto -> ciclo_w .)
    ESCRIBE         reduce using rule 35 (estatuto -> ciclo_w .)
    LPAREN          reduce using rule 35 (estatuto -> ciclo_w .)
    SI              reduce using rule 35 (estatuto -> ciclo_w .)
    MIENTRAS        reduce using rule 35 (estatuto -> ciclo_w .)
    REGRESA         reduce using rule 35 (estatuto -> ciclo_w .)
    DESDE           reduce using rule 35 (estatuto -> ciclo_w .)
    RBRACKET        reduce using rule 35 (estatuto -> ciclo_w .)


state 53

    (36) estatuto -> retorno .

    ID              reduce using rule 36 (estatuto -> retorno .)
    LEE             reduce using rule 36 (estatuto -> retorno .)
    ESCRIBE         reduce using rule 36 (estatuto -> retorno .)
    LPAREN          reduce using rule 36 (estatuto -> retorno .)
    SI              reduce using rule 36 (estatuto -> retorno .)
    MIENTRAS        reduce using rule 36 (estatuto -> retorno .)
    REGRESA         reduce using rule 36 (estatuto -> retorno .)
    DESDE           reduce using rule 36 (estatuto -> retorno .)
    RBRACKET        reduce using rule 36 (estatuto -> retorno .)


state 54

    (37) estatuto -> ciclo_f .

    ID              reduce using rule 37 (estatuto -> ciclo_f .)
    LEE             reduce using rule 37 (estatuto -> ciclo_f .)
    ESCRIBE         reduce using rule 37 (estatuto -> ciclo_f .)
    LPAREN          reduce using rule 37 (estatuto -> ciclo_f .)
    SI              reduce using rule 37 (estatuto -> ciclo_f .)
    MIENTRAS        reduce using rule 37 (estatuto -> ciclo_f .)
    REGRESA         reduce using rule 37 (estatuto -> ciclo_f .)
    DESDE           reduce using rule 37 (estatuto -> ciclo_f .)
    RBRACKET        reduce using rule 37 (estatuto -> ciclo_f .)


state 55

    (38) asigna -> variable . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 70


state 56

    (39) llamada -> ID . LPAREN mult_exp RPAREN
    (17) variable -> ID . LSQUARE exp RSQUARE
    (18) variable -> ID .

    LPAREN          shift and go to state 71
    LSQUARE         shift and go to state 72
    EQUAL           reduce using rule 18 (variable -> ID .)


state 57

    (45) escribe -> LPAREN . mult_cte_s RPAREN SEMICOLON
    (46) mult_cte_s -> . CTE_S
    (47) mult_cte_s -> . CTE_S COMMA mult_cte_s
    (48) mult_cte_s -> . empty
    (16) empty -> .

    CTE_S           shift and go to state 74
    RPAREN          reduce using rule 16 (empty -> .)

    mult_cte_s                     shift and go to state 73
    empty                          shift and go to state 75

state 58

    (43) lee -> LEE . LPAREN variable RPAREN

    LPAREN          shift and go to state 76


state 59

    (44) escribe -> ESCRIBE . LPAREN mult_exp RPAREN SEMICOLON

    LPAREN          shift and go to state 77


state 60

    (75) condicion -> SI . LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON
    (76) condicion -> SI . LPAREN exp RPAREN ENTONCES bloque SEMICOLON

    LPAREN          shift and go to state 78


state 61

    (77) ciclo_w -> MIENTRAS . LPAREN exp RPAREN HAZ bloque

    LPAREN          shift and go to state 79


state 62

    (82) retorno -> REGRESA . exp SEMICOLON
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    exp                            shift and go to state 80
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 63

    (78) ciclo_f -> DESDE . asigna HASTA CTE_I HACER bloque
    (38) asigna -> . variable EQUAL exp SEMICOLON
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID

    ID              shift and go to state 100

    asigna                         shift and go to state 99
    variable                       shift and go to state 55

state 64

    (12) vars_aux2 -> ID LSQUARE CTE_I RSQUARE . SEMICOLON

    SEMICOLON       shift and go to state 101


state 65

    (24) param -> ID COMMA . param
    (23) param -> . ID
    (24) param -> . ID COMMA param
    (25) param -> . empty
    (16) empty -> .

    ID              shift and go to state 40
    RPAREN          reduce using rule 16 (empty -> .)

    param                          shift and go to state 102
    empty                          shift and go to state 42

state 66

    (19) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN . vars SEMICOLON bloque
    (20) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN . SEMICOLON bloque
    (6) vars -> . VAR vars_aux

    SEMICOLON       shift and go to state 104
    VAR             shift and go to state 8

    vars                           shift and go to state 103

state 67

    (21) funcion -> FUNCION VOID ID LPAREN param RPAREN . vars SEMICOLON bloque
    (22) funcion -> FUNCION VOID ID LPAREN param RPAREN . SEMICOLON bloque
    (6) vars -> . VAR vars_aux

    SEMICOLON       shift and go to state 106
    VAR             shift and go to state 8

    vars                           shift and go to state 105

state 68

    (26) bloque -> LBRACKET mult_estatutos RBRACKET .

    $end            reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    PRINCIPAL       reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SINO            reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SEMICOLON       reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    ID              reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    LEE             reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    ESCRIBE         reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    LPAREN          reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SI              reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    MIENTRAS        reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    REGRESA         reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    DESDE           reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    RBRACKET        reduce using rule 26 (bloque -> LBRACKET mult_estatutos RBRACKET .)


state 69

    (28) mult_estatutos -> estatuto mult_estatutos .

    RBRACKET        reduce using rule 28 (mult_estatutos -> estatuto mult_estatutos .)


state 70

    (38) asigna -> variable EQUAL . exp SEMICOLON
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    variable                       shift and go to state 96
    exp                            shift and go to state 107
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    llamada                        shift and go to state 97

state 71

    (39) llamada -> ID LPAREN . mult_exp RPAREN
    (40) mult_exp -> . exp
    (41) mult_exp -> . exp COMMA mult_exp
    (42) mult_exp -> . empty
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (16) empty -> .
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    RPAREN          reduce using rule 16 (empty -> .)
    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    mult_exp                       shift and go to state 108
    exp                            shift and go to state 109
    empty                          shift and go to state 110
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 72

    (17) variable -> ID LSQUARE . exp RSQUARE
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    exp                            shift and go to state 111
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 73

    (45) escribe -> LPAREN mult_cte_s . RPAREN SEMICOLON

    RPAREN          shift and go to state 112


state 74

    (46) mult_cte_s -> CTE_S .
    (47) mult_cte_s -> CTE_S . COMMA mult_cte_s

    RPAREN          reduce using rule 46 (mult_cte_s -> CTE_S .)
    COMMA           shift and go to state 113


state 75

    (48) mult_cte_s -> empty .

    RPAREN          reduce using rule 48 (mult_cte_s -> empty .)


state 76

    (43) lee -> LEE LPAREN . variable RPAREN
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID

    ID              shift and go to state 100

    variable                       shift and go to state 114

state 77

    (44) escribe -> ESCRIBE LPAREN . mult_exp RPAREN SEMICOLON
    (40) mult_exp -> . exp
    (41) mult_exp -> . exp COMMA mult_exp
    (42) mult_exp -> . empty
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (16) empty -> .
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    RPAREN          reduce using rule 16 (empty -> .)
    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    mult_exp                       shift and go to state 115
    exp                            shift and go to state 109
    empty                          shift and go to state 110
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 78

    (75) condicion -> SI LPAREN . exp RPAREN ENTONCES bloque SINO bloque SEMICOLON
    (76) condicion -> SI LPAREN . exp RPAREN ENTONCES bloque SEMICOLON
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    exp                            shift and go to state 116
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 79

    (77) ciclo_w -> MIENTRAS LPAREN . exp RPAREN HAZ bloque
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    exp                            shift and go to state 117
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 80

    (82) retorno -> REGRESA exp . SEMICOLON

    SEMICOLON       shift and go to state 118


state 81

    (49) exp -> t_exp . OR exp
    (50) exp -> t_exp .

    OR              shift and go to state 119
    SEMICOLON       reduce using rule 50 (exp -> t_exp .)
    COMMA           reduce using rule 50 (exp -> t_exp .)
    RPAREN          reduce using rule 50 (exp -> t_exp .)
    RSQUARE         reduce using rule 50 (exp -> t_exp .)


state 82

    (51) t_exp -> g_exp . AND t_exp
    (52) t_exp -> g_exp .

    AND             shift and go to state 120
    OR              reduce using rule 52 (t_exp -> g_exp .)
    SEMICOLON       reduce using rule 52 (t_exp -> g_exp .)
    COMMA           reduce using rule 52 (t_exp -> g_exp .)
    RPAREN          reduce using rule 52 (t_exp -> g_exp .)
    RSQUARE         reduce using rule 52 (t_exp -> g_exp .)


state 83

    (53) g_exp -> m_exp .

    AND             reduce using rule 53 (g_exp -> m_exp .)
    OR              reduce using rule 53 (g_exp -> m_exp .)
    SEMICOLON       reduce using rule 53 (g_exp -> m_exp .)
    COMMA           reduce using rule 53 (g_exp -> m_exp .)
    RPAREN          reduce using rule 53 (g_exp -> m_exp .)
    RSQUARE         reduce using rule 53 (g_exp -> m_exp .)


state 84

    (54) g_exp -> LESSTHAN . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    m_exp                          shift and go to state 121
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 85

    (55) g_exp -> LESSEQUAL . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    m_exp                          shift and go to state 122
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 86

    (56) g_exp -> GREATERTHAN . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    m_exp                          shift and go to state 123
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 87

    (57) g_exp -> GREATEREQUAL . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    m_exp                          shift and go to state 124
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 88

    (58) g_exp -> EQUAL . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    m_exp                          shift and go to state 125
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 89

    (59) g_exp -> NOEQUAL . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    m_exp                          shift and go to state 126
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 90

    (60) m_exp -> t .
    (61) m_exp -> t . PLUS m_exp
    (62) m_exp -> t . MINUS m_exp

    AND             reduce using rule 60 (m_exp -> t .)
    OR              reduce using rule 60 (m_exp -> t .)
    SEMICOLON       reduce using rule 60 (m_exp -> t .)
    COMMA           reduce using rule 60 (m_exp -> t .)
    RPAREN          reduce using rule 60 (m_exp -> t .)
    RSQUARE         reduce using rule 60 (m_exp -> t .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 91

    (63) t -> f .
    (64) t -> f . MULT t
    (65) t -> f . DIV t
    (66) t -> f . DETER t
    (67) t -> f . TRANS t
    (68) t -> f . INVER t

    PLUS            reduce using rule 63 (t -> f .)
    MINUS           reduce using rule 63 (t -> f .)
    AND             reduce using rule 63 (t -> f .)
    OR              reduce using rule 63 (t -> f .)
    SEMICOLON       reduce using rule 63 (t -> f .)
    COMMA           reduce using rule 63 (t -> f .)
    RPAREN          reduce using rule 63 (t -> f .)
    RSQUARE         reduce using rule 63 (t -> f .)
    MULT            shift and go to state 129
    DIV             shift and go to state 130
    DETER           shift and go to state 131
    TRANS           shift and go to state 132
    INVER           shift and go to state 133


state 92

    (69) f -> LPAREN . exp RPAREN
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    exp                            shift and go to state 134
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 93

    (70) f -> CTE_I .

    MULT            reduce using rule 70 (f -> CTE_I .)
    DIV             reduce using rule 70 (f -> CTE_I .)
    DETER           reduce using rule 70 (f -> CTE_I .)
    TRANS           reduce using rule 70 (f -> CTE_I .)
    INVER           reduce using rule 70 (f -> CTE_I .)
    PLUS            reduce using rule 70 (f -> CTE_I .)
    MINUS           reduce using rule 70 (f -> CTE_I .)
    AND             reduce using rule 70 (f -> CTE_I .)
    OR              reduce using rule 70 (f -> CTE_I .)
    SEMICOLON       reduce using rule 70 (f -> CTE_I .)
    COMMA           reduce using rule 70 (f -> CTE_I .)
    RPAREN          reduce using rule 70 (f -> CTE_I .)
    RSQUARE         reduce using rule 70 (f -> CTE_I .)


state 94

    (71) f -> CTE_F .

    MULT            reduce using rule 71 (f -> CTE_F .)
    DIV             reduce using rule 71 (f -> CTE_F .)
    DETER           reduce using rule 71 (f -> CTE_F .)
    TRANS           reduce using rule 71 (f -> CTE_F .)
    INVER           reduce using rule 71 (f -> CTE_F .)
    PLUS            reduce using rule 71 (f -> CTE_F .)
    MINUS           reduce using rule 71 (f -> CTE_F .)
    AND             reduce using rule 71 (f -> CTE_F .)
    OR              reduce using rule 71 (f -> CTE_F .)
    SEMICOLON       reduce using rule 71 (f -> CTE_F .)
    COMMA           reduce using rule 71 (f -> CTE_F .)
    RPAREN          reduce using rule 71 (f -> CTE_F .)
    RSQUARE         reduce using rule 71 (f -> CTE_F .)


state 95

    (72) f -> CTE_C .

    MULT            reduce using rule 72 (f -> CTE_C .)
    DIV             reduce using rule 72 (f -> CTE_C .)
    DETER           reduce using rule 72 (f -> CTE_C .)
    TRANS           reduce using rule 72 (f -> CTE_C .)
    INVER           reduce using rule 72 (f -> CTE_C .)
    PLUS            reduce using rule 72 (f -> CTE_C .)
    MINUS           reduce using rule 72 (f -> CTE_C .)
    AND             reduce using rule 72 (f -> CTE_C .)
    OR              reduce using rule 72 (f -> CTE_C .)
    SEMICOLON       reduce using rule 72 (f -> CTE_C .)
    COMMA           reduce using rule 72 (f -> CTE_C .)
    RPAREN          reduce using rule 72 (f -> CTE_C .)
    RSQUARE         reduce using rule 72 (f -> CTE_C .)


state 96

    (73) f -> variable .

    MULT            reduce using rule 73 (f -> variable .)
    DIV             reduce using rule 73 (f -> variable .)
    DETER           reduce using rule 73 (f -> variable .)
    TRANS           reduce using rule 73 (f -> variable .)
    INVER           reduce using rule 73 (f -> variable .)
    PLUS            reduce using rule 73 (f -> variable .)
    MINUS           reduce using rule 73 (f -> variable .)
    AND             reduce using rule 73 (f -> variable .)
    OR              reduce using rule 73 (f -> variable .)
    SEMICOLON       reduce using rule 73 (f -> variable .)
    COMMA           reduce using rule 73 (f -> variable .)
    RPAREN          reduce using rule 73 (f -> variable .)
    RSQUARE         reduce using rule 73 (f -> variable .)


state 97

    (74) f -> llamada .

    MULT            reduce using rule 74 (f -> llamada .)
    DIV             reduce using rule 74 (f -> llamada .)
    DETER           reduce using rule 74 (f -> llamada .)
    TRANS           reduce using rule 74 (f -> llamada .)
    INVER           reduce using rule 74 (f -> llamada .)
    PLUS            reduce using rule 74 (f -> llamada .)
    MINUS           reduce using rule 74 (f -> llamada .)
    AND             reduce using rule 74 (f -> llamada .)
    OR              reduce using rule 74 (f -> llamada .)
    SEMICOLON       reduce using rule 74 (f -> llamada .)
    COMMA           reduce using rule 74 (f -> llamada .)
    RPAREN          reduce using rule 74 (f -> llamada .)
    RSQUARE         reduce using rule 74 (f -> llamada .)


state 98

    (17) variable -> ID . LSQUARE exp RSQUARE
    (18) variable -> ID .
    (39) llamada -> ID . LPAREN mult_exp RPAREN

    LSQUARE         shift and go to state 72
    MULT            reduce using rule 18 (variable -> ID .)
    DIV             reduce using rule 18 (variable -> ID .)
    DETER           reduce using rule 18 (variable -> ID .)
    TRANS           reduce using rule 18 (variable -> ID .)
    INVER           reduce using rule 18 (variable -> ID .)
    PLUS            reduce using rule 18 (variable -> ID .)
    MINUS           reduce using rule 18 (variable -> ID .)
    AND             reduce using rule 18 (variable -> ID .)
    OR              reduce using rule 18 (variable -> ID .)
    SEMICOLON       reduce using rule 18 (variable -> ID .)
    COMMA           reduce using rule 18 (variable -> ID .)
    RPAREN          reduce using rule 18 (variable -> ID .)
    RSQUARE         reduce using rule 18 (variable -> ID .)
    LPAREN          shift and go to state 71


state 99

    (78) ciclo_f -> DESDE asigna . HASTA CTE_I HACER bloque

    HASTA           shift and go to state 135


state 100

    (17) variable -> ID . LSQUARE exp RSQUARE
    (18) variable -> ID .

    LSQUARE         shift and go to state 72
    EQUAL           reduce using rule 18 (variable -> ID .)
    RPAREN          reduce using rule 18 (variable -> ID .)


state 101

    (12) vars_aux2 -> ID LSQUARE CTE_I RSQUARE SEMICOLON .

    SEMICOLON       reduce using rule 12 (vars_aux2 -> ID LSQUARE CTE_I RSQUARE SEMICOLON .)
    COMMA           reduce using rule 12 (vars_aux2 -> ID LSQUARE CTE_I RSQUARE SEMICOLON .)


state 102

    (24) param -> ID COMMA param .

    RPAREN          reduce using rule 24 (param -> ID COMMA param .)


state 103

    (19) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN vars . SEMICOLON bloque

    SEMICOLON       shift and go to state 136


state 104

    (20) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN SEMICOLON . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 137

state 105

    (21) funcion -> FUNCION VOID ID LPAREN param RPAREN vars . SEMICOLON bloque

    SEMICOLON       shift and go to state 138


state 106

    (22) funcion -> FUNCION VOID ID LPAREN param RPAREN SEMICOLON . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 139

state 107

    (38) asigna -> variable EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 140


state 108

    (39) llamada -> ID LPAREN mult_exp . RPAREN

    RPAREN          shift and go to state 141


state 109

    (40) mult_exp -> exp .
    (41) mult_exp -> exp . COMMA mult_exp

    RPAREN          reduce using rule 40 (mult_exp -> exp .)
    COMMA           shift and go to state 142


state 110

    (42) mult_exp -> empty .

    RPAREN          reduce using rule 42 (mult_exp -> empty .)


state 111

    (17) variable -> ID LSQUARE exp . RSQUARE

    RSQUARE         shift and go to state 143


state 112

    (45) escribe -> LPAREN mult_cte_s RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 144


state 113

    (47) mult_cte_s -> CTE_S COMMA . mult_cte_s
    (46) mult_cte_s -> . CTE_S
    (47) mult_cte_s -> . CTE_S COMMA mult_cte_s
    (48) mult_cte_s -> . empty
    (16) empty -> .

    CTE_S           shift and go to state 74
    RPAREN          reduce using rule 16 (empty -> .)

    mult_cte_s                     shift and go to state 145
    empty                          shift and go to state 75

state 114

    (43) lee -> LEE LPAREN variable . RPAREN

    RPAREN          shift and go to state 146


state 115

    (44) escribe -> ESCRIBE LPAREN mult_exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 147


state 116

    (75) condicion -> SI LPAREN exp . RPAREN ENTONCES bloque SINO bloque SEMICOLON
    (76) condicion -> SI LPAREN exp . RPAREN ENTONCES bloque SEMICOLON

    RPAREN          shift and go to state 148


state 117

    (77) ciclo_w -> MIENTRAS LPAREN exp . RPAREN HAZ bloque

    RPAREN          shift and go to state 149


state 118

    (82) retorno -> REGRESA exp SEMICOLON .

    ID              reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    LEE             reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    ESCRIBE         reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    LPAREN          reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    SI              reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    MIENTRAS        reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    REGRESA         reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    DESDE           reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)
    RBRACKET        reduce using rule 82 (retorno -> REGRESA exp SEMICOLON .)


state 119

    (49) exp -> t_exp OR . exp
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    t_exp                          shift and go to state 81
    exp                            shift and go to state 150
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 120

    (51) t_exp -> g_exp AND . t_exp
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    g_exp                          shift and go to state 82
    t_exp                          shift and go to state 151
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 121

    (54) g_exp -> LESSTHAN m_exp .

    AND             reduce using rule 54 (g_exp -> LESSTHAN m_exp .)
    OR              reduce using rule 54 (g_exp -> LESSTHAN m_exp .)
    SEMICOLON       reduce using rule 54 (g_exp -> LESSTHAN m_exp .)
    COMMA           reduce using rule 54 (g_exp -> LESSTHAN m_exp .)
    RPAREN          reduce using rule 54 (g_exp -> LESSTHAN m_exp .)
    RSQUARE         reduce using rule 54 (g_exp -> LESSTHAN m_exp .)


state 122

    (55) g_exp -> LESSEQUAL m_exp .

    AND             reduce using rule 55 (g_exp -> LESSEQUAL m_exp .)
    OR              reduce using rule 55 (g_exp -> LESSEQUAL m_exp .)
    SEMICOLON       reduce using rule 55 (g_exp -> LESSEQUAL m_exp .)
    COMMA           reduce using rule 55 (g_exp -> LESSEQUAL m_exp .)
    RPAREN          reduce using rule 55 (g_exp -> LESSEQUAL m_exp .)
    RSQUARE         reduce using rule 55 (g_exp -> LESSEQUAL m_exp .)


state 123

    (56) g_exp -> GREATERTHAN m_exp .

    AND             reduce using rule 56 (g_exp -> GREATERTHAN m_exp .)
    OR              reduce using rule 56 (g_exp -> GREATERTHAN m_exp .)
    SEMICOLON       reduce using rule 56 (g_exp -> GREATERTHAN m_exp .)
    COMMA           reduce using rule 56 (g_exp -> GREATERTHAN m_exp .)
    RPAREN          reduce using rule 56 (g_exp -> GREATERTHAN m_exp .)
    RSQUARE         reduce using rule 56 (g_exp -> GREATERTHAN m_exp .)


state 124

    (57) g_exp -> GREATEREQUAL m_exp .

    AND             reduce using rule 57 (g_exp -> GREATEREQUAL m_exp .)
    OR              reduce using rule 57 (g_exp -> GREATEREQUAL m_exp .)
    SEMICOLON       reduce using rule 57 (g_exp -> GREATEREQUAL m_exp .)
    COMMA           reduce using rule 57 (g_exp -> GREATEREQUAL m_exp .)
    RPAREN          reduce using rule 57 (g_exp -> GREATEREQUAL m_exp .)
    RSQUARE         reduce using rule 57 (g_exp -> GREATEREQUAL m_exp .)


state 125

    (58) g_exp -> EQUAL m_exp .

    AND             reduce using rule 58 (g_exp -> EQUAL m_exp .)
    OR              reduce using rule 58 (g_exp -> EQUAL m_exp .)
    SEMICOLON       reduce using rule 58 (g_exp -> EQUAL m_exp .)
    COMMA           reduce using rule 58 (g_exp -> EQUAL m_exp .)
    RPAREN          reduce using rule 58 (g_exp -> EQUAL m_exp .)
    RSQUARE         reduce using rule 58 (g_exp -> EQUAL m_exp .)


state 126

    (59) g_exp -> NOEQUAL m_exp .

    AND             reduce using rule 59 (g_exp -> NOEQUAL m_exp .)
    OR              reduce using rule 59 (g_exp -> NOEQUAL m_exp .)
    SEMICOLON       reduce using rule 59 (g_exp -> NOEQUAL m_exp .)
    COMMA           reduce using rule 59 (g_exp -> NOEQUAL m_exp .)
    RPAREN          reduce using rule 59 (g_exp -> NOEQUAL m_exp .)
    RSQUARE         reduce using rule 59 (g_exp -> NOEQUAL m_exp .)


state 127

    (61) m_exp -> t PLUS . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    t                              shift and go to state 90
    m_exp                          shift and go to state 152
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 128

    (62) m_exp -> t MINUS . m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    t                              shift and go to state 90
    m_exp                          shift and go to state 153
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 129

    (64) t -> f MULT . t
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    f                              shift and go to state 91
    t                              shift and go to state 154
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 130

    (65) t -> f DIV . t
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    f                              shift and go to state 91
    t                              shift and go to state 155
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 131

    (66) t -> f DETER . t
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    f                              shift and go to state 91
    t                              shift and go to state 156
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 132

    (67) t -> f TRANS . t
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    f                              shift and go to state 91
    t                              shift and go to state 157
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 133

    (68) t -> f INVER . t
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    f                              shift and go to state 91
    t                              shift and go to state 158
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 134

    (69) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 159


state 135

    (78) ciclo_f -> DESDE asigna HASTA . CTE_I HACER bloque

    CTE_I           shift and go to state 160


state 136

    (19) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN vars SEMICOLON . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 161

state 137

    (20) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN SEMICOLON bloque .

    PRINCIPAL       reduce using rule 20 (funcion -> FUNCION tipo_simple ID LPAREN param RPAREN SEMICOLON bloque .)


state 138

    (21) funcion -> FUNCION VOID ID LPAREN param RPAREN vars SEMICOLON . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 162

state 139

    (22) funcion -> FUNCION VOID ID LPAREN param RPAREN SEMICOLON bloque .

    PRINCIPAL       reduce using rule 22 (funcion -> FUNCION VOID ID LPAREN param RPAREN SEMICOLON bloque .)


state 140

    (38) asigna -> variable EQUAL exp SEMICOLON .

    ID              reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    LEE             reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    ESCRIBE         reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    LPAREN          reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    SI              reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    MIENTRAS        reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    REGRESA         reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    DESDE           reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    RBRACKET        reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)
    HASTA           reduce using rule 38 (asigna -> variable EQUAL exp SEMICOLON .)


state 141

    (39) llamada -> ID LPAREN mult_exp RPAREN .

    ID              reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    LEE             reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    ESCRIBE         reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    LPAREN          reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    SI              reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    MIENTRAS        reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    REGRESA         reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    DESDE           reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    RBRACKET        reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    MULT            reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    DIV             reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    DETER           reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    TRANS           reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    INVER           reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    PLUS            reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    MINUS           reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    AND             reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    OR              reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    SEMICOLON       reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    COMMA           reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    RPAREN          reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)
    RSQUARE         reduce using rule 39 (llamada -> ID LPAREN mult_exp RPAREN .)


state 142

    (41) mult_exp -> exp COMMA . mult_exp
    (40) mult_exp -> . exp
    (41) mult_exp -> . exp COMMA mult_exp
    (42) mult_exp -> . empty
    (49) exp -> . t_exp OR exp
    (50) exp -> . t_exp
    (16) empty -> .
    (51) t_exp -> . g_exp AND t_exp
    (52) t_exp -> . g_exp
    (53) g_exp -> . m_exp
    (54) g_exp -> . LESSTHAN m_exp
    (55) g_exp -> . LESSEQUAL m_exp
    (56) g_exp -> . GREATERTHAN m_exp
    (57) g_exp -> . GREATEREQUAL m_exp
    (58) g_exp -> . EQUAL m_exp
    (59) g_exp -> . NOEQUAL m_exp
    (60) m_exp -> . t
    (61) m_exp -> . t PLUS m_exp
    (62) m_exp -> . t MINUS m_exp
    (63) t -> . f
    (64) t -> . f MULT t
    (65) t -> . f DIV t
    (66) t -> . f DETER t
    (67) t -> . f TRANS t
    (68) t -> . f INVER t
    (69) f -> . LPAREN exp RPAREN
    (70) f -> . CTE_I
    (71) f -> . CTE_F
    (72) f -> . CTE_C
    (73) f -> . variable
    (74) f -> . llamada
    (17) variable -> . ID LSQUARE exp RSQUARE
    (18) variable -> . ID
    (39) llamada -> . ID LPAREN mult_exp RPAREN

    RPAREN          reduce using rule 16 (empty -> .)
    LESSTHAN        shift and go to state 84
    LESSEQUAL       shift and go to state 85
    GREATERTHAN     shift and go to state 86
    GREATEREQUAL    shift and go to state 87
    EQUAL           shift and go to state 88
    NOEQUAL         shift and go to state 89
    LPAREN          shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_F           shift and go to state 94
    CTE_C           shift and go to state 95
    ID              shift and go to state 98

    exp                            shift and go to state 109
    mult_exp                       shift and go to state 163
    empty                          shift and go to state 110
    t_exp                          shift and go to state 81
    g_exp                          shift and go to state 82
    m_exp                          shift and go to state 83
    t                              shift and go to state 90
    f                              shift and go to state 91
    variable                       shift and go to state 96
    llamada                        shift and go to state 97

state 143

    (17) variable -> ID LSQUARE exp RSQUARE .

    EQUAL           reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    MULT            reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    DIV             reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    DETER           reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    TRANS           reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    INVER           reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    PLUS            reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    MINUS           reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    AND             reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    OR              reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    SEMICOLON       reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    COMMA           reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    RPAREN          reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)
    RSQUARE         reduce using rule 17 (variable -> ID LSQUARE exp RSQUARE .)


state 144

    (45) escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .

    ID              reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    LEE             reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    LPAREN          reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    SI              reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    REGRESA         reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    DESDE           reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 45 (escribe -> LPAREN mult_cte_s RPAREN SEMICOLON .)


state 145

    (47) mult_cte_s -> CTE_S COMMA mult_cte_s .

    RPAREN          reduce using rule 47 (mult_cte_s -> CTE_S COMMA mult_cte_s .)


state 146

    (43) lee -> LEE LPAREN variable RPAREN .

    ID              reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    LEE             reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    ESCRIBE         reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    LPAREN          reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    SI              reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    MIENTRAS        reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    REGRESA         reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    DESDE           reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)
    RBRACKET        reduce using rule 43 (lee -> LEE LPAREN variable RPAREN .)


state 147

    (44) escribe -> ESCRIBE LPAREN mult_exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 148

    (75) condicion -> SI LPAREN exp RPAREN . ENTONCES bloque SINO bloque SEMICOLON
    (76) condicion -> SI LPAREN exp RPAREN . ENTONCES bloque SEMICOLON

    ENTONCES        shift and go to state 165


state 149

    (77) ciclo_w -> MIENTRAS LPAREN exp RPAREN . HAZ bloque

    HAZ             shift and go to state 166


state 150

    (49) exp -> t_exp OR exp .

    SEMICOLON       reduce using rule 49 (exp -> t_exp OR exp .)
    COMMA           reduce using rule 49 (exp -> t_exp OR exp .)
    RPAREN          reduce using rule 49 (exp -> t_exp OR exp .)
    RSQUARE         reduce using rule 49 (exp -> t_exp OR exp .)


state 151

    (51) t_exp -> g_exp AND t_exp .

    OR              reduce using rule 51 (t_exp -> g_exp AND t_exp .)
    SEMICOLON       reduce using rule 51 (t_exp -> g_exp AND t_exp .)
    COMMA           reduce using rule 51 (t_exp -> g_exp AND t_exp .)
    RPAREN          reduce using rule 51 (t_exp -> g_exp AND t_exp .)
    RSQUARE         reduce using rule 51 (t_exp -> g_exp AND t_exp .)


state 152

    (61) m_exp -> t PLUS m_exp .

    AND             reduce using rule 61 (m_exp -> t PLUS m_exp .)
    OR              reduce using rule 61 (m_exp -> t PLUS m_exp .)
    SEMICOLON       reduce using rule 61 (m_exp -> t PLUS m_exp .)
    COMMA           reduce using rule 61 (m_exp -> t PLUS m_exp .)
    RPAREN          reduce using rule 61 (m_exp -> t PLUS m_exp .)
    RSQUARE         reduce using rule 61 (m_exp -> t PLUS m_exp .)


state 153

    (62) m_exp -> t MINUS m_exp .

    AND             reduce using rule 62 (m_exp -> t MINUS m_exp .)
    OR              reduce using rule 62 (m_exp -> t MINUS m_exp .)
    SEMICOLON       reduce using rule 62 (m_exp -> t MINUS m_exp .)
    COMMA           reduce using rule 62 (m_exp -> t MINUS m_exp .)
    RPAREN          reduce using rule 62 (m_exp -> t MINUS m_exp .)
    RSQUARE         reduce using rule 62 (m_exp -> t MINUS m_exp .)


state 154

    (64) t -> f MULT t .

    PLUS            reduce using rule 64 (t -> f MULT t .)
    MINUS           reduce using rule 64 (t -> f MULT t .)
    AND             reduce using rule 64 (t -> f MULT t .)
    OR              reduce using rule 64 (t -> f MULT t .)
    SEMICOLON       reduce using rule 64 (t -> f MULT t .)
    COMMA           reduce using rule 64 (t -> f MULT t .)
    RPAREN          reduce using rule 64 (t -> f MULT t .)
    RSQUARE         reduce using rule 64 (t -> f MULT t .)


state 155

    (65) t -> f DIV t .

    PLUS            reduce using rule 65 (t -> f DIV t .)
    MINUS           reduce using rule 65 (t -> f DIV t .)
    AND             reduce using rule 65 (t -> f DIV t .)
    OR              reduce using rule 65 (t -> f DIV t .)
    SEMICOLON       reduce using rule 65 (t -> f DIV t .)
    COMMA           reduce using rule 65 (t -> f DIV t .)
    RPAREN          reduce using rule 65 (t -> f DIV t .)
    RSQUARE         reduce using rule 65 (t -> f DIV t .)


state 156

    (66) t -> f DETER t .

    PLUS            reduce using rule 66 (t -> f DETER t .)
    MINUS           reduce using rule 66 (t -> f DETER t .)
    AND             reduce using rule 66 (t -> f DETER t .)
    OR              reduce using rule 66 (t -> f DETER t .)
    SEMICOLON       reduce using rule 66 (t -> f DETER t .)
    COMMA           reduce using rule 66 (t -> f DETER t .)
    RPAREN          reduce using rule 66 (t -> f DETER t .)
    RSQUARE         reduce using rule 66 (t -> f DETER t .)


state 157

    (67) t -> f TRANS t .

    PLUS            reduce using rule 67 (t -> f TRANS t .)
    MINUS           reduce using rule 67 (t -> f TRANS t .)
    AND             reduce using rule 67 (t -> f TRANS t .)
    OR              reduce using rule 67 (t -> f TRANS t .)
    SEMICOLON       reduce using rule 67 (t -> f TRANS t .)
    COMMA           reduce using rule 67 (t -> f TRANS t .)
    RPAREN          reduce using rule 67 (t -> f TRANS t .)
    RSQUARE         reduce using rule 67 (t -> f TRANS t .)


state 158

    (68) t -> f INVER t .

    PLUS            reduce using rule 68 (t -> f INVER t .)
    MINUS           reduce using rule 68 (t -> f INVER t .)
    AND             reduce using rule 68 (t -> f INVER t .)
    OR              reduce using rule 68 (t -> f INVER t .)
    SEMICOLON       reduce using rule 68 (t -> f INVER t .)
    COMMA           reduce using rule 68 (t -> f INVER t .)
    RPAREN          reduce using rule 68 (t -> f INVER t .)
    RSQUARE         reduce using rule 68 (t -> f INVER t .)


state 159

    (69) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 69 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 69 (f -> LPAREN exp RPAREN .)
    DETER           reduce using rule 69 (f -> LPAREN exp RPAREN .)
    TRANS           reduce using rule 69 (f -> LPAREN exp RPAREN .)
    INVER           reduce using rule 69 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 69 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 69 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 69 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 69 (f -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 69 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 69 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 69 (f -> LPAREN exp RPAREN .)
    RSQUARE         reduce using rule 69 (f -> LPAREN exp RPAREN .)


state 160

    (78) ciclo_f -> DESDE asigna HASTA CTE_I . HACER bloque

    HACER           shift and go to state 167


state 161

    (19) funcion -> FUNCION tipo_simple ID LPAREN param RPAREN vars SEMICOLON bloque .

    PRINCIPAL       reduce using rule 19 (funcion -> FUNCION tipo_simple ID LPAREN param RPAREN vars SEMICOLON bloque .)


state 162

    (21) funcion -> FUNCION VOID ID LPAREN param RPAREN vars SEMICOLON bloque .

    PRINCIPAL       reduce using rule 21 (funcion -> FUNCION VOID ID LPAREN param RPAREN vars SEMICOLON bloque .)


state 163

    (41) mult_exp -> exp COMMA mult_exp .

    RPAREN          reduce using rule 41 (mult_exp -> exp COMMA mult_exp .)


state 164

    (44) escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .

    ID              reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    LEE             reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    LPAREN          reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    SI              reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    DESDE           reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 44 (escribe -> ESCRIBE LPAREN mult_exp RPAREN SEMICOLON .)


state 165

    (75) condicion -> SI LPAREN exp RPAREN ENTONCES . bloque SINO bloque SEMICOLON
    (76) condicion -> SI LPAREN exp RPAREN ENTONCES . bloque SEMICOLON
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 168

state 166

    (77) ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 169

state 167

    (78) ciclo_f -> DESDE asigna HASTA CTE_I HACER . bloque
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 170

state 168

    (75) condicion -> SI LPAREN exp RPAREN ENTONCES bloque . SINO bloque SEMICOLON
    (76) condicion -> SI LPAREN exp RPAREN ENTONCES bloque . SEMICOLON

    SINO            shift and go to state 171
    SEMICOLON       shift and go to state 172


state 169

    (77) ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .

    ID              reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    LEE             reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    ESCRIBE         reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    LPAREN          reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    SI              reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    MIENTRAS        reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    REGRESA         reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    DESDE           reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)
    RBRACKET        reduce using rule 77 (ciclo_w -> MIENTRAS LPAREN exp RPAREN HAZ bloque .)


state 170

    (78) ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .

    ID              reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    LEE             reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    ESCRIBE         reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    LPAREN          reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    SI              reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    MIENTRAS        reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    REGRESA         reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    DESDE           reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)
    RBRACKET        reduce using rule 78 (ciclo_f -> DESDE asigna HASTA CTE_I HACER bloque .)


state 171

    (75) condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO . bloque SEMICOLON
    (26) bloque -> . LBRACKET mult_estatutos RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 173

state 172

    (76) condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .

    ID              reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    LEE             reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    ESCRIBE         reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    LPAREN          reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    SI              reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    MIENTRAS        reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    REGRESA         reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    DESDE           reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)
    RBRACKET        reduce using rule 76 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SEMICOLON .)


state 173

    (75) condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque . SEMICOLON

    SEMICOLON       shift and go to state 174


state 174

    (75) condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .

    ID              reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    LEE             reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    ESCRIBE         reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    LPAREN          reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    SI              reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    MIENTRAS        reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    REGRESA         reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    DESDE           reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)
    RBRACKET        reduce using rule 75 (condicion -> SI LPAREN exp RPAREN ENTONCES bloque SINO bloque SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 45 resolved using rule (empty -> <empty>)
WARNING: rejected rule (mult_estatutos -> estatuto) in state 45
WARNING: Rule (mult_estatutos -> estatuto) is never reduced
