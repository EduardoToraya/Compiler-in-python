Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA ID SEMICOLON vars mult_funcion principal
Rule 2     programa -> PROGRAMA ID SEMICOLON mult_funcion principal
Rule 3     programa -> PROGRAMA ID SEMICOLON vars principal
Rule 4     programa -> PROGRAMA ID SEMICOLON principal
Rule 5     principal -> PRINCIPAL n_register_glob LPAREN RPAREN bloque
Rule 6     n_register_glob -> <empty>
Rule 7     vars -> VAR vars_aux
Rule 8     vars_aux -> tipo_simple vars_aux1 SEMICOLON
Rule 9     vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux
Rule 10    vars_aux1 -> vars_aux2
Rule 11    vars_aux1 -> vars_aux2 COMMA vars_aux1
Rule 12    vars_aux2 -> ID n_save_var
Rule 13    vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE
Rule 14    n_save_array -> <empty>
Rule 15    n_save_var -> <empty>
Rule 16    tipo_simple -> INT n_save_type
Rule 17    tipo_simple -> FLOAT n_save_type
Rule 18    tipo_simple -> CHAR n_save_type
Rule 19    n_save_type -> <empty>
Rule 20    empty -> <empty>
Rule 21    variable -> ID LSQUARE mult_exp RSQUARE
Rule 22    variable -> ID p_n_getVarVal
Rule 23    p_n_getVarVal -> <empty>
Rule 24    mult_funcion -> funcion
Rule 25    mult_funcion -> funcion mult_funcion
Rule 26    funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
Rule 27    funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
Rule 28    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
Rule 29    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
Rule 30    funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
Rule 31    funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
Rule 32    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
Rule 33    funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func
Rule 34    n_register_func -> <empty>
Rule 35    param -> tipo_simple param_aux1
Rule 36    param_aux1 -> ID save_param
Rule 37    param_aux1 -> ID save_param COMMA param
Rule 38    save_param -> <empty>
Rule 39    n_endof_func -> <empty>
Rule 40    bloque -> LBRACKET mult_estatutos RBRACKET
Rule 41    bloque -> LBRACKET empty RBRACKET
Rule 42    mult_estatutos -> estatuto
Rule 43    mult_estatutos -> estatuto mult_estatutos
Rule 44    estatuto -> asigna SEMICOLON
Rule 45    estatuto -> llamada SEMICOLON
Rule 46    estatuto -> lee
Rule 47    estatuto -> escribe
Rule 48    estatuto -> condicion
Rule 49    estatuto -> ciclo_w
Rule 50    estatuto -> retorno
Rule 51    estatuto -> ciclo_f
Rule 52    asigna -> mult_asigna
Rule 53    mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad
Rule 54    mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad
Rule 55    n_asignQuad -> <empty>
Rule 56    param_exp -> exp n_parameter_action
Rule 57    param_exp -> exp n_parameter_action COMMA param_exp
Rule 58    n_parameter_action -> <empty>
Rule 59    llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
Rule 60    llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
Rule 61    n_last_param_action -> <empty>
Rule 62    n_start_pcounter -> <empty>
Rule 63    n_verify_func -> <empty>
Rule 64    lee -> LEE LPAREN variable RPAREN
Rule 65    escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
Rule 66    escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON
Rule 67    n_escribeExp -> <empty>
Rule 68    mult_cte_s -> CTE_S
Rule 69    mult_cte_s -> CTE_S COMMA mult_cte_s
Rule 70    mult_exp -> exp
Rule 71    mult_exp -> exp COMMA mult_exp
Rule 72    exp -> t_exp n_orQuad
Rule 73    exp -> t_exp n_orQuad OR n_Operador exp
Rule 74    n_orQuad -> <empty>
Rule 75    t_exp -> g_exp n_andQuad
Rule 76    t_exp -> g_exp n_andQuad AND n_Operador t_exp
Rule 77    n_andQuad -> <empty>
Rule 78    g_exp -> m_exp n_compareQuad
Rule 79    g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp
Rule 80    g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp
Rule 81    g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp
Rule 82    g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
Rule 83    g_exp -> m_exp n_compareQuad SAME n_Operador g_exp
Rule 84    g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp
Rule 85    n_compareQuad -> <empty>
Rule 86    m_exp -> t n_sumQuad
Rule 87    m_exp -> t n_sumQuad PLUS n_Operador m_exp
Rule 88    m_exp -> t n_sumQuad MINUS n_Operador m_exp
Rule 89    n_sumQuad -> <empty>
Rule 90    t -> f n_multQuad
Rule 91    t -> f n_multQuad MULT n_Operador t
Rule 92    t -> f n_multQuad DIV n_Operador t
Rule 93    n_multQuad -> <empty>
Rule 94    n_Operador -> <empty>
Rule 95    f -> LPAREN n_FF mult_exp RPAREN n_FF
Rule 96    f -> n_tempTypeI CTE_I n_directPrint
Rule 97    f -> n_tempTypeF CTE_F n_directPrint
Rule 98    f -> n_tempTypeC CTE_C n_directPrint
Rule 99    f -> variable
Rule 100   f -> llamada
Rule 101   n_tempTypeI -> <empty>
Rule 102   n_tempTypeF -> <empty>
Rule 103   n_tempTypeC -> <empty>
Rule 104   n_directPrint -> <empty>
Rule 105   n_FF -> <empty>
Rule 106   condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
Rule 107   condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
Rule 108   n_ifQuad -> <empty>
Rule 109   n_endIfQuad -> <empty>
Rule 110   p_n_sinoQuad -> <empty>
Rule 111   ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
Rule 112   n_startCicle -> <empty>
Rule 113   n_evalExp -> <empty>
Rule 114   n_endWhile -> <empty>
Rule 115   ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
Rule 116   n_evalExp_for -> <empty>
Rule 117   n_endFor -> <empty>
Rule 118   retorno -> REGRESA mult_exp SEMICOLON

Terminals, with rules where they appear

AND                  : 76
CHAR                 : 18
COMMA                : 11 37 57 69 71
COMMENT              : 
CTE_C                : 98
CTE_F                : 97
CTE_I                : 13 96
CTE_S                : 68 69
DESDE                : 115
DIV                  : 92
ENTONCES             : 106 107
EQUAL                : 53 54
ESCRIBE              : 65 66
FLOAT                : 17
FUNCION              : 26 27 28 29 30 31 32 33
GREATEREQUAL         : 82
GREATERTHAN          : 81
HACER                : 115
HASTA                : 115
HAZ                  : 111
ID                   : 1 2 3 4 12 13 21 22 26 27 28 29 30 31 32 33 36 37 59 60
INT                  : 16
LBRACKET             : 40 41
LEE                  : 64
LESSEQUAL            : 80
LESSTHAN             : 79
LPAREN               : 5 26 27 28 29 30 31 32 33 59 60 64 65 66 95 106 107 111
LSQUARE              : 13 21
MIENTRAS             : 111
MINUS                : 88
MULT                 : 91
NOEQUAL              : 84
OR                   : 73
PLUS                 : 87
PRINCIPAL            : 5
PROGRAMA             : 1 2 3 4
RBRACKET             : 40 41
REGRESA              : 118
RPAREN               : 5 26 27 28 29 30 31 32 33 59 60 64 65 66 95 106 107 111
RSQUARE              : 13 21
SAME                 : 83
SEMICOLON            : 1 2 3 4 8 9 44 45 65 66 118
SI                   : 106 107
SINO                 : 107
VAR                  : 7
VOID                 : 28 29 32 33
error                : 

Nonterminals, with rules where they appear

asigna               : 44 115
bloque               : 5 26 27 28 29 30 31 32 33 106 107 107 111 115
ciclo_f              : 51
ciclo_w              : 49
condicion            : 48
empty                : 41
escribe              : 47
estatuto             : 42 43
exp                  : 56 57 70 71 73
f                    : 90 91 92
funcion              : 24 25
g_exp                : 75 76 79 80 81 82 83 84
lee                  : 46
llamada              : 45 100
m_exp                : 78 79 80 81 82 83 84 87 88
mult_asigna          : 52 54
mult_cte_s           : 66 69
mult_estatutos       : 40 43
mult_exp             : 21 53 65 71 95 106 107 111 115 118
mult_funcion         : 1 2 25
n_FF                 : 95 95
n_Operador           : 53 54 73 76 79 80 81 82 83 84 87 88 91 92
n_andQuad            : 75 76
n_asignQuad          : 53 54
n_compareQuad        : 78 79 80 81 82 83 84
n_directPrint        : 96 97 98
n_endFor             : 115
n_endIfQuad          : 106 107
n_endWhile           : 111
n_endof_func         : 26 27 28 29 30 31 32 33
n_escribeExp         : 65 66
n_evalExp            : 111
n_evalExp_for        : 115
n_ifQuad             : 106 107
n_last_param_action  : 59 60
n_multQuad           : 90 91 92
n_orQuad             : 72 73
n_parameter_action   : 56 57
n_register_func      : 26 27 28 29 30 31 32 33
n_register_glob      : 5
n_save_array         : 13
n_save_type          : 16 17 18 28 29 32 33
n_save_var           : 12
n_startCicle         : 111 115
n_start_pcounter     : 59 60
n_sumQuad            : 86 87 88
n_tempTypeC          : 98
n_tempTypeF          : 97
n_tempTypeI          : 96
n_verify_func        : 59 60
p_n_getVarVal        : 22
p_n_sinoQuad         : 107
param                : 26 27 28 29 37
param_aux1           : 35
param_exp            : 57 59
principal            : 1 2 3 4
programa             : 0
retorno              : 50
save_param           : 36 37
t                    : 86 87 88 91 92
t_exp                : 72 73 76
tipo_simple          : 8 9 26 27 30 31 35
variable             : 53 54 64 99
vars                 : 1 3 26 28 30 32
vars_aux             : 7 9
vars_aux1            : 8 9 11
vars_aux2            : 10 11

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA ID SEMICOLON vars mult_funcion principal
    (2) programa -> . PROGRAMA ID SEMICOLON mult_funcion principal
    (3) programa -> . PROGRAMA ID SEMICOLON vars principal
    (4) programa -> . PROGRAMA ID SEMICOLON principal

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . ID SEMICOLON vars mult_funcion principal
    (2) programa -> PROGRAMA . ID SEMICOLON mult_funcion principal
    (3) programa -> PROGRAMA . ID SEMICOLON vars principal
    (4) programa -> PROGRAMA . ID SEMICOLON principal

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAMA ID . SEMICOLON vars mult_funcion principal
    (2) programa -> PROGRAMA ID . SEMICOLON mult_funcion principal
    (3) programa -> PROGRAMA ID . SEMICOLON vars principal
    (4) programa -> PROGRAMA ID . SEMICOLON principal

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAMA ID SEMICOLON . vars mult_funcion principal
    (2) programa -> PROGRAMA ID SEMICOLON . mult_funcion principal
    (3) programa -> PROGRAMA ID SEMICOLON . vars principal
    (4) programa -> PROGRAMA ID SEMICOLON . principal
    (7) vars -> . VAR vars_aux
    (24) mult_funcion -> . funcion
    (25) mult_funcion -> . funcion mult_funcion
    (5) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque
    (26) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (28) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (32) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func

    VAR             shift and go to state 8
    PRINCIPAL       shift and go to state 10
    FUNCION         shift and go to state 11

    vars                           shift and go to state 5
    mult_funcion                   shift and go to state 6
    principal                      shift and go to state 7
    funcion                        shift and go to state 9

state 5

    (1) programa -> PROGRAMA ID SEMICOLON vars . mult_funcion principal
    (3) programa -> PROGRAMA ID SEMICOLON vars . principal
    (24) mult_funcion -> . funcion
    (25) mult_funcion -> . funcion mult_funcion
    (5) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque
    (26) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (28) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (32) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func

    PRINCIPAL       shift and go to state 10
    FUNCION         shift and go to state 11

    mult_funcion                   shift and go to state 12
    principal                      shift and go to state 13
    funcion                        shift and go to state 9

state 6

    (2) programa -> PROGRAMA ID SEMICOLON mult_funcion . principal
    (5) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque

    PRINCIPAL       shift and go to state 10

    principal                      shift and go to state 14

state 7

    (4) programa -> PROGRAMA ID SEMICOLON principal .

    $end            reduce using rule 4 (programa -> PROGRAMA ID SEMICOLON principal .)


state 8

    (7) vars -> VAR . vars_aux
    (8) vars_aux -> . tipo_simple vars_aux1 SEMICOLON
    (9) vars_aux -> . tipo_simple vars_aux1 SEMICOLON vars_aux
    (16) tipo_simple -> . INT n_save_type
    (17) tipo_simple -> . FLOAT n_save_type
    (18) tipo_simple -> . CHAR n_save_type

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    vars_aux                       shift and go to state 15
    tipo_simple                    shift and go to state 16

state 9

    (24) mult_funcion -> funcion .
    (25) mult_funcion -> funcion . mult_funcion
    (24) mult_funcion -> . funcion
    (25) mult_funcion -> . funcion mult_funcion
    (26) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (28) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> . FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (32) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> . FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func

    PRINCIPAL       reduce using rule 24 (mult_funcion -> funcion .)
    FUNCION         shift and go to state 11

    funcion                        shift and go to state 9
    mult_funcion                   shift and go to state 20

state 10

    (5) principal -> PRINCIPAL . n_register_glob LPAREN RPAREN bloque
    (6) n_register_glob -> .

    LPAREN          reduce using rule 6 (n_register_glob -> .)

    n_register_glob                shift and go to state 21

state 11

    (26) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (28) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> FUNCION . tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func
    (32) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> FUNCION . VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func
    (16) tipo_simple -> . INT n_save_type
    (17) tipo_simple -> . FLOAT n_save_type
    (18) tipo_simple -> . CHAR n_save_type

    VOID            shift and go to state 23
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    tipo_simple                    shift and go to state 22

state 12

    (1) programa -> PROGRAMA ID SEMICOLON vars mult_funcion . principal
    (5) principal -> . PRINCIPAL n_register_glob LPAREN RPAREN bloque

    PRINCIPAL       shift and go to state 10

    principal                      shift and go to state 24

state 13

    (3) programa -> PROGRAMA ID SEMICOLON vars principal .

    $end            reduce using rule 3 (programa -> PROGRAMA ID SEMICOLON vars principal .)


state 14

    (2) programa -> PROGRAMA ID SEMICOLON mult_funcion principal .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON mult_funcion principal .)


state 15

    (7) vars -> VAR vars_aux .

    PRINCIPAL       reduce using rule 7 (vars -> VAR vars_aux .)
    FUNCION         reduce using rule 7 (vars -> VAR vars_aux .)
    LBRACKET        reduce using rule 7 (vars -> VAR vars_aux .)


state 16

    (8) vars_aux -> tipo_simple . vars_aux1 SEMICOLON
    (9) vars_aux -> tipo_simple . vars_aux1 SEMICOLON vars_aux
    (10) vars_aux1 -> . vars_aux2
    (11) vars_aux1 -> . vars_aux2 COMMA vars_aux1
    (12) vars_aux2 -> . ID n_save_var
    (13) vars_aux2 -> . ID LSQUARE CTE_I n_save_array RSQUARE

    ID              shift and go to state 27

    vars_aux1                      shift and go to state 25
    vars_aux2                      shift and go to state 26

state 17

    (16) tipo_simple -> INT . n_save_type
    (19) n_save_type -> .

    ID              reduce using rule 19 (n_save_type -> .)

    n_save_type                    shift and go to state 28

state 18

    (17) tipo_simple -> FLOAT . n_save_type
    (19) n_save_type -> .

    ID              reduce using rule 19 (n_save_type -> .)

    n_save_type                    shift and go to state 29

state 19

    (18) tipo_simple -> CHAR . n_save_type
    (19) n_save_type -> .

    ID              reduce using rule 19 (n_save_type -> .)

    n_save_type                    shift and go to state 30

state 20

    (25) mult_funcion -> funcion mult_funcion .

    PRINCIPAL       reduce using rule 25 (mult_funcion -> funcion mult_funcion .)


state 21

    (5) principal -> PRINCIPAL n_register_glob . LPAREN RPAREN bloque

    LPAREN          shift and go to state 31


state 22

    (26) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple . ID n_register_func LPAREN RPAREN bloque n_endof_func

    ID              shift and go to state 32


state 23

    (28) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (32) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> FUNCION VOID . n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func
    (19) n_save_type -> .

    ID              reduce using rule 19 (n_save_type -> .)

    n_save_type                    shift and go to state 33

state 24

    (1) programa -> PROGRAMA ID SEMICOLON vars mult_funcion principal .

    $end            reduce using rule 1 (programa -> PROGRAMA ID SEMICOLON vars mult_funcion principal .)


state 25

    (8) vars_aux -> tipo_simple vars_aux1 . SEMICOLON
    (9) vars_aux -> tipo_simple vars_aux1 . SEMICOLON vars_aux

    SEMICOLON       shift and go to state 34


state 26

    (10) vars_aux1 -> vars_aux2 .
    (11) vars_aux1 -> vars_aux2 . COMMA vars_aux1

    SEMICOLON       reduce using rule 10 (vars_aux1 -> vars_aux2 .)
    COMMA           shift and go to state 35


state 27

    (12) vars_aux2 -> ID . n_save_var
    (13) vars_aux2 -> ID . LSQUARE CTE_I n_save_array RSQUARE
    (15) n_save_var -> .

    LSQUARE         shift and go to state 37
    COMMA           reduce using rule 15 (n_save_var -> .)
    SEMICOLON       reduce using rule 15 (n_save_var -> .)

    n_save_var                     shift and go to state 36

state 28

    (16) tipo_simple -> INT n_save_type .

    ID              reduce using rule 16 (tipo_simple -> INT n_save_type .)


state 29

    (17) tipo_simple -> FLOAT n_save_type .

    ID              reduce using rule 17 (tipo_simple -> FLOAT n_save_type .)


state 30

    (18) tipo_simple -> CHAR n_save_type .

    ID              reduce using rule 18 (tipo_simple -> CHAR n_save_type .)


state 31

    (5) principal -> PRINCIPAL n_register_glob LPAREN . RPAREN bloque

    RPAREN          shift and go to state 38


state 32

    (26) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID . n_register_func LPAREN RPAREN bloque n_endof_func
    (34) n_register_func -> .

    LPAREN          reduce using rule 34 (n_register_func -> .)

    n_register_func                shift and go to state 39

state 33

    (28) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN param RPAREN bloque n_endof_func
    (32) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type . ID n_register_func LPAREN RPAREN bloque n_endof_func

    ID              shift and go to state 40


state 34

    (8) vars_aux -> tipo_simple vars_aux1 SEMICOLON .
    (9) vars_aux -> tipo_simple vars_aux1 SEMICOLON . vars_aux
    (8) vars_aux -> . tipo_simple vars_aux1 SEMICOLON
    (9) vars_aux -> . tipo_simple vars_aux1 SEMICOLON vars_aux
    (16) tipo_simple -> . INT n_save_type
    (17) tipo_simple -> . FLOAT n_save_type
    (18) tipo_simple -> . CHAR n_save_type

    PRINCIPAL       reduce using rule 8 (vars_aux -> tipo_simple vars_aux1 SEMICOLON .)
    FUNCION         reduce using rule 8 (vars_aux -> tipo_simple vars_aux1 SEMICOLON .)
    LBRACKET        reduce using rule 8 (vars_aux -> tipo_simple vars_aux1 SEMICOLON .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    tipo_simple                    shift and go to state 16
    vars_aux                       shift and go to state 41

state 35

    (11) vars_aux1 -> vars_aux2 COMMA . vars_aux1
    (10) vars_aux1 -> . vars_aux2
    (11) vars_aux1 -> . vars_aux2 COMMA vars_aux1
    (12) vars_aux2 -> . ID n_save_var
    (13) vars_aux2 -> . ID LSQUARE CTE_I n_save_array RSQUARE

    ID              shift and go to state 27

    vars_aux2                      shift and go to state 26
    vars_aux1                      shift and go to state 42

state 36

    (12) vars_aux2 -> ID n_save_var .

    COMMA           reduce using rule 12 (vars_aux2 -> ID n_save_var .)
    SEMICOLON       reduce using rule 12 (vars_aux2 -> ID n_save_var .)


state 37

    (13) vars_aux2 -> ID LSQUARE . CTE_I n_save_array RSQUARE

    CTE_I           shift and go to state 43


state 38

    (5) principal -> PRINCIPAL n_register_glob LPAREN RPAREN . bloque
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 44

state 39

    (26) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN param RPAREN vars bloque n_endof_func
    (27) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN param RPAREN bloque n_endof_func
    (30) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN RPAREN vars bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID n_register_func . LPAREN RPAREN bloque n_endof_func

    LPAREN          shift and go to state 46


state 40

    (28) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN param RPAREN bloque n_endof_func
    (32) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID . n_register_func LPAREN RPAREN bloque n_endof_func
    (34) n_register_func -> .

    LPAREN          reduce using rule 34 (n_register_func -> .)

    n_register_func                shift and go to state 47

state 41

    (9) vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .

    PRINCIPAL       reduce using rule 9 (vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .)
    FUNCION         reduce using rule 9 (vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .)
    LBRACKET        reduce using rule 9 (vars_aux -> tipo_simple vars_aux1 SEMICOLON vars_aux .)


state 42

    (11) vars_aux1 -> vars_aux2 COMMA vars_aux1 .

    SEMICOLON       reduce using rule 11 (vars_aux1 -> vars_aux2 COMMA vars_aux1 .)


state 43

    (13) vars_aux2 -> ID LSQUARE CTE_I . n_save_array RSQUARE
    (14) n_save_array -> .

    RSQUARE         reduce using rule 14 (n_save_array -> .)

    n_save_array                   shift and go to state 48

state 44

    (5) principal -> PRINCIPAL n_register_glob LPAREN RPAREN bloque .

    $end            reduce using rule 5 (principal -> PRINCIPAL n_register_glob LPAREN RPAREN bloque .)


state 45

    (40) bloque -> LBRACKET . mult_estatutos RBRACKET
    (41) bloque -> LBRACKET . empty RBRACKET
    (42) mult_estatutos -> . estatuto
    (43) mult_estatutos -> . estatuto mult_estatutos
    (20) empty -> .
    (44) estatuto -> . asigna SEMICOLON
    (45) estatuto -> . llamada SEMICOLON
    (46) estatuto -> . lee
    (47) estatuto -> . escribe
    (48) estatuto -> . condicion
    (49) estatuto -> . ciclo_w
    (50) estatuto -> . retorno
    (51) estatuto -> . ciclo_f
    (52) asigna -> . mult_asigna
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (64) lee -> . LEE LPAREN variable RPAREN
    (65) escribe -> . ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
    (66) escribe -> . ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON
    (106) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (107) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (111) ciclo_w -> . MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (118) retorno -> . REGRESA mult_exp SEMICOLON
    (115) ciclo_f -> . DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (53) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal

    RBRACKET        reduce using rule 20 (empty -> .)
    ID              shift and go to state 61
    LEE             shift and go to state 62
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    REGRESA         shift and go to state 67
    DESDE           shift and go to state 68

    mult_estatutos                 shift and go to state 49
    empty                          shift and go to state 50
    estatuto                       shift and go to state 51
    asigna                         shift and go to state 52
    llamada                        shift and go to state 53
    lee                            shift and go to state 54
    escribe                        shift and go to state 55
    condicion                      shift and go to state 56
    ciclo_w                        shift and go to state 57
    retorno                        shift and go to state 58
    ciclo_f                        shift and go to state 59
    mult_asigna                    shift and go to state 60
    variable                       shift and go to state 63

state 46

    (26) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . param RPAREN vars bloque n_endof_func
    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . param RPAREN bloque n_endof_func
    (30) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . RPAREN vars bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN . RPAREN bloque n_endof_func
    (35) param -> . tipo_simple param_aux1
    (16) tipo_simple -> . INT n_save_type
    (17) tipo_simple -> . FLOAT n_save_type
    (18) tipo_simple -> . CHAR n_save_type

    RPAREN          shift and go to state 71
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    tipo_simple                    shift and go to state 69
    param                          shift and go to state 70

state 47

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN param RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN param RPAREN bloque n_endof_func
    (32) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN RPAREN vars bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID n_register_func . LPAREN RPAREN bloque n_endof_func

    LPAREN          shift and go to state 72


state 48

    (13) vars_aux2 -> ID LSQUARE CTE_I n_save_array . RSQUARE

    RSQUARE         shift and go to state 73


state 49

    (40) bloque -> LBRACKET mult_estatutos . RBRACKET

    RBRACKET        shift and go to state 74


state 50

    (41) bloque -> LBRACKET empty . RBRACKET

    RBRACKET        shift and go to state 75


state 51

    (42) mult_estatutos -> estatuto .
    (43) mult_estatutos -> estatuto . mult_estatutos
    (42) mult_estatutos -> . estatuto
    (43) mult_estatutos -> . estatuto mult_estatutos
    (44) estatuto -> . asigna SEMICOLON
    (45) estatuto -> . llamada SEMICOLON
    (46) estatuto -> . lee
    (47) estatuto -> . escribe
    (48) estatuto -> . condicion
    (49) estatuto -> . ciclo_w
    (50) estatuto -> . retorno
    (51) estatuto -> . ciclo_f
    (52) asigna -> . mult_asigna
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (64) lee -> . LEE LPAREN variable RPAREN
    (65) escribe -> . ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
    (66) escribe -> . ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON
    (106) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (107) condicion -> . SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (111) ciclo_w -> . MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (118) retorno -> . REGRESA mult_exp SEMICOLON
    (115) ciclo_f -> . DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (53) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal

    RBRACKET        reduce using rule 42 (mult_estatutos -> estatuto .)
    ID              shift and go to state 61
    LEE             shift and go to state 62
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    REGRESA         shift and go to state 67
    DESDE           shift and go to state 68

    estatuto                       shift and go to state 51
    mult_estatutos                 shift and go to state 76
    asigna                         shift and go to state 52
    llamada                        shift and go to state 53
    lee                            shift and go to state 54
    escribe                        shift and go to state 55
    condicion                      shift and go to state 56
    ciclo_w                        shift and go to state 57
    retorno                        shift and go to state 58
    ciclo_f                        shift and go to state 59
    mult_asigna                    shift and go to state 60
    variable                       shift and go to state 63

state 52

    (44) estatuto -> asigna . SEMICOLON

    SEMICOLON       shift and go to state 77


state 53

    (45) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 78


state 54

    (46) estatuto -> lee .

    ID              reduce using rule 46 (estatuto -> lee .)
    LEE             reduce using rule 46 (estatuto -> lee .)
    ESCRIBE         reduce using rule 46 (estatuto -> lee .)
    SI              reduce using rule 46 (estatuto -> lee .)
    MIENTRAS        reduce using rule 46 (estatuto -> lee .)
    REGRESA         reduce using rule 46 (estatuto -> lee .)
    DESDE           reduce using rule 46 (estatuto -> lee .)
    RBRACKET        reduce using rule 46 (estatuto -> lee .)


state 55

    (47) estatuto -> escribe .

    ID              reduce using rule 47 (estatuto -> escribe .)
    LEE             reduce using rule 47 (estatuto -> escribe .)
    ESCRIBE         reduce using rule 47 (estatuto -> escribe .)
    SI              reduce using rule 47 (estatuto -> escribe .)
    MIENTRAS        reduce using rule 47 (estatuto -> escribe .)
    REGRESA         reduce using rule 47 (estatuto -> escribe .)
    DESDE           reduce using rule 47 (estatuto -> escribe .)
    RBRACKET        reduce using rule 47 (estatuto -> escribe .)


state 56

    (48) estatuto -> condicion .

    ID              reduce using rule 48 (estatuto -> condicion .)
    LEE             reduce using rule 48 (estatuto -> condicion .)
    ESCRIBE         reduce using rule 48 (estatuto -> condicion .)
    SI              reduce using rule 48 (estatuto -> condicion .)
    MIENTRAS        reduce using rule 48 (estatuto -> condicion .)
    REGRESA         reduce using rule 48 (estatuto -> condicion .)
    DESDE           reduce using rule 48 (estatuto -> condicion .)
    RBRACKET        reduce using rule 48 (estatuto -> condicion .)


state 57

    (49) estatuto -> ciclo_w .

    ID              reduce using rule 49 (estatuto -> ciclo_w .)
    LEE             reduce using rule 49 (estatuto -> ciclo_w .)
    ESCRIBE         reduce using rule 49 (estatuto -> ciclo_w .)
    SI              reduce using rule 49 (estatuto -> ciclo_w .)
    MIENTRAS        reduce using rule 49 (estatuto -> ciclo_w .)
    REGRESA         reduce using rule 49 (estatuto -> ciclo_w .)
    DESDE           reduce using rule 49 (estatuto -> ciclo_w .)
    RBRACKET        reduce using rule 49 (estatuto -> ciclo_w .)


state 58

    (50) estatuto -> retorno .

    ID              reduce using rule 50 (estatuto -> retorno .)
    LEE             reduce using rule 50 (estatuto -> retorno .)
    ESCRIBE         reduce using rule 50 (estatuto -> retorno .)
    SI              reduce using rule 50 (estatuto -> retorno .)
    MIENTRAS        reduce using rule 50 (estatuto -> retorno .)
    REGRESA         reduce using rule 50 (estatuto -> retorno .)
    DESDE           reduce using rule 50 (estatuto -> retorno .)
    RBRACKET        reduce using rule 50 (estatuto -> retorno .)


state 59

    (51) estatuto -> ciclo_f .

    ID              reduce using rule 51 (estatuto -> ciclo_f .)
    LEE             reduce using rule 51 (estatuto -> ciclo_f .)
    ESCRIBE         reduce using rule 51 (estatuto -> ciclo_f .)
    SI              reduce using rule 51 (estatuto -> ciclo_f .)
    MIENTRAS        reduce using rule 51 (estatuto -> ciclo_f .)
    REGRESA         reduce using rule 51 (estatuto -> ciclo_f .)
    DESDE           reduce using rule 51 (estatuto -> ciclo_f .)
    RBRACKET        reduce using rule 51 (estatuto -> ciclo_f .)


state 60

    (52) asigna -> mult_asigna .

    SEMICOLON       reduce using rule 52 (asigna -> mult_asigna .)
    HASTA           reduce using rule 52 (asigna -> mult_asigna .)


state 61

    (59) llamada -> ID . n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> ID . n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (21) variable -> ID . LSQUARE mult_exp RSQUARE
    (22) variable -> ID . p_n_getVarVal
    (63) n_verify_func -> .
    (23) p_n_getVarVal -> .

    LSQUARE         shift and go to state 80
    LPAREN          reduce using rule 63 (n_verify_func -> .)
    EQUAL           reduce using rule 23 (p_n_getVarVal -> .)

    n_verify_func                  shift and go to state 79
    p_n_getVarVal                  shift and go to state 81

state 62

    (64) lee -> LEE . LPAREN variable RPAREN

    LPAREN          shift and go to state 82


state 63

    (53) mult_asigna -> variable . EQUAL n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> variable . EQUAL n_Operador mult_asigna n_asignQuad

    EQUAL           shift and go to state 83


state 64

    (65) escribe -> ESCRIBE . LPAREN mult_exp n_escribeExp RPAREN SEMICOLON
    (66) escribe -> ESCRIBE . LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON

    LPAREN          shift and go to state 84


state 65

    (106) condicion -> SI . LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (107) condicion -> SI . LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad

    LPAREN          shift and go to state 85


state 66

    (111) ciclo_w -> MIENTRAS . n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (112) n_startCicle -> .

    LPAREN          reduce using rule 112 (n_startCicle -> .)

    n_startCicle                   shift and go to state 86

state 67

    (118) retorno -> REGRESA . mult_exp SEMICOLON
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 87
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 68

    (115) ciclo_f -> DESDE . asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (52) asigna -> . mult_asigna
    (53) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal

    ID              shift and go to state 102

    asigna                         shift and go to state 101
    mult_asigna                    shift and go to state 60
    variable                       shift and go to state 63

state 69

    (35) param -> tipo_simple . param_aux1
    (36) param_aux1 -> . ID save_param
    (37) param_aux1 -> . ID save_param COMMA param

    ID              shift and go to state 104

    param_aux1                     shift and go to state 103

state 70

    (26) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param . RPAREN vars bloque n_endof_func
    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param . RPAREN bloque n_endof_func

    RPAREN          shift and go to state 105


state 71

    (30) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN . vars bloque n_endof_func
    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN . bloque n_endof_func
    (7) vars -> . VAR vars_aux
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 8
    LBRACKET        shift and go to state 45

    vars                           shift and go to state 106
    bloque                         shift and go to state 107

state 72

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . param RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . param RPAREN bloque n_endof_func
    (32) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . RPAREN vars bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN . RPAREN bloque n_endof_func
    (35) param -> . tipo_simple param_aux1
    (16) tipo_simple -> . INT n_save_type
    (17) tipo_simple -> . FLOAT n_save_type
    (18) tipo_simple -> . CHAR n_save_type

    RPAREN          shift and go to state 109
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    param                          shift and go to state 108
    tipo_simple                    shift and go to state 69

state 73

    (13) vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE .

    COMMA           reduce using rule 13 (vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE .)
    SEMICOLON       reduce using rule 13 (vars_aux2 -> ID LSQUARE CTE_I n_save_array RSQUARE .)


state 74

    (40) bloque -> LBRACKET mult_estatutos RBRACKET .

    $end            reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    FUNCION         reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    PRINCIPAL       reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SINO            reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    ID              reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    LEE             reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    ESCRIBE         reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    SI              reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    MIENTRAS        reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    REGRESA         reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    DESDE           reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)
    RBRACKET        reduce using rule 40 (bloque -> LBRACKET mult_estatutos RBRACKET .)


state 75

    (41) bloque -> LBRACKET empty RBRACKET .

    $end            reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    FUNCION         reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    PRINCIPAL       reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    SINO            reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    ID              reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    LEE             reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    ESCRIBE         reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    SI              reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    MIENTRAS        reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    REGRESA         reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    DESDE           reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)
    RBRACKET        reduce using rule 41 (bloque -> LBRACKET empty RBRACKET .)


state 76

    (43) mult_estatutos -> estatuto mult_estatutos .

    RBRACKET        reduce using rule 43 (mult_estatutos -> estatuto mult_estatutos .)


state 77

    (44) estatuto -> asigna SEMICOLON .

    ID              reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    LEE             reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    ESCRIBE         reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    SI              reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    MIENTRAS        reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    REGRESA         reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    DESDE           reduce using rule 44 (estatuto -> asigna SEMICOLON .)
    RBRACKET        reduce using rule 44 (estatuto -> asigna SEMICOLON .)


state 78

    (45) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    LEE             reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    ESCRIBE         reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    SI              reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    MIENTRAS        reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    REGRESA         reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    DESDE           reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    RBRACKET        reduce using rule 45 (estatuto -> llamada SEMICOLON .)


state 79

    (59) llamada -> ID n_verify_func . LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> ID n_verify_func . LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 110


state 80

    (21) variable -> ID LSQUARE . mult_exp RSQUARE
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 111
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 81

    (22) variable -> ID p_n_getVarVal .

    EQUAL           reduce using rule 22 (variable -> ID p_n_getVarVal .)
    MULT            reduce using rule 22 (variable -> ID p_n_getVarVal .)
    DIV             reduce using rule 22 (variable -> ID p_n_getVarVal .)
    PLUS            reduce using rule 22 (variable -> ID p_n_getVarVal .)
    MINUS           reduce using rule 22 (variable -> ID p_n_getVarVal .)
    LESSTHAN        reduce using rule 22 (variable -> ID p_n_getVarVal .)
    LESSEQUAL       reduce using rule 22 (variable -> ID p_n_getVarVal .)
    GREATERTHAN     reduce using rule 22 (variable -> ID p_n_getVarVal .)
    GREATEREQUAL    reduce using rule 22 (variable -> ID p_n_getVarVal .)
    SAME            reduce using rule 22 (variable -> ID p_n_getVarVal .)
    NOEQUAL         reduce using rule 22 (variable -> ID p_n_getVarVal .)
    AND             reduce using rule 22 (variable -> ID p_n_getVarVal .)
    OR              reduce using rule 22 (variable -> ID p_n_getVarVal .)
    COMMA           reduce using rule 22 (variable -> ID p_n_getVarVal .)
    SEMICOLON       reduce using rule 22 (variable -> ID p_n_getVarVal .)
    RSQUARE         reduce using rule 22 (variable -> ID p_n_getVarVal .)
    RPAREN          reduce using rule 22 (variable -> ID p_n_getVarVal .)
    HASTA           reduce using rule 22 (variable -> ID p_n_getVarVal .)
    HACER           reduce using rule 22 (variable -> ID p_n_getVarVal .)


state 82

    (64) lee -> LEE LPAREN . variable RPAREN
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal

    ID              shift and go to state 102

    variable                       shift and go to state 112

state 83

    (53) mult_asigna -> variable EQUAL . n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> variable EQUAL . n_Operador mult_asigna n_asignQuad
    (94) n_Operador -> .

    ID              reduce using rule 94 (n_Operador -> .)
    LPAREN          reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 113

state 84

    (65) escribe -> ESCRIBE LPAREN . mult_exp n_escribeExp RPAREN SEMICOLON
    (66) escribe -> ESCRIBE LPAREN . mult_cte_s n_escribeExp RPAREN SEMICOLON
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (68) mult_cte_s -> . CTE_S
    (69) mult_cte_s -> . CTE_S COMMA mult_cte_s
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    CTE_S           shift and go to state 116
    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 114
    mult_cte_s                     shift and go to state 115
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 85

    (106) condicion -> SI LPAREN . mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (107) condicion -> SI LPAREN . mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 117
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 86

    (111) ciclo_w -> MIENTRAS n_startCicle . LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile

    LPAREN          shift and go to state 118


state 87

    (118) retorno -> REGRESA mult_exp . SEMICOLON

    SEMICOLON       shift and go to state 119


state 88

    (70) mult_exp -> exp .
    (71) mult_exp -> exp . COMMA mult_exp

    SEMICOLON       reduce using rule 70 (mult_exp -> exp .)
    RSQUARE         reduce using rule 70 (mult_exp -> exp .)
    RPAREN          reduce using rule 70 (mult_exp -> exp .)
    HASTA           reduce using rule 70 (mult_exp -> exp .)
    HACER           reduce using rule 70 (mult_exp -> exp .)
    COMMA           shift and go to state 120


state 89

    (72) exp -> t_exp . n_orQuad
    (73) exp -> t_exp . n_orQuad OR n_Operador exp
    (74) n_orQuad -> .

    OR              reduce using rule 74 (n_orQuad -> .)
    COMMA           reduce using rule 74 (n_orQuad -> .)
    SEMICOLON       reduce using rule 74 (n_orQuad -> .)
    RSQUARE         reduce using rule 74 (n_orQuad -> .)
    RPAREN          reduce using rule 74 (n_orQuad -> .)
    HASTA           reduce using rule 74 (n_orQuad -> .)
    HACER           reduce using rule 74 (n_orQuad -> .)

    n_orQuad                       shift and go to state 121

state 90

    (75) t_exp -> g_exp . n_andQuad
    (76) t_exp -> g_exp . n_andQuad AND n_Operador t_exp
    (77) n_andQuad -> .

    AND             reduce using rule 77 (n_andQuad -> .)
    OR              reduce using rule 77 (n_andQuad -> .)
    COMMA           reduce using rule 77 (n_andQuad -> .)
    SEMICOLON       reduce using rule 77 (n_andQuad -> .)
    RSQUARE         reduce using rule 77 (n_andQuad -> .)
    RPAREN          reduce using rule 77 (n_andQuad -> .)
    HASTA           reduce using rule 77 (n_andQuad -> .)
    HACER           reduce using rule 77 (n_andQuad -> .)

    n_andQuad                      shift and go to state 122

state 91

    (78) g_exp -> m_exp . n_compareQuad
    (79) g_exp -> m_exp . n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> m_exp . n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> m_exp . n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> m_exp . n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> m_exp . n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> m_exp . n_compareQuad NOEQUAL n_Operador g_exp
    (85) n_compareQuad -> .

    LESSTHAN        reduce using rule 85 (n_compareQuad -> .)
    LESSEQUAL       reduce using rule 85 (n_compareQuad -> .)
    GREATERTHAN     reduce using rule 85 (n_compareQuad -> .)
    GREATEREQUAL    reduce using rule 85 (n_compareQuad -> .)
    SAME            reduce using rule 85 (n_compareQuad -> .)
    NOEQUAL         reduce using rule 85 (n_compareQuad -> .)
    AND             reduce using rule 85 (n_compareQuad -> .)
    OR              reduce using rule 85 (n_compareQuad -> .)
    COMMA           reduce using rule 85 (n_compareQuad -> .)
    SEMICOLON       reduce using rule 85 (n_compareQuad -> .)
    RSQUARE         reduce using rule 85 (n_compareQuad -> .)
    RPAREN          reduce using rule 85 (n_compareQuad -> .)
    HASTA           reduce using rule 85 (n_compareQuad -> .)
    HACER           reduce using rule 85 (n_compareQuad -> .)

    n_compareQuad                  shift and go to state 123

state 92

    (86) m_exp -> t . n_sumQuad
    (87) m_exp -> t . n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> t . n_sumQuad MINUS n_Operador m_exp
    (89) n_sumQuad -> .

    PLUS            reduce using rule 89 (n_sumQuad -> .)
    MINUS           reduce using rule 89 (n_sumQuad -> .)
    LESSTHAN        reduce using rule 89 (n_sumQuad -> .)
    LESSEQUAL       reduce using rule 89 (n_sumQuad -> .)
    GREATERTHAN     reduce using rule 89 (n_sumQuad -> .)
    GREATEREQUAL    reduce using rule 89 (n_sumQuad -> .)
    SAME            reduce using rule 89 (n_sumQuad -> .)
    NOEQUAL         reduce using rule 89 (n_sumQuad -> .)
    AND             reduce using rule 89 (n_sumQuad -> .)
    OR              reduce using rule 89 (n_sumQuad -> .)
    COMMA           reduce using rule 89 (n_sumQuad -> .)
    SEMICOLON       reduce using rule 89 (n_sumQuad -> .)
    RSQUARE         reduce using rule 89 (n_sumQuad -> .)
    RPAREN          reduce using rule 89 (n_sumQuad -> .)
    HASTA           reduce using rule 89 (n_sumQuad -> .)
    HACER           reduce using rule 89 (n_sumQuad -> .)

    n_sumQuad                      shift and go to state 124

state 93

    (90) t -> f . n_multQuad
    (91) t -> f . n_multQuad MULT n_Operador t
    (92) t -> f . n_multQuad DIV n_Operador t
    (93) n_multQuad -> .

    MULT            reduce using rule 93 (n_multQuad -> .)
    DIV             reduce using rule 93 (n_multQuad -> .)
    PLUS            reduce using rule 93 (n_multQuad -> .)
    MINUS           reduce using rule 93 (n_multQuad -> .)
    LESSTHAN        reduce using rule 93 (n_multQuad -> .)
    LESSEQUAL       reduce using rule 93 (n_multQuad -> .)
    GREATERTHAN     reduce using rule 93 (n_multQuad -> .)
    GREATEREQUAL    reduce using rule 93 (n_multQuad -> .)
    SAME            reduce using rule 93 (n_multQuad -> .)
    NOEQUAL         reduce using rule 93 (n_multQuad -> .)
    AND             reduce using rule 93 (n_multQuad -> .)
    OR              reduce using rule 93 (n_multQuad -> .)
    COMMA           reduce using rule 93 (n_multQuad -> .)
    SEMICOLON       reduce using rule 93 (n_multQuad -> .)
    RSQUARE         reduce using rule 93 (n_multQuad -> .)
    RPAREN          reduce using rule 93 (n_multQuad -> .)
    HASTA           reduce using rule 93 (n_multQuad -> .)
    HACER           reduce using rule 93 (n_multQuad -> .)

    n_multQuad                     shift and go to state 125

state 94

    (95) f -> LPAREN . n_FF mult_exp RPAREN n_FF
    (105) n_FF -> .

    LPAREN          reduce using rule 105 (n_FF -> .)
    ID              reduce using rule 105 (n_FF -> .)
    CTE_I           reduce using rule 105 (n_FF -> .)
    CTE_F           reduce using rule 105 (n_FF -> .)
    CTE_C           reduce using rule 105 (n_FF -> .)

    n_FF                           shift and go to state 126

state 95

    (96) f -> n_tempTypeI . CTE_I n_directPrint

    CTE_I           shift and go to state 127


state 96

    (97) f -> n_tempTypeF . CTE_F n_directPrint

    CTE_F           shift and go to state 128


state 97

    (98) f -> n_tempTypeC . CTE_C n_directPrint

    CTE_C           shift and go to state 129


state 98

    (99) f -> variable .

    MULT            reduce using rule 99 (f -> variable .)
    DIV             reduce using rule 99 (f -> variable .)
    PLUS            reduce using rule 99 (f -> variable .)
    MINUS           reduce using rule 99 (f -> variable .)
    LESSTHAN        reduce using rule 99 (f -> variable .)
    LESSEQUAL       reduce using rule 99 (f -> variable .)
    GREATERTHAN     reduce using rule 99 (f -> variable .)
    GREATEREQUAL    reduce using rule 99 (f -> variable .)
    SAME            reduce using rule 99 (f -> variable .)
    NOEQUAL         reduce using rule 99 (f -> variable .)
    AND             reduce using rule 99 (f -> variable .)
    OR              reduce using rule 99 (f -> variable .)
    COMMA           reduce using rule 99 (f -> variable .)
    SEMICOLON       reduce using rule 99 (f -> variable .)
    RSQUARE         reduce using rule 99 (f -> variable .)
    RPAREN          reduce using rule 99 (f -> variable .)
    HASTA           reduce using rule 99 (f -> variable .)
    HACER           reduce using rule 99 (f -> variable .)


state 99

    (100) f -> llamada .

    MULT            reduce using rule 100 (f -> llamada .)
    DIV             reduce using rule 100 (f -> llamada .)
    PLUS            reduce using rule 100 (f -> llamada .)
    MINUS           reduce using rule 100 (f -> llamada .)
    LESSTHAN        reduce using rule 100 (f -> llamada .)
    LESSEQUAL       reduce using rule 100 (f -> llamada .)
    GREATERTHAN     reduce using rule 100 (f -> llamada .)
    GREATEREQUAL    reduce using rule 100 (f -> llamada .)
    SAME            reduce using rule 100 (f -> llamada .)
    NOEQUAL         reduce using rule 100 (f -> llamada .)
    AND             reduce using rule 100 (f -> llamada .)
    OR              reduce using rule 100 (f -> llamada .)
    COMMA           reduce using rule 100 (f -> llamada .)
    SEMICOLON       reduce using rule 100 (f -> llamada .)
    RSQUARE         reduce using rule 100 (f -> llamada .)
    RPAREN          reduce using rule 100 (f -> llamada .)
    HASTA           reduce using rule 100 (f -> llamada .)
    HACER           reduce using rule 100 (f -> llamada .)


state 100

    (21) variable -> ID . LSQUARE mult_exp RSQUARE
    (22) variable -> ID . p_n_getVarVal
    (59) llamada -> ID . n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> ID . n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action
    (23) p_n_getVarVal -> .
    (63) n_verify_func -> .

    LSQUARE         shift and go to state 80
    MULT            reduce using rule 23 (p_n_getVarVal -> .)
    DIV             reduce using rule 23 (p_n_getVarVal -> .)
    PLUS            reduce using rule 23 (p_n_getVarVal -> .)
    MINUS           reduce using rule 23 (p_n_getVarVal -> .)
    LESSTHAN        reduce using rule 23 (p_n_getVarVal -> .)
    LESSEQUAL       reduce using rule 23 (p_n_getVarVal -> .)
    GREATERTHAN     reduce using rule 23 (p_n_getVarVal -> .)
    GREATEREQUAL    reduce using rule 23 (p_n_getVarVal -> .)
    SAME            reduce using rule 23 (p_n_getVarVal -> .)
    NOEQUAL         reduce using rule 23 (p_n_getVarVal -> .)
    AND             reduce using rule 23 (p_n_getVarVal -> .)
    OR              reduce using rule 23 (p_n_getVarVal -> .)
    COMMA           reduce using rule 23 (p_n_getVarVal -> .)
    SEMICOLON       reduce using rule 23 (p_n_getVarVal -> .)
    RSQUARE         reduce using rule 23 (p_n_getVarVal -> .)
    RPAREN          reduce using rule 23 (p_n_getVarVal -> .)
    EQUAL           reduce using rule 23 (p_n_getVarVal -> .)
    HASTA           reduce using rule 23 (p_n_getVarVal -> .)
    HACER           reduce using rule 23 (p_n_getVarVal -> .)
    LPAREN          reduce using rule 63 (n_verify_func -> .)

    p_n_getVarVal                  shift and go to state 81
    n_verify_func                  shift and go to state 79

state 101

    (115) ciclo_f -> DESDE asigna . n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor
    (112) n_startCicle -> .

    HASTA           reduce using rule 112 (n_startCicle -> .)

    n_startCicle                   shift and go to state 130

state 102

    (21) variable -> ID . LSQUARE mult_exp RSQUARE
    (22) variable -> ID . p_n_getVarVal
    (23) p_n_getVarVal -> .

    LSQUARE         shift and go to state 80
    EQUAL           reduce using rule 23 (p_n_getVarVal -> .)
    RPAREN          reduce using rule 23 (p_n_getVarVal -> .)

    p_n_getVarVal                  shift and go to state 81

state 103

    (35) param -> tipo_simple param_aux1 .

    RPAREN          reduce using rule 35 (param -> tipo_simple param_aux1 .)


state 104

    (36) param_aux1 -> ID . save_param
    (37) param_aux1 -> ID . save_param COMMA param
    (38) save_param -> .

    COMMA           reduce using rule 38 (save_param -> .)
    RPAREN          reduce using rule 38 (save_param -> .)

    save_param                     shift and go to state 131

state 105

    (26) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN . vars bloque n_endof_func
    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN . bloque n_endof_func
    (7) vars -> . VAR vars_aux
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 8
    LBRACKET        shift and go to state 45

    vars                           shift and go to state 132
    bloque                         shift and go to state 133

state 106

    (30) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars . bloque n_endof_func
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 134

state 107

    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 135

state 108

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param . RPAREN vars bloque n_endof_func
    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param . RPAREN bloque n_endof_func

    RPAREN          shift and go to state 136


state 109

    (32) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN . vars bloque n_endof_func
    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN . bloque n_endof_func
    (7) vars -> . VAR vars_aux
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 8
    LBRACKET        shift and go to state 45

    vars                           shift and go to state 137
    bloque                         shift and go to state 138

state 110

    (59) llamada -> ID n_verify_func LPAREN . n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> ID n_verify_func LPAREN . n_start_pcounter RPAREN n_last_param_action
    (62) n_start_pcounter -> .

    RPAREN          reduce using rule 62 (n_start_pcounter -> .)
    LPAREN          reduce using rule 62 (n_start_pcounter -> .)
    ID              reduce using rule 62 (n_start_pcounter -> .)
    CTE_I           reduce using rule 62 (n_start_pcounter -> .)
    CTE_F           reduce using rule 62 (n_start_pcounter -> .)
    CTE_C           reduce using rule 62 (n_start_pcounter -> .)

    n_start_pcounter               shift and go to state 139

state 111

    (21) variable -> ID LSQUARE mult_exp . RSQUARE

    RSQUARE         shift and go to state 140


state 112

    (64) lee -> LEE LPAREN variable . RPAREN

    RPAREN          shift and go to state 141


state 113

    (53) mult_asigna -> variable EQUAL n_Operador . mult_exp n_asignQuad
    (54) mult_asigna -> variable EQUAL n_Operador . mult_asigna n_asignQuad
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (53) mult_asigna -> . variable EQUAL n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> . variable EQUAL n_Operador mult_asigna n_asignQuad
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    ID              shift and go to state 100
    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)

    variable                       shift and go to state 142
    mult_exp                       shift and go to state 143
    mult_asigna                    shift and go to state 144
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    llamada                        shift and go to state 99

state 114

    (65) escribe -> ESCRIBE LPAREN mult_exp . n_escribeExp RPAREN SEMICOLON
    (67) n_escribeExp -> .

    RPAREN          reduce using rule 67 (n_escribeExp -> .)

    n_escribeExp                   shift and go to state 145

state 115

    (66) escribe -> ESCRIBE LPAREN mult_cte_s . n_escribeExp RPAREN SEMICOLON
    (67) n_escribeExp -> .

    RPAREN          reduce using rule 67 (n_escribeExp -> .)

    n_escribeExp                   shift and go to state 146

state 116

    (68) mult_cte_s -> CTE_S .
    (69) mult_cte_s -> CTE_S . COMMA mult_cte_s

    RPAREN          reduce using rule 68 (mult_cte_s -> CTE_S .)
    COMMA           shift and go to state 147


state 117

    (106) condicion -> SI LPAREN mult_exp . RPAREN n_ifQuad ENTONCES bloque n_endIfQuad
    (107) condicion -> SI LPAREN mult_exp . RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad

    RPAREN          shift and go to state 148


state 118

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN . mult_exp RPAREN n_evalExp HAZ bloque n_endWhile
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 149
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 119

    (118) retorno -> REGRESA mult_exp SEMICOLON .

    ID              reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    LEE             reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    ESCRIBE         reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    SI              reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    MIENTRAS        reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    REGRESA         reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    DESDE           reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)
    RBRACKET        reduce using rule 118 (retorno -> REGRESA mult_exp SEMICOLON .)


state 120

    (71) mult_exp -> exp COMMA . mult_exp
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    exp                            shift and go to state 88
    mult_exp                       shift and go to state 150
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 121

    (72) exp -> t_exp n_orQuad .
    (73) exp -> t_exp n_orQuad . OR n_Operador exp

    COMMA           reduce using rule 72 (exp -> t_exp n_orQuad .)
    SEMICOLON       reduce using rule 72 (exp -> t_exp n_orQuad .)
    RSQUARE         reduce using rule 72 (exp -> t_exp n_orQuad .)
    RPAREN          reduce using rule 72 (exp -> t_exp n_orQuad .)
    HASTA           reduce using rule 72 (exp -> t_exp n_orQuad .)
    HACER           reduce using rule 72 (exp -> t_exp n_orQuad .)
    OR              shift and go to state 151


state 122

    (75) t_exp -> g_exp n_andQuad .
    (76) t_exp -> g_exp n_andQuad . AND n_Operador t_exp

    OR              reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    COMMA           reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    SEMICOLON       reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    RSQUARE         reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    RPAREN          reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    HASTA           reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    HACER           reduce using rule 75 (t_exp -> g_exp n_andQuad .)
    AND             shift and go to state 152


state 123

    (78) g_exp -> m_exp n_compareQuad .
    (79) g_exp -> m_exp n_compareQuad . LESSTHAN n_Operador g_exp
    (80) g_exp -> m_exp n_compareQuad . LESSEQUAL n_Operador g_exp
    (81) g_exp -> m_exp n_compareQuad . GREATERTHAN n_Operador g_exp
    (82) g_exp -> m_exp n_compareQuad . GREATEREQUAL n_Operador g_exp
    (83) g_exp -> m_exp n_compareQuad . SAME n_Operador g_exp
    (84) g_exp -> m_exp n_compareQuad . NOEQUAL n_Operador g_exp

    AND             reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    OR              reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    COMMA           reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    SEMICOLON       reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    RSQUARE         reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    RPAREN          reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    HASTA           reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    HACER           reduce using rule 78 (g_exp -> m_exp n_compareQuad .)
    LESSTHAN        shift and go to state 153
    LESSEQUAL       shift and go to state 154
    GREATERTHAN     shift and go to state 155
    GREATEREQUAL    shift and go to state 156
    SAME            shift and go to state 157
    NOEQUAL         shift and go to state 158


state 124

    (86) m_exp -> t n_sumQuad .
    (87) m_exp -> t n_sumQuad . PLUS n_Operador m_exp
    (88) m_exp -> t n_sumQuad . MINUS n_Operador m_exp

    LESSTHAN        reduce using rule 86 (m_exp -> t n_sumQuad .)
    LESSEQUAL       reduce using rule 86 (m_exp -> t n_sumQuad .)
    GREATERTHAN     reduce using rule 86 (m_exp -> t n_sumQuad .)
    GREATEREQUAL    reduce using rule 86 (m_exp -> t n_sumQuad .)
    SAME            reduce using rule 86 (m_exp -> t n_sumQuad .)
    NOEQUAL         reduce using rule 86 (m_exp -> t n_sumQuad .)
    AND             reduce using rule 86 (m_exp -> t n_sumQuad .)
    OR              reduce using rule 86 (m_exp -> t n_sumQuad .)
    COMMA           reduce using rule 86 (m_exp -> t n_sumQuad .)
    SEMICOLON       reduce using rule 86 (m_exp -> t n_sumQuad .)
    RSQUARE         reduce using rule 86 (m_exp -> t n_sumQuad .)
    RPAREN          reduce using rule 86 (m_exp -> t n_sumQuad .)
    HASTA           reduce using rule 86 (m_exp -> t n_sumQuad .)
    HACER           reduce using rule 86 (m_exp -> t n_sumQuad .)
    PLUS            shift and go to state 159
    MINUS           shift and go to state 160


state 125

    (90) t -> f n_multQuad .
    (91) t -> f n_multQuad . MULT n_Operador t
    (92) t -> f n_multQuad . DIV n_Operador t

    PLUS            reduce using rule 90 (t -> f n_multQuad .)
    MINUS           reduce using rule 90 (t -> f n_multQuad .)
    LESSTHAN        reduce using rule 90 (t -> f n_multQuad .)
    LESSEQUAL       reduce using rule 90 (t -> f n_multQuad .)
    GREATERTHAN     reduce using rule 90 (t -> f n_multQuad .)
    GREATEREQUAL    reduce using rule 90 (t -> f n_multQuad .)
    SAME            reduce using rule 90 (t -> f n_multQuad .)
    NOEQUAL         reduce using rule 90 (t -> f n_multQuad .)
    AND             reduce using rule 90 (t -> f n_multQuad .)
    OR              reduce using rule 90 (t -> f n_multQuad .)
    COMMA           reduce using rule 90 (t -> f n_multQuad .)
    SEMICOLON       reduce using rule 90 (t -> f n_multQuad .)
    RSQUARE         reduce using rule 90 (t -> f n_multQuad .)
    RPAREN          reduce using rule 90 (t -> f n_multQuad .)
    HASTA           reduce using rule 90 (t -> f n_multQuad .)
    HACER           reduce using rule 90 (t -> f n_multQuad .)
    MULT            shift and go to state 161
    DIV             shift and go to state 162


state 126

    (95) f -> LPAREN n_FF . mult_exp RPAREN n_FF
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 163
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 127

    (96) f -> n_tempTypeI CTE_I . n_directPrint
    (104) n_directPrint -> .

    MULT            reduce using rule 104 (n_directPrint -> .)
    DIV             reduce using rule 104 (n_directPrint -> .)
    PLUS            reduce using rule 104 (n_directPrint -> .)
    MINUS           reduce using rule 104 (n_directPrint -> .)
    LESSTHAN        reduce using rule 104 (n_directPrint -> .)
    LESSEQUAL       reduce using rule 104 (n_directPrint -> .)
    GREATERTHAN     reduce using rule 104 (n_directPrint -> .)
    GREATEREQUAL    reduce using rule 104 (n_directPrint -> .)
    SAME            reduce using rule 104 (n_directPrint -> .)
    NOEQUAL         reduce using rule 104 (n_directPrint -> .)
    AND             reduce using rule 104 (n_directPrint -> .)
    OR              reduce using rule 104 (n_directPrint -> .)
    COMMA           reduce using rule 104 (n_directPrint -> .)
    SEMICOLON       reduce using rule 104 (n_directPrint -> .)
    RSQUARE         reduce using rule 104 (n_directPrint -> .)
    RPAREN          reduce using rule 104 (n_directPrint -> .)
    HASTA           reduce using rule 104 (n_directPrint -> .)
    HACER           reduce using rule 104 (n_directPrint -> .)

    n_directPrint                  shift and go to state 164

state 128

    (97) f -> n_tempTypeF CTE_F . n_directPrint
    (104) n_directPrint -> .

    MULT            reduce using rule 104 (n_directPrint -> .)
    DIV             reduce using rule 104 (n_directPrint -> .)
    PLUS            reduce using rule 104 (n_directPrint -> .)
    MINUS           reduce using rule 104 (n_directPrint -> .)
    LESSTHAN        reduce using rule 104 (n_directPrint -> .)
    LESSEQUAL       reduce using rule 104 (n_directPrint -> .)
    GREATERTHAN     reduce using rule 104 (n_directPrint -> .)
    GREATEREQUAL    reduce using rule 104 (n_directPrint -> .)
    SAME            reduce using rule 104 (n_directPrint -> .)
    NOEQUAL         reduce using rule 104 (n_directPrint -> .)
    AND             reduce using rule 104 (n_directPrint -> .)
    OR              reduce using rule 104 (n_directPrint -> .)
    COMMA           reduce using rule 104 (n_directPrint -> .)
    SEMICOLON       reduce using rule 104 (n_directPrint -> .)
    RSQUARE         reduce using rule 104 (n_directPrint -> .)
    RPAREN          reduce using rule 104 (n_directPrint -> .)
    HASTA           reduce using rule 104 (n_directPrint -> .)
    HACER           reduce using rule 104 (n_directPrint -> .)

    n_directPrint                  shift and go to state 165

state 129

    (98) f -> n_tempTypeC CTE_C . n_directPrint
    (104) n_directPrint -> .

    MULT            reduce using rule 104 (n_directPrint -> .)
    DIV             reduce using rule 104 (n_directPrint -> .)
    PLUS            reduce using rule 104 (n_directPrint -> .)
    MINUS           reduce using rule 104 (n_directPrint -> .)
    LESSTHAN        reduce using rule 104 (n_directPrint -> .)
    LESSEQUAL       reduce using rule 104 (n_directPrint -> .)
    GREATERTHAN     reduce using rule 104 (n_directPrint -> .)
    GREATEREQUAL    reduce using rule 104 (n_directPrint -> .)
    SAME            reduce using rule 104 (n_directPrint -> .)
    NOEQUAL         reduce using rule 104 (n_directPrint -> .)
    AND             reduce using rule 104 (n_directPrint -> .)
    OR              reduce using rule 104 (n_directPrint -> .)
    COMMA           reduce using rule 104 (n_directPrint -> .)
    SEMICOLON       reduce using rule 104 (n_directPrint -> .)
    RSQUARE         reduce using rule 104 (n_directPrint -> .)
    RPAREN          reduce using rule 104 (n_directPrint -> .)
    HASTA           reduce using rule 104 (n_directPrint -> .)
    HACER           reduce using rule 104 (n_directPrint -> .)

    n_directPrint                  shift and go to state 166

state 130

    (115) ciclo_f -> DESDE asigna n_startCicle . HASTA mult_exp n_evalExp_for HACER bloque n_endFor

    HASTA           shift and go to state 167


state 131

    (36) param_aux1 -> ID save_param .
    (37) param_aux1 -> ID save_param . COMMA param

    RPAREN          reduce using rule 36 (param_aux1 -> ID save_param .)
    COMMA           shift and go to state 168


state 132

    (26) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars . bloque n_endof_func
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 169

state 133

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 170

state 134

    (30) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 171

state 135

    (31) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 31 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 31 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN bloque n_endof_func .)


state 136

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN . vars bloque n_endof_func
    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN . bloque n_endof_func
    (7) vars -> . VAR vars_aux
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    VAR             shift and go to state 8
    LBRACKET        shift and go to state 45

    vars                           shift and go to state 172
    bloque                         shift and go to state 173

state 137

    (32) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars . bloque n_endof_func
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 174

state 138

    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 175

state 139

    (59) llamada -> ID n_verify_func LPAREN n_start_pcounter . param_exp RPAREN n_last_param_action
    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter . RPAREN n_last_param_action
    (56) param_exp -> . exp n_parameter_action
    (57) param_exp -> . exp n_parameter_action COMMA param_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    RPAREN          shift and go to state 177
    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    param_exp                      shift and go to state 176
    exp                            shift and go to state 178
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 140

    (21) variable -> ID LSQUARE mult_exp RSQUARE .

    EQUAL           reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    MULT            reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    DIV             reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    PLUS            reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    MINUS           reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    LESSTHAN        reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    LESSEQUAL       reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    GREATERTHAN     reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    GREATEREQUAL    reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    SAME            reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    NOEQUAL         reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    AND             reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    OR              reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    COMMA           reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    SEMICOLON       reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    RSQUARE         reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    RPAREN          reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    HASTA           reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)
    HACER           reduce using rule 21 (variable -> ID LSQUARE mult_exp RSQUARE .)


state 141

    (64) lee -> LEE LPAREN variable RPAREN .

    ID              reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    LEE             reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    ESCRIBE         reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    SI              reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    MIENTRAS        reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    REGRESA         reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    DESDE           reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)
    RBRACKET        reduce using rule 64 (lee -> LEE LPAREN variable RPAREN .)


state 142

    (53) mult_asigna -> variable . EQUAL n_Operador mult_exp n_asignQuad
    (54) mult_asigna -> variable . EQUAL n_Operador mult_asigna n_asignQuad
    (99) f -> variable .

    EQUAL           shift and go to state 83
    MULT            reduce using rule 99 (f -> variable .)
    DIV             reduce using rule 99 (f -> variable .)
    PLUS            reduce using rule 99 (f -> variable .)
    MINUS           reduce using rule 99 (f -> variable .)
    LESSTHAN        reduce using rule 99 (f -> variable .)
    LESSEQUAL       reduce using rule 99 (f -> variable .)
    GREATERTHAN     reduce using rule 99 (f -> variable .)
    GREATEREQUAL    reduce using rule 99 (f -> variable .)
    SAME            reduce using rule 99 (f -> variable .)
    NOEQUAL         reduce using rule 99 (f -> variable .)
    AND             reduce using rule 99 (f -> variable .)
    OR              reduce using rule 99 (f -> variable .)
    COMMA           reduce using rule 99 (f -> variable .)
    SEMICOLON       reduce using rule 99 (f -> variable .)
    HASTA           reduce using rule 99 (f -> variable .)


state 143

    (53) mult_asigna -> variable EQUAL n_Operador mult_exp . n_asignQuad
    (55) n_asignQuad -> .

    SEMICOLON       reduce using rule 55 (n_asignQuad -> .)
    HASTA           reduce using rule 55 (n_asignQuad -> .)

    n_asignQuad                    shift and go to state 179

state 144

    (54) mult_asigna -> variable EQUAL n_Operador mult_asigna . n_asignQuad
    (55) n_asignQuad -> .

    SEMICOLON       reduce using rule 55 (n_asignQuad -> .)
    HASTA           reduce using rule 55 (n_asignQuad -> .)

    n_asignQuad                    shift and go to state 180

state 145

    (65) escribe -> ESCRIBE LPAREN mult_exp n_escribeExp . RPAREN SEMICOLON

    RPAREN          shift and go to state 181


state 146

    (66) escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp . RPAREN SEMICOLON

    RPAREN          shift and go to state 182


state 147

    (69) mult_cte_s -> CTE_S COMMA . mult_cte_s
    (68) mult_cte_s -> . CTE_S
    (69) mult_cte_s -> . CTE_S COMMA mult_cte_s

    CTE_S           shift and go to state 116

    mult_cte_s                     shift and go to state 183

state 148

    (106) condicion -> SI LPAREN mult_exp RPAREN . n_ifQuad ENTONCES bloque n_endIfQuad
    (107) condicion -> SI LPAREN mult_exp RPAREN . n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (108) n_ifQuad -> .

    ENTONCES        reduce using rule 108 (n_ifQuad -> .)

    n_ifQuad                       shift and go to state 184

state 149

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp . RPAREN n_evalExp HAZ bloque n_endWhile

    RPAREN          shift and go to state 185


state 150

    (71) mult_exp -> exp COMMA mult_exp .

    SEMICOLON       reduce using rule 71 (mult_exp -> exp COMMA mult_exp .)
    RSQUARE         reduce using rule 71 (mult_exp -> exp COMMA mult_exp .)
    RPAREN          reduce using rule 71 (mult_exp -> exp COMMA mult_exp .)
    HASTA           reduce using rule 71 (mult_exp -> exp COMMA mult_exp .)
    HACER           reduce using rule 71 (mult_exp -> exp COMMA mult_exp .)


state 151

    (73) exp -> t_exp n_orQuad OR . n_Operador exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 186

state 152

    (76) t_exp -> g_exp n_andQuad AND . n_Operador t_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 187

state 153

    (79) g_exp -> m_exp n_compareQuad LESSTHAN . n_Operador g_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 188

state 154

    (80) g_exp -> m_exp n_compareQuad LESSEQUAL . n_Operador g_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 189

state 155

    (81) g_exp -> m_exp n_compareQuad GREATERTHAN . n_Operador g_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 190

state 156

    (82) g_exp -> m_exp n_compareQuad GREATEREQUAL . n_Operador g_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 191

state 157

    (83) g_exp -> m_exp n_compareQuad SAME . n_Operador g_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 192

state 158

    (84) g_exp -> m_exp n_compareQuad NOEQUAL . n_Operador g_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 193

state 159

    (87) m_exp -> t n_sumQuad PLUS . n_Operador m_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 194

state 160

    (88) m_exp -> t n_sumQuad MINUS . n_Operador m_exp
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 195

state 161

    (91) t -> f n_multQuad MULT . n_Operador t
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 196

state 162

    (92) t -> f n_multQuad DIV . n_Operador t
    (94) n_Operador -> .

    LPAREN          reduce using rule 94 (n_Operador -> .)
    ID              reduce using rule 94 (n_Operador -> .)
    CTE_I           reduce using rule 94 (n_Operador -> .)
    CTE_F           reduce using rule 94 (n_Operador -> .)
    CTE_C           reduce using rule 94 (n_Operador -> .)

    n_Operador                     shift and go to state 197

state 163

    (95) f -> LPAREN n_FF mult_exp . RPAREN n_FF

    RPAREN          shift and go to state 198


state 164

    (96) f -> n_tempTypeI CTE_I n_directPrint .

    MULT            reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    DIV             reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    PLUS            reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    MINUS           reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    LESSTHAN        reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    LESSEQUAL       reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    GREATERTHAN     reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    GREATEREQUAL    reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    SAME            reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    NOEQUAL         reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    AND             reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    OR              reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    COMMA           reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    SEMICOLON       reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    RSQUARE         reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    RPAREN          reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    HASTA           reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)
    HACER           reduce using rule 96 (f -> n_tempTypeI CTE_I n_directPrint .)


state 165

    (97) f -> n_tempTypeF CTE_F n_directPrint .

    MULT            reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    DIV             reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    PLUS            reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    MINUS           reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    LESSTHAN        reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    LESSEQUAL       reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    GREATERTHAN     reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    GREATEREQUAL    reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    SAME            reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    NOEQUAL         reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    AND             reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    OR              reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    COMMA           reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    SEMICOLON       reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    RSQUARE         reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    RPAREN          reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    HASTA           reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)
    HACER           reduce using rule 97 (f -> n_tempTypeF CTE_F n_directPrint .)


state 166

    (98) f -> n_tempTypeC CTE_C n_directPrint .

    MULT            reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    DIV             reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    PLUS            reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    MINUS           reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    LESSTHAN        reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    LESSEQUAL       reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    GREATERTHAN     reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    GREATEREQUAL    reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    SAME            reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    NOEQUAL         reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    AND             reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    OR              reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    COMMA           reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    SEMICOLON       reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    RSQUARE         reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    RPAREN          reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    HASTA           reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)
    HACER           reduce using rule 98 (f -> n_tempTypeC CTE_C n_directPrint .)


state 167

    (115) ciclo_f -> DESDE asigna n_startCicle HASTA . mult_exp n_evalExp_for HACER bloque n_endFor
    (70) mult_exp -> . exp
    (71) mult_exp -> . exp COMMA mult_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    mult_exp                       shift and go to state 199
    exp                            shift and go to state 88
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 168

    (37) param_aux1 -> ID save_param COMMA . param
    (35) param -> . tipo_simple param_aux1
    (16) tipo_simple -> . INT n_save_type
    (17) tipo_simple -> . FLOAT n_save_type
    (18) tipo_simple -> . CHAR n_save_type

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    param                          shift and go to state 200
    tipo_simple                    shift and go to state 69

state 169

    (26) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 201

state 170

    (27) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 27 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 27 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN bloque n_endof_func .)


state 171

    (30) funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 30 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 30 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)


state 172

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars . bloque n_endof_func
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 202

state 173

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 203

state 174

    (32) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 204

state 175

    (33) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 33 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 33 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN bloque n_endof_func .)


state 176

    (59) llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp . RPAREN n_last_param_action

    RPAREN          shift and go to state 205


state 177

    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN . n_last_param_action
    (61) n_last_param_action -> .

    SEMICOLON       reduce using rule 61 (n_last_param_action -> .)
    MULT            reduce using rule 61 (n_last_param_action -> .)
    DIV             reduce using rule 61 (n_last_param_action -> .)
    PLUS            reduce using rule 61 (n_last_param_action -> .)
    MINUS           reduce using rule 61 (n_last_param_action -> .)
    LESSTHAN        reduce using rule 61 (n_last_param_action -> .)
    LESSEQUAL       reduce using rule 61 (n_last_param_action -> .)
    GREATERTHAN     reduce using rule 61 (n_last_param_action -> .)
    GREATEREQUAL    reduce using rule 61 (n_last_param_action -> .)
    SAME            reduce using rule 61 (n_last_param_action -> .)
    NOEQUAL         reduce using rule 61 (n_last_param_action -> .)
    AND             reduce using rule 61 (n_last_param_action -> .)
    OR              reduce using rule 61 (n_last_param_action -> .)
    COMMA           reduce using rule 61 (n_last_param_action -> .)
    RSQUARE         reduce using rule 61 (n_last_param_action -> .)
    RPAREN          reduce using rule 61 (n_last_param_action -> .)
    HASTA           reduce using rule 61 (n_last_param_action -> .)
    HACER           reduce using rule 61 (n_last_param_action -> .)

    n_last_param_action            shift and go to state 206

state 178

    (56) param_exp -> exp . n_parameter_action
    (57) param_exp -> exp . n_parameter_action COMMA param_exp
    (58) n_parameter_action -> .

    COMMA           reduce using rule 58 (n_parameter_action -> .)
    RPAREN          reduce using rule 58 (n_parameter_action -> .)

    n_parameter_action             shift and go to state 207

state 179

    (53) mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad .

    SEMICOLON       reduce using rule 53 (mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad .)
    HASTA           reduce using rule 53 (mult_asigna -> variable EQUAL n_Operador mult_exp n_asignQuad .)


state 180

    (54) mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad .

    SEMICOLON       reduce using rule 54 (mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad .)
    HASTA           reduce using rule 54 (mult_asigna -> variable EQUAL n_Operador mult_asigna n_asignQuad .)


state 181

    (65) escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 208


state 182

    (66) escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 183

    (69) mult_cte_s -> CTE_S COMMA mult_cte_s .

    RPAREN          reduce using rule 69 (mult_cte_s -> CTE_S COMMA mult_cte_s .)


state 184

    (106) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad . ENTONCES bloque n_endIfQuad
    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad . ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad

    ENTONCES        shift and go to state 210


state 185

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN . n_evalExp HAZ bloque n_endWhile
    (113) n_evalExp -> .

    HAZ             reduce using rule 113 (n_evalExp -> .)

    n_evalExp                      shift and go to state 211

state 186

    (73) exp -> t_exp n_orQuad OR n_Operador . exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    t_exp                          shift and go to state 89
    exp                            shift and go to state 212
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 187

    (76) t_exp -> g_exp n_andQuad AND n_Operador . t_exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    g_exp                          shift and go to state 90
    t_exp                          shift and go to state 213
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 188

    (79) g_exp -> m_exp n_compareQuad LESSTHAN n_Operador . g_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    m_exp                          shift and go to state 91
    g_exp                          shift and go to state 214
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 189

    (80) g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador . g_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    m_exp                          shift and go to state 91
    g_exp                          shift and go to state 215
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 190

    (81) g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador . g_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    m_exp                          shift and go to state 91
    g_exp                          shift and go to state 216
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 191

    (82) g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador . g_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    m_exp                          shift and go to state 91
    g_exp                          shift and go to state 217
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 192

    (83) g_exp -> m_exp n_compareQuad SAME n_Operador . g_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    m_exp                          shift and go to state 91
    g_exp                          shift and go to state 218
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 193

    (84) g_exp -> m_exp n_compareQuad NOEQUAL n_Operador . g_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    m_exp                          shift and go to state 91
    g_exp                          shift and go to state 219
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 194

    (87) m_exp -> t n_sumQuad PLUS n_Operador . m_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    t                              shift and go to state 92
    m_exp                          shift and go to state 220
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 195

    (88) m_exp -> t n_sumQuad MINUS n_Operador . m_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    t                              shift and go to state 92
    m_exp                          shift and go to state 221
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 196

    (91) t -> f n_multQuad MULT n_Operador . t
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    f                              shift and go to state 93
    t                              shift and go to state 222
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 197

    (92) t -> f n_multQuad DIV n_Operador . t
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    f                              shift and go to state 93
    t                              shift and go to state 223
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 198

    (95) f -> LPAREN n_FF mult_exp RPAREN . n_FF
    (105) n_FF -> .

    MULT            reduce using rule 105 (n_FF -> .)
    DIV             reduce using rule 105 (n_FF -> .)
    PLUS            reduce using rule 105 (n_FF -> .)
    MINUS           reduce using rule 105 (n_FF -> .)
    LESSTHAN        reduce using rule 105 (n_FF -> .)
    LESSEQUAL       reduce using rule 105 (n_FF -> .)
    GREATERTHAN     reduce using rule 105 (n_FF -> .)
    GREATEREQUAL    reduce using rule 105 (n_FF -> .)
    SAME            reduce using rule 105 (n_FF -> .)
    NOEQUAL         reduce using rule 105 (n_FF -> .)
    AND             reduce using rule 105 (n_FF -> .)
    OR              reduce using rule 105 (n_FF -> .)
    COMMA           reduce using rule 105 (n_FF -> .)
    SEMICOLON       reduce using rule 105 (n_FF -> .)
    RSQUARE         reduce using rule 105 (n_FF -> .)
    RPAREN          reduce using rule 105 (n_FF -> .)
    HASTA           reduce using rule 105 (n_FF -> .)
    HACER           reduce using rule 105 (n_FF -> .)

    n_FF                           shift and go to state 224

state 199

    (115) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp . n_evalExp_for HACER bloque n_endFor
    (116) n_evalExp_for -> .

    HACER           reduce using rule 116 (n_evalExp_for -> .)

    n_evalExp_for                  shift and go to state 225

state 200

    (37) param_aux1 -> ID save_param COMMA param .

    RPAREN          reduce using rule 37 (param_aux1 -> ID save_param COMMA param .)


state 201

    (26) funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 26 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 26 (funcion -> FUNCION tipo_simple ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)


state 202

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque . n_endof_func
    (39) n_endof_func -> .

    FUNCION         reduce using rule 39 (n_endof_func -> .)
    PRINCIPAL       reduce using rule 39 (n_endof_func -> .)

    n_endof_func                   shift and go to state 226

state 203

    (29) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func .

    FUNCION         reduce using rule 29 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func .)
    PRINCIPAL       reduce using rule 29 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN bloque n_endof_func .)


state 204

    (32) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 32 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 32 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN RPAREN vars bloque n_endof_func .)


state 205

    (59) llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN . n_last_param_action
    (61) n_last_param_action -> .

    SEMICOLON       reduce using rule 61 (n_last_param_action -> .)
    MULT            reduce using rule 61 (n_last_param_action -> .)
    DIV             reduce using rule 61 (n_last_param_action -> .)
    PLUS            reduce using rule 61 (n_last_param_action -> .)
    MINUS           reduce using rule 61 (n_last_param_action -> .)
    LESSTHAN        reduce using rule 61 (n_last_param_action -> .)
    LESSEQUAL       reduce using rule 61 (n_last_param_action -> .)
    GREATERTHAN     reduce using rule 61 (n_last_param_action -> .)
    GREATEREQUAL    reduce using rule 61 (n_last_param_action -> .)
    SAME            reduce using rule 61 (n_last_param_action -> .)
    NOEQUAL         reduce using rule 61 (n_last_param_action -> .)
    AND             reduce using rule 61 (n_last_param_action -> .)
    OR              reduce using rule 61 (n_last_param_action -> .)
    COMMA           reduce using rule 61 (n_last_param_action -> .)
    RSQUARE         reduce using rule 61 (n_last_param_action -> .)
    RPAREN          reduce using rule 61 (n_last_param_action -> .)
    HASTA           reduce using rule 61 (n_last_param_action -> .)
    HACER           reduce using rule 61 (n_last_param_action -> .)

    n_last_param_action            shift and go to state 227

state 206

    (60) llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .

    SEMICOLON       reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    MULT            reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    DIV             reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    PLUS            reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    MINUS           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    LESSTHAN        reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    LESSEQUAL       reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    GREATERTHAN     reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    GREATEREQUAL    reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    SAME            reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    NOEQUAL         reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    AND             reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    OR              reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    COMMA           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    RSQUARE         reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    RPAREN          reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    HASTA           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)
    HACER           reduce using rule 60 (llamada -> ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action .)


state 207

    (56) param_exp -> exp n_parameter_action .
    (57) param_exp -> exp n_parameter_action . COMMA param_exp

    RPAREN          reduce using rule 56 (param_exp -> exp n_parameter_action .)
    COMMA           shift and go to state 228


state 208

    (65) escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .

    ID              reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    LEE             reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    SI              reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    DESDE           reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 65 (escribe -> ESCRIBE LPAREN mult_exp n_escribeExp RPAREN SEMICOLON .)


state 209

    (66) escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .

    ID              reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    LEE             reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    SI              reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    DESDE           reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 66 (escribe -> ESCRIBE LPAREN mult_cte_s n_escribeExp RPAREN SEMICOLON .)


state 210

    (106) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES . bloque n_endIfQuad
    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES . bloque SINO p_n_sinoQuad bloque n_endIfQuad
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 229

state 211

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp . HAZ bloque n_endWhile

    HAZ             shift and go to state 230


state 212

    (73) exp -> t_exp n_orQuad OR n_Operador exp .

    COMMA           reduce using rule 73 (exp -> t_exp n_orQuad OR n_Operador exp .)
    SEMICOLON       reduce using rule 73 (exp -> t_exp n_orQuad OR n_Operador exp .)
    RSQUARE         reduce using rule 73 (exp -> t_exp n_orQuad OR n_Operador exp .)
    RPAREN          reduce using rule 73 (exp -> t_exp n_orQuad OR n_Operador exp .)
    HASTA           reduce using rule 73 (exp -> t_exp n_orQuad OR n_Operador exp .)
    HACER           reduce using rule 73 (exp -> t_exp n_orQuad OR n_Operador exp .)


state 213

    (76) t_exp -> g_exp n_andQuad AND n_Operador t_exp .

    OR              reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    COMMA           reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    SEMICOLON       reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    RSQUARE         reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    RPAREN          reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    HASTA           reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)
    HACER           reduce using rule 76 (t_exp -> g_exp n_andQuad AND n_Operador t_exp .)


state 214

    (79) g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .

    AND             reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    OR              reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    COMMA           reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    SEMICOLON       reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    RSQUARE         reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    RPAREN          reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    HASTA           reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)
    HACER           reduce using rule 79 (g_exp -> m_exp n_compareQuad LESSTHAN n_Operador g_exp .)


state 215

    (80) g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .

    AND             reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    OR              reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    COMMA           reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    SEMICOLON       reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    RSQUARE         reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    RPAREN          reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    HASTA           reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)
    HACER           reduce using rule 80 (g_exp -> m_exp n_compareQuad LESSEQUAL n_Operador g_exp .)


state 216

    (81) g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .

    AND             reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    OR              reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    COMMA           reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    SEMICOLON       reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    RSQUARE         reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    RPAREN          reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    HASTA           reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)
    HACER           reduce using rule 81 (g_exp -> m_exp n_compareQuad GREATERTHAN n_Operador g_exp .)


state 217

    (82) g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .

    AND             reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    OR              reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    COMMA           reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    SEMICOLON       reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    RSQUARE         reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    RPAREN          reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    HASTA           reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)
    HACER           reduce using rule 82 (g_exp -> m_exp n_compareQuad GREATEREQUAL n_Operador g_exp .)


state 218

    (83) g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .

    AND             reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    OR              reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    COMMA           reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    SEMICOLON       reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    RSQUARE         reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    RPAREN          reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    HASTA           reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)
    HACER           reduce using rule 83 (g_exp -> m_exp n_compareQuad SAME n_Operador g_exp .)


state 219

    (84) g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .

    AND             reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    OR              reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    COMMA           reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    SEMICOLON       reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    RSQUARE         reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    RPAREN          reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    HASTA           reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)
    HACER           reduce using rule 84 (g_exp -> m_exp n_compareQuad NOEQUAL n_Operador g_exp .)


state 220

    (87) m_exp -> t n_sumQuad PLUS n_Operador m_exp .

    LESSTHAN        reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    LESSEQUAL       reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    GREATERTHAN     reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    GREATEREQUAL    reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    SAME            reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    NOEQUAL         reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    AND             reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    OR              reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    COMMA           reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    SEMICOLON       reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    RSQUARE         reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    RPAREN          reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    HASTA           reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)
    HACER           reduce using rule 87 (m_exp -> t n_sumQuad PLUS n_Operador m_exp .)


state 221

    (88) m_exp -> t n_sumQuad MINUS n_Operador m_exp .

    LESSTHAN        reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    LESSEQUAL       reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    GREATERTHAN     reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    GREATEREQUAL    reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    SAME            reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    NOEQUAL         reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    AND             reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    OR              reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    COMMA           reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    SEMICOLON       reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    RSQUARE         reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    RPAREN          reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    HASTA           reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)
    HACER           reduce using rule 88 (m_exp -> t n_sumQuad MINUS n_Operador m_exp .)


state 222

    (91) t -> f n_multQuad MULT n_Operador t .

    PLUS            reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    MINUS           reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    LESSTHAN        reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    LESSEQUAL       reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    GREATERTHAN     reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    GREATEREQUAL    reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    SAME            reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    NOEQUAL         reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    AND             reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    OR              reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    COMMA           reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    SEMICOLON       reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    RSQUARE         reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    RPAREN          reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    HASTA           reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)
    HACER           reduce using rule 91 (t -> f n_multQuad MULT n_Operador t .)


state 223

    (92) t -> f n_multQuad DIV n_Operador t .

    PLUS            reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    MINUS           reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    LESSTHAN        reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    LESSEQUAL       reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    GREATERTHAN     reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    GREATEREQUAL    reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    SAME            reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    NOEQUAL         reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    AND             reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    OR              reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    COMMA           reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    SEMICOLON       reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    RSQUARE         reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    RPAREN          reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    HASTA           reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)
    HACER           reduce using rule 92 (t -> f n_multQuad DIV n_Operador t .)


state 224

    (95) f -> LPAREN n_FF mult_exp RPAREN n_FF .

    MULT            reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    DIV             reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    PLUS            reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    MINUS           reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    LESSTHAN        reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    LESSEQUAL       reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    GREATERTHAN     reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    GREATEREQUAL    reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    SAME            reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    NOEQUAL         reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    AND             reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    OR              reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    COMMA           reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    SEMICOLON       reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    RSQUARE         reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    RPAREN          reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    HASTA           reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)
    HACER           reduce using rule 95 (f -> LPAREN n_FF mult_exp RPAREN n_FF .)


state 225

    (115) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for . HACER bloque n_endFor

    HACER           shift and go to state 231


state 226

    (28) funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .

    FUNCION         reduce using rule 28 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)
    PRINCIPAL       reduce using rule 28 (funcion -> FUNCION VOID n_save_type ID n_register_func LPAREN param RPAREN vars bloque n_endof_func .)


state 227

    (59) llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .

    SEMICOLON       reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    MULT            reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    DIV             reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    PLUS            reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    MINUS           reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    LESSTHAN        reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    LESSEQUAL       reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    GREATERTHAN     reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    GREATEREQUAL    reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    SAME            reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    NOEQUAL         reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    AND             reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    OR              reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    COMMA           reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    RSQUARE         reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    RPAREN          reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    HASTA           reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)
    HACER           reduce using rule 59 (llamada -> ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action .)


state 228

    (57) param_exp -> exp n_parameter_action COMMA . param_exp
    (56) param_exp -> . exp n_parameter_action
    (57) param_exp -> . exp n_parameter_action COMMA param_exp
    (72) exp -> . t_exp n_orQuad
    (73) exp -> . t_exp n_orQuad OR n_Operador exp
    (75) t_exp -> . g_exp n_andQuad
    (76) t_exp -> . g_exp n_andQuad AND n_Operador t_exp
    (78) g_exp -> . m_exp n_compareQuad
    (79) g_exp -> . m_exp n_compareQuad LESSTHAN n_Operador g_exp
    (80) g_exp -> . m_exp n_compareQuad LESSEQUAL n_Operador g_exp
    (81) g_exp -> . m_exp n_compareQuad GREATERTHAN n_Operador g_exp
    (82) g_exp -> . m_exp n_compareQuad GREATEREQUAL n_Operador g_exp
    (83) g_exp -> . m_exp n_compareQuad SAME n_Operador g_exp
    (84) g_exp -> . m_exp n_compareQuad NOEQUAL n_Operador g_exp
    (86) m_exp -> . t n_sumQuad
    (87) m_exp -> . t n_sumQuad PLUS n_Operador m_exp
    (88) m_exp -> . t n_sumQuad MINUS n_Operador m_exp
    (90) t -> . f n_multQuad
    (91) t -> . f n_multQuad MULT n_Operador t
    (92) t -> . f n_multQuad DIV n_Operador t
    (95) f -> . LPAREN n_FF mult_exp RPAREN n_FF
    (96) f -> . n_tempTypeI CTE_I n_directPrint
    (97) f -> . n_tempTypeF CTE_F n_directPrint
    (98) f -> . n_tempTypeC CTE_C n_directPrint
    (99) f -> . variable
    (100) f -> . llamada
    (101) n_tempTypeI -> .
    (102) n_tempTypeF -> .
    (103) n_tempTypeC -> .
    (21) variable -> . ID LSQUARE mult_exp RSQUARE
    (22) variable -> . ID p_n_getVarVal
    (59) llamada -> . ID n_verify_func LPAREN n_start_pcounter param_exp RPAREN n_last_param_action
    (60) llamada -> . ID n_verify_func LPAREN n_start_pcounter RPAREN n_last_param_action

    LPAREN          shift and go to state 94
    CTE_I           reduce using rule 101 (n_tempTypeI -> .)
    CTE_F           reduce using rule 102 (n_tempTypeF -> .)
    CTE_C           reduce using rule 103 (n_tempTypeC -> .)
    ID              shift and go to state 100

    exp                            shift and go to state 178
    param_exp                      shift and go to state 232
    t_exp                          shift and go to state 89
    g_exp                          shift and go to state 90
    m_exp                          shift and go to state 91
    t                              shift and go to state 92
    f                              shift and go to state 93
    n_tempTypeI                    shift and go to state 95
    n_tempTypeF                    shift and go to state 96
    n_tempTypeC                    shift and go to state 97
    variable                       shift and go to state 98
    llamada                        shift and go to state 99

state 229

    (106) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque . n_endIfQuad
    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque . SINO p_n_sinoQuad bloque n_endIfQuad
    (109) n_endIfQuad -> .

    SINO            shift and go to state 234
    ID              reduce using rule 109 (n_endIfQuad -> .)
    LEE             reduce using rule 109 (n_endIfQuad -> .)
    ESCRIBE         reduce using rule 109 (n_endIfQuad -> .)
    SI              reduce using rule 109 (n_endIfQuad -> .)
    MIENTRAS        reduce using rule 109 (n_endIfQuad -> .)
    REGRESA         reduce using rule 109 (n_endIfQuad -> .)
    DESDE           reduce using rule 109 (n_endIfQuad -> .)
    RBRACKET        reduce using rule 109 (n_endIfQuad -> .)

    n_endIfQuad                    shift and go to state 233

state 230

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ . bloque n_endWhile
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 235

state 231

    (115) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER . bloque n_endFor
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 236

state 232

    (57) param_exp -> exp n_parameter_action COMMA param_exp .

    RPAREN          reduce using rule 57 (param_exp -> exp n_parameter_action COMMA param_exp .)


state 233

    (106) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .

    ID              reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    LEE             reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    ESCRIBE         reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    SI              reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    MIENTRAS        reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    REGRESA         reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    DESDE           reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)
    RBRACKET        reduce using rule 106 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque n_endIfQuad .)


state 234

    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO . p_n_sinoQuad bloque n_endIfQuad
    (110) p_n_sinoQuad -> .

    LBRACKET        reduce using rule 110 (p_n_sinoQuad -> .)

    p_n_sinoQuad                   shift and go to state 237

state 235

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque . n_endWhile
    (114) n_endWhile -> .

    ID              reduce using rule 114 (n_endWhile -> .)
    LEE             reduce using rule 114 (n_endWhile -> .)
    ESCRIBE         reduce using rule 114 (n_endWhile -> .)
    SI              reduce using rule 114 (n_endWhile -> .)
    MIENTRAS        reduce using rule 114 (n_endWhile -> .)
    REGRESA         reduce using rule 114 (n_endWhile -> .)
    DESDE           reduce using rule 114 (n_endWhile -> .)
    RBRACKET        reduce using rule 114 (n_endWhile -> .)

    n_endWhile                     shift and go to state 238

state 236

    (115) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque . n_endFor
    (117) n_endFor -> .

    ID              reduce using rule 117 (n_endFor -> .)
    LEE             reduce using rule 117 (n_endFor -> .)
    ESCRIBE         reduce using rule 117 (n_endFor -> .)
    SI              reduce using rule 117 (n_endFor -> .)
    MIENTRAS        reduce using rule 117 (n_endFor -> .)
    REGRESA         reduce using rule 117 (n_endFor -> .)
    DESDE           reduce using rule 117 (n_endFor -> .)
    RBRACKET        reduce using rule 117 (n_endFor -> .)

    n_endFor                       shift and go to state 239

state 237

    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad . bloque n_endIfQuad
    (40) bloque -> . LBRACKET mult_estatutos RBRACKET
    (41) bloque -> . LBRACKET empty RBRACKET

    LBRACKET        shift and go to state 45

    bloque                         shift and go to state 240

state 238

    (111) ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .

    ID              reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    LEE             reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    ESCRIBE         reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    SI              reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    MIENTRAS        reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    REGRESA         reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    DESDE           reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)
    RBRACKET        reduce using rule 111 (ciclo_w -> MIENTRAS n_startCicle LPAREN mult_exp RPAREN n_evalExp HAZ bloque n_endWhile .)


state 239

    (115) ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .

    ID              reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    LEE             reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    ESCRIBE         reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    SI              reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    MIENTRAS        reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    REGRESA         reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    DESDE           reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)
    RBRACKET        reduce using rule 115 (ciclo_f -> DESDE asigna n_startCicle HASTA mult_exp n_evalExp_for HACER bloque n_endFor .)


state 240

    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque . n_endIfQuad
    (109) n_endIfQuad -> .

    ID              reduce using rule 109 (n_endIfQuad -> .)
    LEE             reduce using rule 109 (n_endIfQuad -> .)
    ESCRIBE         reduce using rule 109 (n_endIfQuad -> .)
    SI              reduce using rule 109 (n_endIfQuad -> .)
    MIENTRAS        reduce using rule 109 (n_endIfQuad -> .)
    REGRESA         reduce using rule 109 (n_endIfQuad -> .)
    DESDE           reduce using rule 109 (n_endIfQuad -> .)
    RBRACKET        reduce using rule 109 (n_endIfQuad -> .)

    n_endIfQuad                    shift and go to state 241

state 241

    (107) condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .

    ID              reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    LEE             reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    ESCRIBE         reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    SI              reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    MIENTRAS        reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    REGRESA         reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    DESDE           reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)
    RBRACKET        reduce using rule 107 (condicion -> SI LPAREN mult_exp RPAREN n_ifQuad ENTONCES bloque SINO p_n_sinoQuad bloque n_endIfQuad .)

